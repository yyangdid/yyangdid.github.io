<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[电子技术自学指南第三版笔记]]></title>
      <url>http://yyangdid.github.io/2017/02/21/%E5%AD%A6%E4%B9%A0%E5%8D%95%E7%89%87%E6%9C%BA/2017-02-21.%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E8%87%AA%E5%AD%A6%E6%8C%87%E5%8D%97%E7%AC%AC%E4%B8%89%E7%89%88%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org00f0e97">1. 直流电路基础知识</a>
<ul>
<li><a href="#orgf659a7f">1.1. 电流</a>
<ul>
<li><a href="#orgb92b2c4">1.1.1. 电气和电子设备需要电流才能工作。</a></li>
<li><a href="#orgc639373">1.1.2. 电流产生的方法有很多种。</a></li>
<li><a href="#org43f5184">1.1.3. 电流</a></li>
</ul>
</li>
<li><a href="#org10ef3e2">1.2. 欧姆定律</a>
<ul>
<li><a href="#orge171f6d">1.2.1. 欧姆定律阐明了电压、电流、电阻之间的关系。</a></li>
</ul>
</li>
<li><a href="#orgb8148ef">1.3. 电阻的串联</a></li>
<li><a href="#orgb93699c">1.4. 电阻的并联</a></li>
<li><a href="#orgf2b13c9">1.5. 功率</a></li>
<li><a href="#org193712e">1.6. 微电流</a></li>
<li><a href="#org7c0a7b0">1.7. 伏 - 安特性曲线</a></li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
电子技术自学指南第三版笔记
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org00f0e97" class="outline-2">
<h2 id="org00f0e97"><span class="section-number-2">1</span> 直流电路基础知识</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgf659a7f" class="outline-3">
<h3 id="orgf659a7f"><span class="section-number-3">1.1</span> 电流</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-orgb92b2c4" class="outline-4">
<h4 id="orgb92b2c4"><span class="section-number-4">1.1.1</span> 电气和电子设备需要电流才能工作。</h4>
<div class="outline-text-4" id="text-1-1-1">
<ul class="org-ul">
<li><p>
<b></b> 什么是电流？
</p>

<p>
<b></b> 电荷的流动被称为电流。这种电荷通常由带负电子的电子组成。然而，在半导体中，
也有带正电子的载流子，他们被称为空穴 (hole)。
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orgc639373" class="outline-4">
<h4 id="orgc639373"><span class="section-number-4">1.1.2</span> 电流产生的方法有很多种。</h4>
<div class="outline-text-4" id="text-1-1-2">
<ul class="org-ul">
<li><p>
<b></b> 写出几种电流产生的方法
</p>

<p>
<b></b> 常用的方法：
</p>

<ol class="org-ol">
<li>磁场法：在磁场中旋转的导线中能产生感生电子。水力、风力或蒸汽驱动的发电
机，汽车里的风扇。</li>

<li>化学法：利用化学品和电极之间发生的化学反应来产生单子。电池。</li>

<li>光伏法：当光照射到半导体晶体上时产生电子。太阳能电池。</li>
</ol>
<p>
不常用的方法：
</p>

<ol class="org-ol">
<li>热学法：利用热电偶的结间温差产生电子。太空飞船上的发电机就使用热电学法
发电，它使用放射性物质作为燃料。</li>

<li>电化学反应法：利用氢气、氧气和电极间的电化学反应产生电荷。燃料电池。</li>

<li>压电法：利用压电物质的机械形变产生电荷。安装在鞋跟上的压电材料能在人走
动时点亮 LED 。</li>
</ol></li>
</ul>
</div>
</div>
<div id="outline-container-org43f5184" class="outline-4">
<h4 id="org43f5184"><span class="section-number-4">1.1.3</span> 电流</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
本书使用电池作为电压源。电池为电路提供电势差，从而产生电流。电流就是电荷的流
动。对于电池，流动的电荷就是电子，从电子过剩的一端流向电子匮乏的一端。由于电
子带负电荷，所以实际上是从电池负极流向正极，称该方向为电子流的方向。但是多数
教科书都采用电流的方向，电流的方向和电子流的方向相反，称为常规电流方向或简称
为电流方向。
</p>

<ul class="org-ul">
<li><p>
<b>A</b> 画出下图的电流方向(电池符号已经注明了正负极)。
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0001_2017-02-21_15-50-31.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>

<p>
<b>B</b> 什么说明存在电势差？
</p>

<p>
<b>C</b> 电势差会导致什么情况？
</p>

<p>
<b>D</b> 如果电池反接会出现什么情况？
</p>

<p>
<b>A</b>
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0002_2017-02-21_15-50-59.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>

<p>
<b>B</b> 电池符号表明了电路两端由电势差(也称为电压)。
</p>

<p>
<b>C</b> 如果接有题目图示中的完整电路，那么就会产生电流。
</p>

<p>
<b>D</b> 电流会沿反方向流动。
</p></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org10ef3e2" class="outline-3">
<h3 id="org10ef3e2"><span class="section-number-3">1.2</span> 欧姆定律</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-orge171f6d" class="outline-4">
<h4 id="orge171f6d"><span class="section-number-4">1.2.1</span> 欧姆定律阐明了电压、电流、电阻之间的关系。</h4>
<div class="outline-text-4" id="text-1-2-1">
<ul class="org-ul">
<li><p>
<b></b> 欧姆定律的代数表达式？
</p>

<p>
<b></b> V = I x R 
</p>

<p>
V 代表电压(有些书籍使用 E 表示)，I 代表电流，R 代表电阻。
</p></li>
<li><p>
<b></b> 使用欧姆定律求解下面问题
</p>

<p>
<b>A</b> R = 20Ω    I = 0.5A   V = ??
</p>

<p>
<b>B</b> R = 560Ω   I = 0.02A  V = ??
</p>

<p>
<b>C</b> R = 1000Ω  I = 0.01A  V = ??
</p>

<p>
<b>D</b> R = 20Ω    I = 1.5A   V = ??
</p>

<p>
<b>A</b> 10V
</p>

<p>
<b>B</b> 11.2V
</p>

<p>
<b>C</b> 10A
</p>

<p>
<b>D</b> 30A 
</p></li>
<li><p>
<b></b> 使用欧姆定律求解电流值
</p>

<p>
<b>A</b> V = 1V    R = 2Ω    I = ??
</p>

<p>
<b>B</b> V = 2V    R = 10Ω   I = ??
</p>

<p>
<b>C</b> V = 10V   R = 3Ω    I = ??
</p>

<p>
<b>D</b> V = 120V  R = 100Ω  I = ??
</p>

<p>
<b>A</b> 0.5A
</p>

<p>
<b>B</b> 0.2A
</p>

<p>
<b>C</b> 3.3A
</p>

<p>
<b>D</b> 1.2A 
</p></li>
<li><p>
<b></b> 使用欧姆定律求解电阻值
</p>

<p>
<b>A</b> V = 1V    I = 1A    R = ??
</p>

<p>
<b>B</b> V = 2V    I = 0.5A  R = ??
</p>

<p>
<b>C</b> V = 10V   I = 3A    R = ??
</p>

<p>
<b>D</b> V = 50V   I = 20A   R = ??
</p>

<p>
<b>A</b> 1Ω
</p>

<p>
<b>B</b> 4Ω
</p>

<p>
<b>C</b> 3.3Ω
</p>

<p>
<b>D</b> 2.5Ω 
</p></li>
<li><p>
<b></b> 使用欧姆定律求解
</p>

<p>
<b>A</b> 已知 12V 和 10Ω ，求电流。
</p>

<p>
<b>B</b> 已知 24V 和 8A ，求电阻。
</p>

<p>
<b>C</b> 已知 5A 和 75Ω ，求电压。
</p>

<p>
<b>A</b> 1.2A
</p>

<p>
<b>B</b> 3Ω
</p>

<p>
<b>C</b> 375V
</p></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgb8148ef" class="outline-3">
<h3 id="orgb8148ef"><span class="section-number-3">1.3</span> 电阻的串联</h3>
<div class="outline-text-3" id="text-1-3">
<p>
如下图，就是电阻的串联：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0003_2017-02-21_17-11-24.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
<ul class="org-ul">
<li><p>
<b></b> 它们的总电阻是多少？
</p>

<p>
<b></b> R<sub>T</sub> = R<sub>1</sub> + R<sub>2</sub> = 10Ω + 5Ω = 15Ω
</p></li>
</ul>
</div>
</div>

<div id="outline-container-orgb93699c" class="outline-3">
<h3 id="orgb93699c"><span class="section-number-3">1.4</span> 电阻的并联</h3>
<div class="outline-text-3" id="text-1-4">
<p>
如下图，电阻可以并联：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0004_2017-02-21_17-12-05.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>

<ul class="org-ul">
<li><p>
<b></b> 上图的总电阻是多少？
</p>

<p>
<b></b> 
</p>
<p alt="(点击图片可放大)" width="300px">
<object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0005_2017-02-21_17-23-46.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
因此，R<sub>T</sub> = 1Ω
</p>

<p>
R<sub>T</sub> 通常被称为等效并联电阻。
</p></li>

<li><p>
<b></b> 下面问题中的两个电阻都是并联的，求等效电阻是多少
</p>

<p>
<b>A</b> R<sub>1</sub> = 1Ω    R<sub>2</sub> = 1Ω    R<sub>T</sub> = ??
</p>

<p>
<b>B</b> R<sub>1</sub> = 1000Ω R<sub>2</sub> = 500Ω  R<sub>T</sub> = ??
</p>

<p>
<b>C</b> R<sub>1</sub> = 3600Ω R<sub>2</sub> = 1800Ω R<sub>T</sub> = ??
</p>

<p>
<b>A</b> 1Ω
</p>

<p>
<b>B</b> 333Ω
</p>

<p>
<b>C</b> 1200Ω 
</p></li>
</ul>
</div>
</div>
<div id="outline-container-orgf2b13c9" class="outline-3">
<h3 id="orgf2b13c9"><span class="section-number-3">1.5</span> 功率</h3>
<div class="outline-text-3" id="text-1-5">
<p>
当有电流流过电阻时，就会消耗电能(通常是以热量的形式)。功率使用 P 表示，单位是
瓦特(W)。
</p>

<ul class="org-ul">
<li><p>
<b></b> 功率的计算公式：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0006_2017-02-21_17-46-23.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
<li><p>
<b></b> 已知电流和电压，求电阻上的功率
</p>

<p>
<b>A</b> V = 10V    I = 3A    P = ??
</p>

<p>
<b>B</b> V = 100V   I = 5A    P = ??
</p>

<p>
<b>C</b> V = 120V   I = 10A   P = ??
</p>

<p>
<b>A</b> 30W
</p>

<p>
<b>B</b> 500W 即 0.5kW
</p>

<p>
<b>C</b> 1200W 即 1.2kW
</p></li>
<li><p>
<b></b> 已知电流和电阻时，求功率
</p>

<p>
<b>A</b> R = 20Ω    I = 0.5A    P = ??
</p>

<p>
<b>B</b> R = 560Ω   I = 0.02A   P = ??
</p>

<p>
<b>C</b> V = 1V     R = 2Ω      P = ??
</p>

<p>
<b>D</b> V = 2V     R = 10Ω     P = ??
</p>

<p>
<b>A</b> 5W
</p>

<p>
<b>B</b> 0.224W
</p>

<p>
<b>C</b> 0.5W
</p>

<p>
<b>D</b> 0.4W
</p></li>
<li><p>
<b></b> 如果碳膜电阻的标准额定功率为 1/4W、1/2W、1W 和 2W ，那么下面给出的电阻
应选择多大的额定功率？不能让电路中的电阻实际功率超出额定功率值。
</p>

<p>
<b>A</b> 5W    ??
</p>

<p>
<b>B</b> 0.224W    ??
</p>

<p>
<b>C</b> 0.5W      ??
</p>

<p>
<b>D</b> 0.4W      ??
</p>

<p>
<b>A</b> 5W 或更大
</p>

<p>
<b>B</b> 1/4W 或更大
</p>

<p>
<b>C</b> 1/2W 或更大
</p>

<p>
<b>D</b> 1/2W 或更大
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org193712e" class="outline-3">
<h3 id="org193712e"><span class="section-number-3">1.6</span> 微电流</h3>
<div class="outline-text-3" id="text-1-6">
<p>
在重型工业设备中使用的电流远大于 1A ，但是大多数电路需要的电流都不足 1A 。
</p>

<ul class="org-ul">
<li><p>
<b></b> A(安)、mA(毫安)、μA(微安) 之间的换算
</p>

<p>
<b></b> 1A = 1000mA 1mA = 1000μA
</p></li>

<li><p>
<b></b> kΩ(千欧)、MΩ(兆欧)
</p>

<p>
<b></b>  1MΩ = 1000kΩ 1kΩ =1000Ω
</p></li>

<li><p>
<b></b> 电阻两端的电压为 6V，要求流过电阻的电流为 5mA，求应该使用多大的电阻，对
应的功耗是多少？
</p>

<p>
<b></b> R = 1.2kΩ  P = 30mV
</p></li>

<li><p>
<b></b> 求出缺少量
</p>

<p>
<b>A</b> 已知电压为 50V、电流为 10mA，求电阻
</p>

<p>
<b>B</b> 已知电压为 1V、电阻为 1MΩ，求电流
</p>

<p>
<b>A</b> 5kΩ
</p>

<p>
<b>B</b> 1μA
</p></li>
</ul>
</div>
</div>
<div id="outline-container-org7c0a7b0" class="outline-3">
<h3 id="org7c0a7b0"><span class="section-number-3">1.7</span> 伏 - 安特性曲线</h3>
<div class="outline-text-3" id="text-1-7">
<p>
将电阻上的压降和流过电阻的电流绘成图，就得到了伏 - 安特性曲线(V-I 曲线)。
</p>

<ul class="org-ul">
<li><p>
<b></b> 在一个简单的电路中，电池两端接 1kΩ的电阻
</p>

<p>
<b>A</b> 如果使用 10V 电池，求出对应的电流值
</p>

<p>
<b>B</b> 如果使用 1V 电池，求出对应的电流值
</p>

<p>
<b>C</b> 如果使用 20V 电池，求出对应的电流值
</p>

<p>
<b>A</b> 10mA
</p>

<p>
<b>B</b> 1mA 
</p>

<p>
<b>C</b> 20mA
</p></li>

<li><p>
<b></b> 画出上一题的 V-I 曲线，并计算图中直线的斜率。
</p>

<p>
<b></b> 
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0007_2017-02-21_20-07-31.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>

<p>
计算上图中直线的斜率，可以选择两个电，分别记作 A 和 B。
</p>

<p>
A 点：V = 5V，I = 5mA
</p>

<p>
B 点：V = 20V，I = 20mA
</p>

<p>
斜率如下计算：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-21.电子技术自学指南第三版笔记/0008_2017-02-21_20-18-21.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>

<p>
其实这条直线的斜率就等于电阻。
</p></li>
</ul>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:33.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> 电子技术 </category>
            
            <category> 单片机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单片机 </tag>
            
            <tag> 电子技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单片机基础知识]]></title>
      <url>http://yyangdid.github.io/2017/02/15/%E5%AD%A6%E4%B9%A0%E5%8D%95%E7%89%87%E6%9C%BA/2017-02-15.%E5%8D%95%E7%89%87%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org632a6b4">1. 电平特性</a>
<ul>
<li><a href="#org43e9bfc">1.1. 单片机的电平</a></li>
<li><a href="#org9a0bc4c">1.2. RS232 电平：即计算机串口的电平</a></li>
</ul>
</li>
<li><a href="#org065c881">2. 2 进制与 16 进制的表示和转换</a>
<ul>
<li><a href="#org63bc459">2.1. 二进制</a></li>
<li><a href="#orgc048c0d">2.2. 十六进制</a></li>
<li><a href="#orgfd10c1d">2.3. 进制转换</a>
<ul>
<li><a href="#org4ab1290">2.3.1. 十进制转换为二进制</a></li>
<li><a href="#orgd6c3023">2.3.2. 二进制转换为十进制</a></li>
<li><a href="#orgdda32fc">2.3.3. 十进制转换为十六进制</a></li>
<li><a href="#orgc763c31">2.3.4. 十六进制转换为十进制</a></li>
<li><a href="#orgcd83379">2.3.5. 二进制转换为十六进制</a></li>
<li><a href="#org844991b">2.3.6. 十六进制转换为二进制</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org4cd5c36">3. 2 进制数的逻辑运算</a>
<ul>
<li><a href="#orgaf99625">3.1. <code>与</code> 运算</a></li>
<li><a href="#org533a74b">3.2. <code>或</code> 运算</a></li>
<li><a href="#org424097d">3.3. <code>非</code> 运算</a></li>
<li><a href="#org6eacad1">3.4. <code>异或</code> 运算</a></li>
</ul>
</li>
<li><a href="#orgc5acc79">4. 8051 单片机介绍</a>
<ul>
<li><a href="#orgf8c87d0">4.1. 80C51 的引脚封装</a>
<ul>
<li><a href="#org6011050">4.1.1. P3 口第二功能各引脚功能定义</a></li>
</ul>
</li>
<li><a href="#org5390d6d">4.2. 8051 内部结构</a></li>
<li><a href="#orgc338b69">4.3. 总线(BUS)</a></li>
<li><a href="#org3dfb073">4.4. 单片机的构成</a></li>
<li><a href="#orge88ea51">4.5. 单片机工作的基本时序</a>
<ul>
<li><a href="#orgd97cc00">4.5.1. 震荡周期</a></li>
<li><a href="#org4d07001">4.5.2. 状态周期</a></li>
<li><a href="#org7808741">4.5.3. 机器周期</a></li>
<li><a href="#org04331ae">4.5.4. 指令周期</a></li>
</ul>
</li>
<li><a href="#org63292aa">4.6. 单片机主要学习什么</a>
<ul>
<li><a href="#orgf103460">4.6.1. 单片机 I/O 口的结构</a></li>
<li><a href="#org38bedc1">4.6.2. 上下拉电阻</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org326062d">5. C51 基础知识</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
51 单片机需要的基础知识。
</p>
</blockquote>
<a id="more"></a>

<div id="outline-container-org632a6b4" class="outline-2">
<h2 id="org632a6b4"><span class="section-number-2">1</span> 电平特性</h2>
<div class="outline-text-2" id="text-1">
<p>
在数字电路中只有两种电平：高电平和低电平。
</p>
</div>

<div id="outline-container-org43e9bfc" class="outline-3">
<h3 id="org43e9bfc"><span class="section-number-3">1.1</span> 单片机的电平</h3>
<div class="outline-text-3" id="text-1-1">
<p>
数字电路中只有两种电平：高电平和低电平。
</p>

<ul class="org-ul">
<li>高电平：5V 或者 3.3V，电压取决于单片机的电源。</li>
<li>低电平：0V</li>
</ul>
</div>
</div>

<div id="outline-container-org9a0bc4c" class="outline-3">
<h3 id="org9a0bc4c"><span class="section-number-3">1.2</span> RS232 电平：即计算机串口的电平</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>高电平：-12V</li>
<li>低电平：+12V</li>
</ul>

<blockquote>
<p>
当需要单片机与电脑进行通信的时候，需要通过各种元器件把单片机的电平转换为计算
机可识别的电平才能与电脑进行通信。
</p>
</blockquote>
</div>
</div>
</div>

<div id="outline-container-org065c881" class="outline-2">
<h2 id="org065c881"><span class="section-number-2">2</span> 2 进制与 16 进制的表示和转换</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><p>
二进制、十进制、十六进制简易转换表
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-right">

<col class="org-right">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">二进制</th>
<th scope="col" class="org-right">十进制</th>
<th scope="col" class="org-right">十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">0</td>
</tr>

<tr>
<td class="org-right">1</td>
<td class="org-right">1</td>
<td class="org-right">1</td>
</tr>

<tr>
<td class="org-right">10</td>
<td class="org-right">2</td>
<td class="org-right">2</td>
</tr>

<tr>
<td class="org-right">11</td>
<td class="org-right">3</td>
<td class="org-right">3</td>
</tr>

<tr>
<td class="org-right">100</td>
<td class="org-right">4</td>
<td class="org-right">4</td>
</tr>

<tr>
<td class="org-right">101</td>
<td class="org-right">5</td>
<td class="org-right">5</td>
</tr>

<tr>
<td class="org-right">110</td>
<td class="org-right">6</td>
<td class="org-right">6</td>
</tr>

<tr>
<td class="org-right">111</td>
<td class="org-right">7</td>
<td class="org-right">7</td>
</tr>

<tr>
<td class="org-right">1000</td>
<td class="org-right">8</td>
<td class="org-right">8</td>
</tr>

<tr>
<td class="org-right">1001</td>
<td class="org-right">9</td>
<td class="org-right">9</td>
</tr>

<tr>
<td class="org-right">1010</td>
<td class="org-right">10</td>
<td class="org-right">A</td>
</tr>

<tr>
<td class="org-right">1011</td>
<td class="org-right">11</td>
<td class="org-right">B</td>
</tr>

<tr>
<td class="org-right">1100</td>
<td class="org-right">12</td>
<td class="org-right">C</td>
</tr>

<tr>
<td class="org-right">1101</td>
<td class="org-right">13</td>
<td class="org-right">D</td>
</tr>

<tr>
<td class="org-right">1110</td>
<td class="org-right">14</td>
<td class="org-right">E</td>
</tr>

<tr>
<td class="org-right">1111</td>
<td class="org-right">15</td>
<td class="org-right">F</td>
</tr>

<tr>
<td class="org-right">10000</td>
<td class="org-right">16</td>
<td class="org-right">10</td>
</tr>
</tbody>
</table></li>
</ul>
</div>

<div id="outline-container-org63bc459" class="outline-3">
<h3 id="org63bc459"><span class="section-number-3">2.1</span> 二进制</h3>
<div class="outline-text-3" id="text-2-1">
<p>
由于数字电路中只有两种电平特性，所以计算机中使用的数字都采用的二进制形式的。
</p>

<p>
二进制是使用 <code>0</code> 和 <code>1</code> 两个数码来表示的数，它的基数为 <code>2</code> ，进位规则是“逢二进一”。
</p>
</div>
</div>
<div id="outline-container-orgc048c0d" class="outline-3">
<h3 id="orgc048c0d"><span class="section-number-3">2.2</span> 十六进制</h3>
<div class="outline-text-3" id="text-2-2">
<p>
十六进制的基数为 <code>F</code> ，进位规则是“逢十六进一”。
</p>
</div>
</div>
<div id="outline-container-orgfd10c1d" class="outline-3">
<h3 id="orgfd10c1d"><span class="section-number-3">2.3</span> 进制转换</h3>
<div class="outline-text-3" id="text-2-3">
</div><div id="outline-container-org4ab1290" class="outline-4">
<h4 id="org4ab1290"><span class="section-number-4">2.3.1</span> 十进制转换为二进制</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
十进制转换为二进制主要分为这几种情况：正整数转二进制，负整数转二进制，小数转
二进制。
</p>
</div>
<ol class="org-ol"><li><a id="org52d2bc5"></a>正整数转二进制<br><div class="outline-text-5" id="text-2-3-1-1">
<ul class="org-ul">
<li><p>
<code>运算方法：</code>
</p>

<p>
除二取余，倒序排列，高位补零。
</p>

<p>
意思是，将十进制的正整数除以二，得到的商再除以二，依次类推直到商为零或一
为止，再旁边标出每一步的余数，然后倒着写出来，高位补为零就可以了。
</p>

<p>
例如：
</p>


<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/decimal-positive-integer-converted-to-binary_2017-02-15_21-21-55.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul>
</div></li>

<li><a id="orga38ac10"></a>负整数转二进制<br><div class="outline-text-5" id="text-2-3-1-2">
<ul class="org-ul">
<li><p>
<code>运算方法：</code>
</p>

<p>
将对应的正整数转换为二进制，对二进制取反然后加一。
</p>

<p>
例如：
</p>


<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/decimal-negative-integer-converted-to-binary_2017-02-15_21-34-27.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul>
</div></li>

<li><a id="org9eacf84"></a>小数转二进制<br><div class="outline-text-5" id="text-2-3-1-3">
<ul class="org-ul">
<li><p>
运算方法：乘二取整，正序排列。
</p>

<p>
解释：对被转换的小数乘以 2，取其整数部分（0 或 1）作为二进制小数部分，取其
小数部分，再乘以 2，再取其整数部分作为二进制小数部分，然后取小数部分，再
乘以 2，直到小数部分为 0 或者已经去到了足够的位数。每次取的整数部分，按照
先后次序排列，就是二进制小数。
</p>

<p>
例如：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/decimals-converted-to-binary_2017-02-16_12-01-58.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul>
</div></li></ol>
</div>
<div id="outline-container-orgd6c3023" class="outline-4">
<h4 id="orgd6c3023"><span class="section-number-4">2.3.2</span> 二进制转换为十进制</h4>
<div class="outline-text-4" id="text-2-3-2">
</div><ol class="org-ol"><li><a id="org0544ee1"></a>整数二进制转换为十进制<br><div class="outline-text-5" id="text-2-3-2-1">
<p>
首先将二进制的位数补齐，首位为 0 则是整数，为 1 则为负数。
</p>

<p>
用二进制的每一位数值乘以对应的 2 的幂次，然后依次相加，即为其对应的十进制数
值。
</p>

<p>
例如：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/binary-converted-to-integer_2017-02-16_12-24-13.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
</div></li>
<li><a id="org9b6f4db"></a>小数二进制转换为十进制<br><div class="outline-text-5" id="text-2-3-2-2">
<p>
将二进制的每位数字乘以对应位数的 2 的负幂次数，然后相加。
</p>

<p>
例如：
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/binary-converted-to-decimals_2017-02-16_12-56-15.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
</div></li></ol>
</div>
<div id="outline-container-orgdda32fc" class="outline-4">
<h4 id="orgdda32fc"><span class="section-number-4">2.3.3</span> 十进制转换为十六进制</h4>
</div>
<div id="outline-container-orgc763c31" class="outline-4">
<h4 id="orgc763c31"><span class="section-number-4">2.3.4</span> 十六进制转换为十进制</h4>
</div>
<div id="outline-container-orgcd83379" class="outline-4">
<h4 id="orgcd83379"><span class="section-number-4">2.3.5</span> 二进制转换为十六进制</h4>
</div>
<div id="outline-container-org844991b" class="outline-4">
<h4 id="org844991b"><span class="section-number-4">2.3.6</span> 十六进制转换为二进制</h4>
</div>
</div>
</div>
<div id="outline-container-org4cd5c36" class="outline-2">
<h2 id="org4cd5c36"><span class="section-number-2">3</span> 2 进制数的逻辑运算</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-orgaf99625" class="outline-3">
<h3 id="orgaf99625"><span class="section-number-3">3.1</span> <code>与</code> 运算</h3>
<div class="outline-text-3" id="text-3-1">
<p>
运算法则：有 0 得 0
</p>

<p>
例如：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">运算式</th>
<th scope="col" class="org-right">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">1&1</td>
<td class="org-right">1</td>
</tr>

<tr>
<td class="org-left">1&0</td>
<td class="org-right">0</td>
</tr>

<tr>
<td class="org-left">0&0</td>
<td class="org-right">0</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org533a74b" class="outline-3">
<h3 id="org533a74b"><span class="section-number-3">3.2</span> <code>或</code> 运算</h3>
<div class="outline-text-3" id="text-3-2">
<p>
运算法则：有 1 得 1
</p>

<p>
例如：
</p>

<p>
注：由于 org-mode 表格中不能使用 <code>|</code> ，所以用 <code>∣</code> 来代替。
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">运算式</th>
<th scope="col" class="org-right">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">1∣1</td>
<td class="org-right">1</td>
</tr>

<tr>
<td class="org-left">1∣0</td>
<td class="org-right">1</td>
</tr>

<tr>
<td class="org-left">0∣0</td>
<td class="org-right">0</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org424097d" class="outline-3">
<h3 id="org424097d"><span class="section-number-3">3.3</span> <code>非</code> 运算</h3>
<div class="outline-text-3" id="text-3-3">
<p>
运算法则：取反
</p>

<p>
例如：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">运算式</th>
<th scope="col" class="org-right">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">~1</td>
<td class="org-right">0</td>
</tr>

<tr>
<td class="org-left">~0</td>
<td class="org-right">1</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org6eacad1" class="outline-3">
<h3 id="org6eacad1"><span class="section-number-3">3.4</span> <code>异或</code> 运算</h3>
<div class="outline-text-3" id="text-3-4">
<p>
运算法则：不同为 1，相同为 0
</p>

<p>
例如：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">运算式</th>
<th scope="col" class="org-right">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">1<sup>1</sup></td>
<td class="org-right">0</td>
</tr>

<tr>
<td class="org-left">0<sup>0</sup></td>
<td class="org-right">0</td>
</tr>

<tr>
<td class="org-left">1<sup>0</sup></td>
<td class="org-right">1</td>
</tr>

<tr>
<td class="org-left">0<sup>1</sup></td>
<td class="org-right">1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-orgc5acc79" class="outline-2">
<h2 id="orgc5acc79"><span class="section-number-2">4</span> 8051 单片机介绍</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orgf8c87d0" class="outline-3">
<h3 id="orgf8c87d0"><span class="section-number-3">4.1</span> 80C51 的引脚封装</h3>
<div class="outline-text-3" id="text-4-1">

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/80C51-pin-decal_2017-02-16_16-28-39.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
</div>
<div id="outline-container-org6011050" class="outline-4">
<h4 id="org6011050"><span class="section-number-4">4.1.1</span> P3 口第二功能各引脚功能定义</h4>
<div class="outline-text-4" id="text-4-1-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">引脚</th>
<th scope="col" class="org-left">第二功能标注</th>
<th scope="col" class="org-left">第二功能解释</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">P3.0</td>
<td class="org-left">RXD</td>
<td class="org-left">串行口输入</td>
</tr>

<tr>
<td class="org-left">P3.1</td>
<td class="org-left">TXD</td>
<td class="org-left">串行口输出</td>
</tr>

<tr>
<td class="org-left">P3.2</td>
<td class="org-left">INT0</td>
<td class="org-left">外部中断 0 输入</td>
</tr>

<tr>
<td class="org-left">P3.3</td>
<td class="org-left">INT1</td>
<td class="org-left">外部中断 1 输入</td>
</tr>

<tr>
<td class="org-left">P3.4</td>
<td class="org-left">T0</td>
<td class="org-left">定时器 0 外部输入</td>
</tr>

<tr>
<td class="org-left">P3.5</td>
<td class="org-left">T1</td>
<td class="org-left">定时器 1 外部输入</td>
</tr>

<tr>
<td class="org-left">P3.6</td>
<td class="org-left">WR</td>
<td class="org-left">外部写控制</td>
</tr>

<tr>
<td class="org-left">P3.7</td>
<td class="org-left">RD</td>
<td class="org-left">外部读控制</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="outline-container-org5390d6d" class="outline-3">
<h3 id="org5390d6d"><span class="section-number-3">4.2</span> 8051 内部结构</h3>
<div class="outline-text-3" id="text-4-2">

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/8051-internal-structure_2017-02-16_17-53-05.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
</div>
</div>

<div id="outline-container-orgc338b69" class="outline-3">
<h3 id="orgc338b69"><span class="section-number-3">4.3</span> 总线(BUS)</h3>
<div class="outline-text-3" id="text-4-3">
<p>
总线(BUS)是计算机各不见之间传送信息的公共通道。
</p>

<p>
总线分为两类：
</p>

<ul class="org-ul">
<li><p>
内部总线
</p>

<p>
内部总线是 CPU 内部之间的连线。
</p></li>

<li><p>
外部总线
</p>

<p>
外部总线是 CPU 与其他部件之间的连线。
</p>

<p>
外部总线分为三种：
</p>

<ul class="org-ul">
<li>数据总线 DB (Date Bus)</li>

<li>地址总线 AB (Address Bus)</li>

<li>控制总线 CB (Control Bus)</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org3dfb073" class="outline-3">
<h3 id="org3dfb073"><span class="section-number-3">4.4</span> 单片机的构成</h3>
<div class="outline-text-3" id="text-4-4">
<ul class="org-ul">
<li><p>
CPU
</p>

<p>
由运算和控制逻辑组成，同时还包括中断系统和部分外部特殊功能寄存器。
</p></li>

<li><p>
RAM
</p>

<p>
用来存放可以读写的数据，如运算的中间结果、最终结果以及欲显示的数据。
</p></li>

<li><p>
ROM
</p>

<p>
用来存放程序、原始数据和表格。
</p></li>

<li><p>
I/O
</p>

<p>
四个 8 位并行 I/O 口，即可用作输入，也可用作输出。
</p></li>

<li><p>
T/C
</p>

<p>
两个定时/计数器，即可工作在定时模式，也可工作在记数模式。
</p></li>

<li>五个中断源的中断控制系统。</li>

<li>一个全双工 UART (同样异步接收发送器) 的串行 I/O 口，用于实现单片机之间或单
片机与计算机之间的串行通信。</li>

<li>片内振荡器和时钟产生电路，石英晶体和微调电容需要外接。最高震荡频率取决于单
片机型号和性能。</li>
</ul>
</div>
</div>
<div id="outline-container-orge88ea51" class="outline-3">
<h3 id="orge88ea51"><span class="section-number-3">4.5</span> 单片机工作的基本时序</h3>
<div class="outline-text-3" id="text-4-5">

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/8051-basic-timing_2017-02-20_20-12-26.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div>
</div>
<div id="outline-container-orgd97cc00" class="outline-4">
<h4 id="orgd97cc00"><span class="section-number-4">4.5.1</span> 震荡周期</h4>
<div class="outline-text-4" id="text-4-5-1">
<p>
震荡周期也称为时钟周期，是指为单片机提供时钟脉冲信号的震荡源的周期，开发板上
为 12MHZ。
</p>
</div>
</div>
<div id="outline-container-org4d07001" class="outline-4">
<h4 id="org4d07001"><span class="section-number-4">4.5.2</span> 状态周期</h4>
<div class="outline-text-4" id="text-4-5-2">
<p>
每个状态周期为时钟周期的 2 倍，是震荡周期经二分频后得到的。
</p>
</div>
</div>
<div id="outline-container-org7808741" class="outline-4">
<h4 id="org7808741"><span class="section-number-4">4.5.3</span> 机器周期</h4>
<div class="outline-text-4" id="text-4-5-3">
<p>
一个机器周期包含 6 个状态周期 S1~S6 ，也就是 12 个时钟周期。在一个机器周期内，
CPU 可以完成一个独立的操作。
</p>
</div>
</div>
<div id="outline-container-org04331ae" class="outline-4">
<h4 id="org04331ae"><span class="section-number-4">4.5.4</span> 指令周期</h4>
<div class="outline-text-4" id="text-4-5-4">
<p>
是指 CPU 完成一条操作所需要的全部时间。每条指令执行时间都是有一个或几个机器
周期组成。MCS-51 系统中，有单周期指令、双周期指令和四周期指令。
</p>
</div>
</div>
</div>
<div id="outline-container-org63292aa" class="outline-3">
<h3 id="org63292aa"><span class="section-number-3">4.6</span> 单片机主要学习什么</h3>
<div class="outline-text-3" id="text-4-6">
<ul class="org-ul">
<li>对 I/O 口的控制，无论单片机对外接进行何种控制，都是通过 I/O 口进行的。</li>
<li>接收外部的控制，通过 I/O 来感受外部的电压。</li>
<li>51 单片机总共有 P0 、P1、P2、P3 四个 8 位双向输入输出端口(I/O)，每个端口都
有锁存器、输出驱动器和输入缓冲器。4 个 I/O 端口都能作输入输出口用。</li>
</ul>
</div>
<div id="outline-container-orgf103460" class="outline-4">
<h4 id="orgf103460"><span class="section-number-4">4.6.1</span> 单片机 I/O 口的结构</h4>
<div class="outline-text-4" id="text-4-6-1">
<p>
单片机 I/O 口分为三种：开漏输出、准双向 IO 、强推挽输出。
</p>

<p>
51 单片机使用 <code>开漏输出</code> 和 <code>准双向 IO</code> 。
</p>

<p>
P0 口没有内部的上拉电阻，只能借助外部上拉电阻，使用 <code>开漏输出</code> 。其他口使用 <code>准双向 IO</code> 。
</p>

<ul class="org-ul">
<li><p>
开漏输出
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/scm-0002_2017-02-20_21-02-47.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
<li><p>
准双向 IO
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/scm-0001_2017-02-20_20-31-27.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
<li><p>
强推挽输出
</p>

<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/scm-0003_2017-02-20_21-24-35.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org38bedc1" class="outline-4">
<h4 id="org38bedc1"><span class="section-number-4">4.6.2</span> 上下拉电阻</h4>
<div class="outline-text-4" id="text-4-6-2">
<ul class="org-ul">
<li>概念</li>
</ul>

<p>
上拉电阻就是将不确定的信号通过一个电阻拉到高电平，同时此电阻起到一
个限流的作用。下拉电阻就是下拉倒低电平。
</p>

<ul class="org-ul">
<li>上拉电阻的作用

<ul class="org-ul">
<li>OC 门(在开漏输出电路中)要输出高电平，外部必须加上拉电阻。</li>

<li>加大普通 IO 口的驱动能力。</li>

<li>起到限流的作用。</li>

<li>抵抗电磁干扰。</li>
</ul></li>
<li>上拉电阻的选取原则

<ul class="org-ul">
<li>从降低功耗方面考虑应该足够大，因为电阻越大，电流越小。</li>

<li>从确保足够的引脚驱动能力考虑应该足够小，电阻越小，电流越大。</li>

<li><p>
开漏输出时，过大的上拉电阻会导致信号的上升沿变缓。
</p>


<div class="figure">
<p><object type="image/svg+xml" data="2017-02-15.单片机基础知识/scm-0004_2017-02-20_21-58-33.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul></li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-org326062d" class="outline-2">
<h2 id="org326062d"><span class="section-number-2">5</span> C51 基础知识</h2>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> 单片机 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(006):基本数据类型--cons_cell和列表]]></title>
      <url>http://yyangdid.github.io/2017/01/31/%E5%AD%A6%E4%B9%A0ELisp/2017-01-31.%E5%AD%A6%E4%B9%A0ELisp(006):%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B--cons_cell%E5%92%8C%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org6512d7f">1. cons cell</a></li>
<li><a href="#org169e81a">2. 列表</a></li>
<li><a href="#orgf724abc">3. 测试函数</a></li>
<li><a href="#orga6845cd">4. 构造函数</a></li>
<li><a href="#orgcefa1b8">5. 把列表当成数组用</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录对 cons cell 和列表的操作，标题中不能使用空格所以把 <code>cons cell</code> 写
为了 <code>cons_cell</code> 。
</p>
</blockquote>
<a id="more"></a>

<div id="outline-container-org6512d7f" class="outline-2">
<h2 id="org6512d7f"><span class="section-number-2">1</span> cons cell</h2>
<div class="outline-text-2" id="text-1">
<p>
个人把 <code>cons cell</code> 理解为只有两个元素的列表，第一个是 <i>CAR</i> ，第一个是 <i>CDR</i> 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="quoted">'(<span class="number">1</span> . <span class="number">2</span>)</span> <span class="comment">;; &#8658; (1 . 2)</span></span><br><span class="line"><span class="quoted">'(<span class="number">1</span> . <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; (1 . "a")</span></span><br><span class="line"><span class="quoted">'(nil . <span class="number">1</span>)</span> <span class="comment">;; &#8658; (nil . 1)</span></span><br><span class="line"><span class="quoted">'(nil . nil)</span> <span class="comment">;; &#8658; (nil)</span></span><br><span class="line"><span class="comment">;; &#31526;&#21495; ' &#31561;&#20215;&#20110; (quote )</span></span><br><span class="line"><span class="quoted">(<span class="keyword">quote</span> (<span class="number">1</span> . <span class="number">2</span>))</span> <span class="comment">;; &#8658; (1 . 2)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">read</span> <span class="string">"(1 . 2)"</span>)</span> <span class="comment">;; &#8658; (1 . 2)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-org169e81a" class="outline-2">
<h2 id="org169e81a"><span class="section-number-2">2</span> 列表</h2>
<div class="outline-text-2" id="text-2">
<p>
列表包含了 <code>cons cell</code> ，列表可以包含多个元素，列表有一个特殊的元素 &#x2013; 空表 <code>nil</code> 。
</p>

<p>
空表 <code>nil</code> 不是 <code>cons cell</code> ，因为没有 <i>CAR</i> 和 <i>CDR</i> 。为了编程方便可以认为空
表的 <i>CAR</i> 和 <i>CDR</i> 都为 <code>nil</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="quoted">'()</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">cdr</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
按照列表最后一个 cons cell 的 <i>CDR</i> 部分的类型不同，可以把列表分为三类：
</p>

<ul class="org-ul">
<li>如果是 nil ，称为 <code>真列表(true list)</code> 。</li>
<li>如果既不是 nil ，也不是一个完整的 cons cell ，称为 <code>点列表(dotted list)</code> 。</li>
<li><p>
如果它指向列表中之前的一个 cons cell，则称为 <code>环形列表(circular list)</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; (1 2 3) ;; &#30495;&#21015;&#34920;</span></span><br><span class="line"><span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> . <span class="number">4</span>)</span> <span class="comment">;; &#8658; (1 2 3 .4) ;; &#28857;&#21015;&#34920;</span></span><br><span class="line"><span class="quoted">'(<span class="number">1</span> . #1=(<span class="number">2</span> <span class="number">3</span> . #1#))</span> <span class="comment">;; &#8658; (1 2 3 . #1) ;; &#29615;&#24418;&#21015;&#34920;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orgf724abc" class="outline-2">
<h2 id="orgf724abc"><span class="section-number-2">3</span> 测试函数</h2>
<div class="outline-text-2" id="text-3">
<p>
测试一个对象是否是 cons cell 用 <code>consp</code> 函数，是否是列表用 <code>listp</code> 函数，是否
为 nil使用 <code>null</code> 函数。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">consp</span> <span class="quoted">'(<span class="number">1</span> . <span class="number">2</span>)</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">consp</span> <span class="quoted">'(<span class="number">1</span> . (<span class="number">2</span> . <span class="literal">nil</span>))</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">consp</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">listp</span> <span class="quoted">'(<span class="number">1</span> . <span class="number">2</span>)</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">listp</span> <span class="quoted">'(<span class="number">1</span> . (<span class="number">2</span> . <span class="literal">nil</span>))</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">listp</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">null</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">null</span> <span class="quoted">'(<span class="number">1</span> <span class="number">2</span>)</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-orga6845cd" class="outline-2">
<h2 id="orga6845cd"><span class="section-number-2">4</span> 构造函数</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><p>
使用 <code>cons</code> 函数生成 cons cell ：
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cons</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; (1 . 2)</span></span><br><span class="line"><span class="list">(<span class="keyword">cons</span> <span class="number">1</span> <span class="quoted">'()</span>)</span> <span class="comment">;; &#8658; (1)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
<code>cons</code> 函数也可在列表前面增加元素：
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> list001 <span class="quoted">'(a b)</span>)</span> <span class="comment">;; &#8658; (a b)</span></span><br><span class="line"><span class="list">(<span class="keyword">cons</span> <span class="quoted">'x</span> list001)</span> <span class="comment">;; &#8658; (x a b)</span></span><br><span class="line">list001 <span class="comment">;; &#8658; (a b)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
使用 <code>cons</code> 函数在列表前面添加元素并不会改变列表本身的值，使用 <code>push</code> 函数可
以在加入元素的同时改变列表的值。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">push</span> <span class="quoted">'x</span> list001)</span> <span class="comment">;; &#8658; (x a b)</span></span><br><span class="line">list001 <span class="comment">;; &#8658; (x a b)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
使用 <code>list</code> 函数生成列表：(注意 <code>list</code> 函数和 <code>quote</code> 函数的区别)
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; (1 2 3)</span></span><br><span class="line"><span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; (1 2 3)</span></span><br><span class="line"><span class="quoted">'((+ <span class="number">1</span> <span class="number">2</span>) <span class="number">3</span>)</span> <span class="comment">;; &#8658; ((+ 1 2) 3)</span></span><br><span class="line"><span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; (3 3)</span></span><br><span class="line">      <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
使用 <code>append</code> 可以在列表的后面添加元素：
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#20351;&#29992; append &#36861;&#21152;&#21015;&#34920;</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> list002 <span class="quoted">'(a b)</span>)</span> <span class="comment">;; &#8658; (a b)</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> list002 <span class="quoted">'(c)</span>)</span> <span class="comment">;; &#8658; (a b c)</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> list002 <span class="quoted">'(c)</span> <span class="quoted">'(d)</span> <span class="quoted">'(e)</span>)</span> <span class="comment">;; &#8658; (a b c d e)</span></span><br><span class="line">list002 <span class="comment">;; &#8658; (a b)</span></span><br><span class="line"><span class="comment">;; &#20351;&#29992; append &#36861;&#21152;&#23545;&#35937;</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> list002 <span class="quoted">'c</span>)</span> <span class="comment">;; &#8658; (a b . c) ;; &#27492;&#26102;&#21015;&#34920;&#23601;&#19981;&#26159;&#30495;&#21015;&#34920;&#20102;&#65292;&#22914;&#20877;&#36827;&#34892; append &#25805;&#20316;&#20250;&#25253;&#38169;</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> [a b] <span class="string">"cd"</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; (a b 99 100)</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> [a b] <span class="string">"cd"</span>)</span> <span class="comment">;; &#8658; (a b . "cd")</span></span><br><span class="line">      <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-orgcefa1b8" class="outline-2">
<h2 id="orgcefa1b8"><span class="section-number-2">5</span> 把列表当成数组用</h2>
<div class="outline-text-2" id="text-5">
<p>
使用 <code>car</code> 和 <code>cdr</code> 获取列表的第一个元素和剩余元素， <code>cdr</code> 获取的返回值是一个列表。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">car</span> <span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span> <span class="comment">;; &#8658; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">cdr</span> <span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span> <span class="comment">;; &#8658; (2 3)</span></span><br><span class="line"><span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">cdr</span> <span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span> <span class="comment">;; &#8658; (3)</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">cdr</span> <span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span>)</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<ul class="org-ul">
<li><p>
<code>nth</code> 函数获取 cdr 的第 <i>N</i> 个元素，返回元素。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">nth</span> <span class="number">3</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<div class="figure">
<p><object type="image/svg+xml" data="2017-01-31.学习ELisp(006):基本数据类型--cons_cell和列表/ELisp-list-nth_2017-02-04_20-09-56.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>

<li><p>
<code>nthcdr</code> 函数获取 cdr 的 <i>N</i> 后面所有的元素，返回列表。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">nthcdr</span> <span class="number">3</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span>)</span> <span class="comment">;; &#8658; (3 4 5)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<div class="figure">
<p><object type="image/svg+xml" data="2017-01-31.学习ELisp(006):基本数据类型--cons_cell和列表/ELisp-list-nthcdr_2017-02-04_20-31-09.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>

<li><p>
<code>last</code> 函数获取 cdr 最后 <i>N</i> 个元素的列表。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">last</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; (4 5)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<div class="figure">
<p><object type="image/svg+xml" data="2017-01-31.学习ELisp(006):基本数据类型--cons_cell和列表/ELisp-list-last_2017-02-04_20-39-46.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>

<li><p>
<code>butlast</code> 函数获取 cdr 除最后 <i>N</i> 个元素的列表。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">butlast</span> <span class="quoted">'(<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>)</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; (0 1 2 3)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<div class="figure">
<p><object type="image/svg+xml" data="2017-01-31.学习ELisp(006):基本数据类型--cons_cell和列表/ELisp-list-butlast_2017-02-04_20-45-47.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>
</ul>
<blockquote>
<p>
<code>car、cdr、nth、nthcdr、last、butlast</code> 不会改变变量的值。
</p>
</blockquote>

<ul class="org-ul">
<li><p>
<code>setcar、setcdr</code> 修改 cons cell 会改变原有的 car 和 cdr 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> foo1 <span class="quoted">'(a b c)</span>)</span> <span class="comment">;; &#8658; (a b c)</span></span><br><span class="line"><span class="list">(<span class="keyword">setcar</span> foo1 <span class="quoted">'x</span>)</span> <span class="comment">;; &#8658; x</span></span><br><span class="line">foo1 <span class="comment">;; &#8658; (x b c)</span></span><br><span class="line"><span class="list">(<span class="keyword">setcdr</span> foo1 <span class="quoted">'(y z)</span>)</span> <span class="comment">;; &#8658; (y z)</span></span><br><span class="line">foo1 <span class="comment">;; &#8658; (x y z)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<div class="figure">
<p><object type="image/svg+xml" data="2017-01-31.学习ELisp(006):基本数据类型--cons_cell和列表/ELisp-list-setcar&setcdr_2017-02-04_21-11-40.svg" class="org-svg" alt="(点击图片可放大)" width="300px">
Sorry, your browser does not support SVG.</object>
</p>
</div></li>

<li><p>
组合使用
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> foo2 <span class="quoted">'(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span> <span class="comment">;; &#8658; (1 2 3)</span></span><br><span class="line"><span class="list">(<span class="keyword">setcar</span> foo2 <span class="quoted">'a</span>)</span> <span class="comment">;; &#8658; a</span></span><br><span class="line"><span class="list">(<span class="keyword">setcar</span> <span class="list">(<span class="keyword">cdr</span> foo2)</span> <span class="quoted">'b</span>)</span> <span class="comment">;; &#8658; b</span></span><br><span class="line">foo2 <span class="comment">;; &#8658; (a b 3)</span></span><br><span class="line"><span class="list">(<span class="keyword">setcar</span> <span class="list">(<span class="keyword">nthcdr</span> <span class="number">2</span> foo2)</span> <span class="quoted">'c</span>)</span> <span class="comment">;; &#8658; c</span></span><br><span class="line">foo2 <span class="comment">;; &#8658; (a b c)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(005):基本数据类型--字符和字符串]]></title>
      <url>http://yyangdid.github.io/2017/01/28/%E5%AD%A6%E4%B9%A0ELisp/2017-01-28.%E5%AD%A6%E4%B9%A0ELisp(005):%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B--%E5%AD%97%E7%AC%A6%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org80e4e71">1. 简介</a>
<ul>
<li><a href="#orge54661f">1.1. 字符串</a></li>
<li><a href="#org81d3109">1.2. 字符</a>
<ul>
<li><a href="#orgbe1980d">1.2.1. 获取字符相对应的那个整数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org7cfa212">2. 测试函数</a></li>
<li><a href="#orga030b57">3. 构造函数</a></li>
<li><a href="#org16ec508">4. 比较函数</a></li>
<li><a href="#org6f82959">5. 转换函数</a></li>
<li><a href="#orgf00b00e">6. 附录</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录 ELisp 对字符、字符串的处理。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org80e4e71" class="outline-2">
<h2 id="org80e4e71"><span class="section-number-2">1</span> 简介</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orge54661f" class="outline-3">
<h3 id="orge54661f"><span class="section-number-3">1.1</span> 字符串</h3>
<div class="outline-text-3" id="text-1-1">
<p>
在 Emacs 中字符串是有序的字符数组， Emacs 的字符串可以容纳任何字符。 Emacs 字
符串有很多高级属性，例如有表示单字节和多字节的类型，有文本属性等。
</p>
</div>
</div>
<div id="outline-container-org81d3109" class="outline-3">
<h3 id="org81d3109"><span class="section-number-3">1.2</span> 字符</h3>
<div class="outline-text-3" id="text-1-2">
<p>
字符串是由字符组成的，字符其实就是一个整数，例如字符 'A' 就是一个整数 65 。目
前字符串中的字符数目被限制在 0-524287 之间。
</p>
</div>

<div id="outline-container-orgbe1980d" class="outline-4">
<h4 id="orgbe1980d"><span class="section-number-4">1.2.1</span> 获取字符相对应的那个整数</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">message</span> <span class="string">"%i"</span> ?A)</span> <span class="comment">;; &#8658; "65"</span></span><br><span class="line"><span class="list">(<span class="keyword">message</span> <span class="string">"%i"</span> ?a)</span> <span class="comment">;; &#8658; "97"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
对于标点和具有特殊意义的字符最好在 <code>?</code> 后面加上转义字符 <code>\</code> ，因为某些标点会
有歧义。对于没有特殊意义的标点，加上转义字符也没有副作用。
</p>

<p>
特殊字符对照表（不包含标点）：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">读入方式</th>
<th scope="col" class="org-left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">?\a ⇒ 7</td>
<td class="org-left">控制字符，control-g, `C-g'</td>
</tr>

<tr>
<td class="org-left">?\b ⇒ 8</td>
<td class="org-left">退格，backspace， <bs>，`C-h'</bs></td>
</tr>

<tr>
<td class="org-left">?\t ⇒ 9</td>
<td class="org-left">制表符，tab，<tab>，`C-i'</tab></td>
</tr>

<tr>
<td class="org-left">?\n ⇒ 10</td>
<td class="org-left">换行符，newline，`C-j'</td>
</tr>

<tr>
<td class="org-left">?\v ⇒ 11</td>
<td class="org-left">垂直制表符，vertical tab，`C-k'</td>
</tr>

<tr>
<td class="org-left">?\f ⇒ 12</td>
<td class="org-left">换页符，formfeed character，`C-l'</td>
</tr>

<tr>
<td class="org-left">?\r ⇒ 13</td>
<td class="org-left">回车，carriage return，<ret>，`C-m'</ret></td>
</tr>

<tr>
<td class="org-left">?\e ⇒ 27</td>
<td class="org-left">escape character，<esc>，`C-['</esc></td>
</tr>

<tr>
<td class="org-left">?\s ⇒ 32</td>
<td class="org-left">空格，space character，<spc></spc></td>
</tr>

<tr>
<td class="org-left">?\\ ⇒ 92</td>
<td class="org-left">反斜杠，backslash character，`\'</td>
</tr>

<tr>
<td class="org-left">?\d ⇒ 127</td>
<td class="org-left">删除，delete character，<del></del></td>
</tr>
</tbody>
</table>
<p>
控制字符可以有多种表示方式，比如 <code>C-i</code> ，一下几种都是正确的：
</p>
<div class="org-src-container">
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">;; &#20197;&#19979;&#30340;&#34920;&#31034;&#26041;&#27861;&#37117;&#23545;&#24212;&#25972;&#25968; 9</span><br><span class="line">?\^I</span><br><span class="line">?\^i</span><br><span class="line">?\C-I</span><br><span class="line">?\C-i</span><br><span class="line">;;</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-org7cfa212" class="outline-2">
<h2 id="org7cfa212"><span class="section-number-2">2</span> 测试函数</h2>
<div class="outline-text-2" id="text-2">
<p>
<code>stringp</code> 函数，测试是否为字符串
<code>char-or-string-p</code> 函数，测试是否为字符或字符串
<code>string-or-null-p</code> 函数，测试是否为字符串或 nil
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> str01 <span class="string">""</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> str02 <span class="literal">nil</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">stringp</span> <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">stringp</span> <span class="string">"asdf"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">stringp</span> str01)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">stringp</span> str02)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">string-or-null-p</span> <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string-or-null-p</span> <span class="string">"asdf"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string-or-null-p</span> str01)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string-or-null-p</span> str02)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">char-or-string-p</span> <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">char-or-string-p</span> <span class="string">"asdf"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">char-or-string-p</span> str01)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">char-or-string-p</span> str02)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
ELisp 中没有测试字符串是否为空的函数，自定义一个：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> string-is-empty-p <span class="list">(<span class="keyword">str</span>)</span></span><br><span class="line">  <span class="string">"&#27979;&#35797;&#23383;&#31526;&#20018; str &#26159;&#21542;&#20026;&#31354;"</span></span><br><span class="line">  <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">string&lt</span><span class="comment">; "" str)))</span></span><br><span class="line"><span class="comment">;; &#25110;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> string-is-empty-p <span class="list">(<span class="keyword">str</span>)</span></span><br><span class="line">  <span class="string">"&#27979;&#35797;&#23383;&#31526;&#20018; str &#26159;&#21542;&#20026;&#31354;"</span></span><br><span class="line">  <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">length</span> str)</span> <span class="number">0</span>)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-orga030b57" class="outline-2">
<h2 id="orga030b57"><span class="section-number-2">3</span> 构造函数</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><p>
创建字符串
</p>

<p>
ELisp 中使用 <code>make-string</code> 函数创建一个字符串，但是字符串里面包含的字符都是
一样的。使用 <code>string</code> 函数可以创建包含不同字符的字符串。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">make-string</span> <span class="number">5</span> ?x)</span> <span class="comment">;; &#8658; "xxxxx"</span></span><br><span class="line"><span class="list">(<span class="keyword">string</span> ?a ?b ?c)</span> <span class="comment">;; &#8658; "abc"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
使用已有的字符串生成新的字符串
</p>

<p>
ELisp 中使用 <code>substring</code> 函数可以截取已有字符串的一部分生成一个新的字符串。
使用 <code>concat</code> 可以把已有的多个字符串链接起来生成一个新的字符串。
</p>
<blockquote>
<p>
<b>注：</b> 
</p>

<p>
<code>substring</code> 函数里可选的包含两个参数，用来指定截取的开始和结束位置。若设置的
结束位置大于已有字符串的长度或小于设置的开始位置，运行报错。
</p>
</blockquote>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">substring</span> <span class="string">"0123456789"</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; "3456789"</span></span><br><span class="line"><span class="list">(<span class="keyword">substring</span> <span class="string">"0123465789"</span> <span class="number">3</span> <span class="number">5</span>)</span> <span class="comment">;; &#8658; "34"</span></span><br><span class="line"><span class="list">(<span class="keyword">substring</span> <span class="string">"0123456789"</span> <span class="number">-3</span> <span class="number">-1</span>)</span> <span class="comment">;; &#8658; "78"</span></span><br><span class="line"><span class="list">(<span class="keyword">substring</span> <span class="string">"0123465789"</span> <span class="number">3</span> <span class="number">11</span>)</span> <span class="comment">;; &#8658; &#25253;&#38169; ;; &#32456;&#28857;&#36234;&#30028;</span></span><br><span class="line"><span class="list">(<span class="keyword">substring</span> <span class="string">"0123456789"</span> <span class="number">5</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; &#25253;&#38169; ;; &#32456;&#28857;&#27604;&#36215;&#28857;&#23567;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">concat</span> <span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span>)</span> <span class="comment">;; &#8658; "abc"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org16ec508" class="outline-2">
<h2 id="org16ec508"><span class="section-number-2">4</span> 比较函数</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><p>
字符使用 <code>char-equal</code> 函数进行比较，此函数区分大小写。
</p>
<blockquote>
<p>
<b>注：</b>
</p>

<p>
如果 Emacs 设置了搜索时忽略大小写，即变量 <code>case-fold-search</code> 设置为 t 时，此
函数对字符进行比较时将忽略大小写，慎用。
</p>
</blockquote>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#27492;&#26102;&#25105;&#30340; Emacs &#30340;&#21464;&#37327; case-fold-search &#35774;&#32622;&#20026;&#20102;t</span></span><br><span class="line"><span class="list">(<span class="keyword">char-equal</span> ?a ?A)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
字符串比较函数
</p>

<p>
<code>string=</code> 和 <code>string-equal</code> 比较字符串是否相等。
</p>

<p>
<code>string<</code> 和 <code>string-lessp</code> 比较两个字符串的长短(个人理解)
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">string=</span> <span class="string">"a"</span> <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string-equal</span> <span class="string">"a"</span> <span class="string">"a"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string&lt</span><span class="comment">; "as" "asdf") ;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">string-lessp</span> <span class="string">"as"</span> <span class="string">"asdf"</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>
<p>
<code>length</code> 获取字符串的长度。
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">length</span> <span class="string">"as"</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">length</span> <span class="string">""</span>)</span> <span class="comment">;; &#8658; 0</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org6f82959" class="outline-2">
<h2 id="org6f82959"><span class="section-number-2">5</span> 转换函数</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><p>
字符和字符串
</p>

<p>
<code>char-to-string</code> 函数，把字符转换为字符串，只能转换单个字符。
</p>

<p>
<code>string-to-char</code> 函数，把字符串转换为字符，只能返回字符串的第一个字符，且返
回的是以整数方式返回。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">char-to-string</span> ?a)</span> <span class="comment">;; &#8658; "a"</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-char</span> <span class="string">"asdf"</span>)</span> <span class="comment">;; &#8658; 97</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
数字和字符串
</p>

<p>
<code>number-to-string</code> 函数，把数字转换为字符串。
</p>

<p>
<code>string-to-number</code> 函数，把字符串转换为数字。(可以指定被转换字符串的进制
2-16 进制之间，转换为10进制)
</p>

<p>
如果要把数字输出为十进制或十六进制的字符串，使用 <code>format</code> 函数。目前 ELisp
没有输出为二进制的函数， calculator 库可以。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">number-to-string</span> <span class="number">123</span>)</span> <span class="comment">;; &#8658; "123"</span></span><br><span class="line"><span class="list">(<span class="keyword">number-to-string</span> <span class="number">-2</span>)</span> <span class="comment">;; &#8658; "-2"</span></span><br><span class="line"><span class="list">(<span class="keyword">number-to-string</span> <span class="number">1.8</span>)</span> <span class="comment">;; &#8658; "1.8"</span></span><br><span class="line"><span class="list">(<span class="keyword">number-to-string</span> <span class="number">1e3</span>)</span> <span class="comment">;; &#8658; "1000.0"</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">format</span> <span class="string">"%#o"</span> <span class="number">12</span>)</span> <span class="comment">;; &#8658; "014" ;; &#36755;&#20986;&#20026;&#20843;&#36827;&#21046;</span></span><br><span class="line"><span class="list">(<span class="keyword">format</span> <span class="string">"%#x"</span> <span class="number">12</span>)</span> <span class="comment">;; &#8658; "0xc" ;; &#36755;&#20986;&#20026;&#21313;&#20845;&#36827;&#21046;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"123"</span>)</span> <span class="comment">;; &#8658; 123</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"1a2"</span>)</span> <span class="comment">;; &#8658; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"92a"</span>)</span> <span class="comment">;; &#8658; 92</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"a12f"</span>)</span> <span class="comment">;; &#8658; 0</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"1e3"</span>)</span> <span class="comment">;; &#8658; 1000.0</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> <span class="string">"14"</span> <span class="number">8</span>)</span> <span class="comment">;; &#8658; 12</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
列表、向量和字符串
</p>

<p>
<code>concat</code> 函数，把一个字符构成的列表或向量转换为字符串。
</p>

<p>
<code>vconcat</code> 函数，把一个字符串转换为一个向量。
</p>

<p>
<code>append</code> 函数，把字符串转换为一个列表。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">concat</span> <span class="quoted">'(?a ?b ?c)</span>)</span> <span class="comment">;; &#8658; "abc" ;; &#21015;&#34920;&#36716;&#23383;&#31526;&#20018;</span></span><br><span class="line"><span class="list">(<span class="keyword">concat</span> [?a ?b ?c])</span> <span class="comment">;; &#8658; "abc" ;; &#21521;&#37327;&#36716;&#23383;&#31526;&#20018;</span></span><br><span class="line"><span class="list">(<span class="keyword">vconcat</span> <span class="string">"abc"</span>)</span> <span class="comment">;; &#8658; [97 98 99] ;; &#23383;&#31526;&#20018;&#36716;&#21521;&#37327;</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> <span class="string">"abc"</span> <span class="literal">nil</span>)</span> <span class="comment">;; &#8658; (97 98 99) ;; &#23383;&#31526;&#20018;&#36716;&#21015;&#34920;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
大小写转换
</p>

<p>
<code>downcase</code> 函数，把字符或字符串中的所有字符转换为小写。
</p>

<p>
<code>upcase</code> 函数，把字符或字符串中的所有字符转换为大写。
</p>

<p>
<code>capitalize</code> 函数，把字符或字符串中的所有单词的第一个字母转换为大写，其他转
换为小写。
</p>

<p>
<code>upcase-initials</code> 函数，把字符或字符串中所有单词的首字母转换为大写，其他字符
不变。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">downcase</span> <span class="string">"THe cAt IN thE HaT"</span>)</span> <span class="comment">;; &#8658; "the cat in the hat"</span></span><br><span class="line"><span class="list">(<span class="keyword">downcase</span> ?A)</span> <span class="comment">;; &#8658; 97 ;; a</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase</span> <span class="string">"thE cAt in thE HaT"</span>)</span> <span class="comment">;; &#8658; "THE CAT IN THE HAT"</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase</span> ?a)</span> <span class="comment">;; &#8658; 65 ;; A</span></span><br><span class="line"><span class="list">(<span class="keyword">capitalize</span> <span class="string">"tHe caT iN thE Hat"</span>)</span> <span class="comment">;; &#8658; "The Cat In The Hat"</span></span><br><span class="line"><span class="list">(<span class="keyword">capitalize</span> ?a)</span> <span class="comment">;; &#8658; 65 ;; A</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase-initials</span> <span class="string">"tHe caT in thE hAT"</span>)</span> <span class="comment">;; &#8658; "THe CaT In ThE HAT"</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase-initials</span> ?a)</span> <span class="comment">;; &#8658; 65 ;; A</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-orgf00b00e" class="outline-2">
<h2 id="orgf00b00e"><span class="section-number-2">6</span> 附录</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
函数列表
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#27979;&#35797;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">stringp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">string-or-null-p</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">char-or-string-p</span> OBJECT)</span></span><br><span class="line"><span class="comment">;; &#26500;&#24314;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">make-string</span> LENGTH INIT)</span></span><br><span class="line"><span class="list">(<span class="keyword">string</span> <span class="keyword">&amp</span><span class="comment">;rest CHARACTERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">substring</span> STRING FROM <span class="keyword">&amp</span><span class="comment">;optional TO)</span></span><br><span class="line"><span class="list">(<span class="keyword">concat</span> <span class="keyword">&amp</span><span class="comment">;rest SEQUENCES)</span></span><br><span class="line"><span class="comment">;; &#27604;&#36739;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">char-equal</span> C1 C2)</span></span><br><span class="line"><span class="list">(<span class="keyword">string=</span> S1 S2)</span></span><br><span class="line"><span class="list">(<span class="keyword">string-equal</span> S1 S2)</span></span><br><span class="line"><span class="list">(<span class="keyword">string&lt</span><span class="comment">; S1 S2)</span></span><br><span class="line"><span class="comment">;; &#36716;&#25442;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">char-to-string</span> CHAR)</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-char</span> STRING)</span></span><br><span class="line"><span class="list">(<span class="keyword">number-to-string</span> NUMBER)</span></span><br><span class="line"><span class="list">(<span class="keyword">string-to-number</span> STRING <span class="keyword">&amp</span><span class="comment">;optional BASE)</span></span><br><span class="line"><span class="list">(<span class="keyword">downcase</span> OBJ)</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase</span> OBJ)</span></span><br><span class="line"><span class="list">(<span class="keyword">capitalize</span> OBJ)</span></span><br><span class="line"><span class="list">(<span class="keyword">upcase-initials</span> OBJ)</span></span><br><span class="line"><span class="list">(<span class="keyword">format</span> STRING <span class="keyword">&amp</span><span class="comment">;rest OBJECTS)</span></span><br><span class="line"><span class="comment">;; &#26597;&#25214;&#19982;&#26367;&#25442;</span></span><br><span class="line"><span class="list">(<span class="keyword">string-match</span> REGEXP STRING <span class="keyword">&amp</span><span class="comment">;optional START)</span></span><br><span class="line"><span class="list">(<span class="keyword">replace-match</span> NEWTEXT <span class="keyword">&amp</span><span class="comment">;optional FIXEDCASE LITERAL STRING SUBEXP)</span></span><br><span class="line"><span class="list">(<span class="keyword">replace-regexp-in-string</span> REGEXP REP STRING <span class="keyword">&amp</span><span class="comment">;optional FIXEDCASE LITERAL SUBEXP START)</span></span><br><span class="line"><span class="list">(<span class="keyword">subst-char-in-string</span> FROMCHAR TOCHAR STRING <span class="keyword">&amp</span><span class="comment">;optional INPLACE)</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(004):基本数据类型--数字]]></title>
      <url>http://yyangdid.github.io/2017/01/22/%E5%AD%A6%E4%B9%A0ELisp/2017-01-22.%E5%AD%A6%E4%B9%A0ELisp(004):%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B--%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org6e71f8f">1. 数字分类和表示方法</a></li>
<li><a href="#org04be5e7">2. 数字测试函数</a></li>
<li><a href="#orgfabf474">3. 比较操作符</a></li>
<li><a href="#org838d039">4. 数字转换函数</a>
<ul>
<li><a href="#orge6d6b5f">4.1. 整数转换为浮点数</a></li>
<li><a href="#org3b3db1b">4.2. 浮点数转换为整数</a></li>
</ul>
</li>
<li><a href="#org2762c08">5. 数字的运算</a></li>
<li><a href="#org89fa03d">6. 附录</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录 ELisp 对数字的一些操作：类型测试、数字比较、数字运算、数字转换。
</p>
</blockquote>
<a id="more"></a>

<div id="outline-container-org6e71f8f" class="outline-2">
<h2 id="org6e71f8f"><span class="section-number-2">1</span> 数字分类和表示方法</h2>
<div class="outline-text-2" id="text-1">
<p>
ELisp 中的数字分为整数和浮点数( <code>没有双精度浮点数 double</code> )和 NaN 。
</p>

<ul class="org-ul">
<li><p>
整数
</p>

<p>
整数的表数范围根据使用机器的不同而不同，可以使用 <code>most-negative-fixnum</code> 和 <code>most-positive-fixnum</code> 两个变量得到。
</p>

<p>
例：获取本机的整数表数范围
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> num-test01 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"%s -- %s"</span></span><br><span class="line">           most-negative-fixnum</span><br><span class="line">           most-positive-fixnum)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test01</span>)</span> <span class="comment">;; &#8658; -2305843009213693952 -- 2305843009213693951</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
可以使用多种进制来输入一个整数。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> num-test02 <span class="list">(<span class="keyword">num</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"%s"</span></span><br><span class="line">           num)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#b1011000</span>)</span> <span class="comment">;; &#8658; 88 ;; &#20351;&#29992;&#20108;&#36827;&#21046;&#36755;&#20837;&#25968;&#23383;</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#o130</span>)</span> <span class="comment">;; &#8658; 88 ;;&#20351;&#29992;&#20843;&#36827;&#21046;&#36755;&#20837;&#25968;&#23383;</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">88</span>)</span> <span class="comment">;; &#8658; 88 ;; &#20351;&#29992;&#21313;&#36827;&#21046;&#36755;&#20837;&#25968;&#23383;</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#x58</span>)</span> <span class="comment">;; &#8658; 88 ;; &#20351;&#29992;&#21313;&#20845;&#36827;&#21046;&#36755;&#20837;&#25968;&#23383;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
浮点数
</p>

<p>
1500.0, 15e2, 1.5e3, .15e4都表示1500. 。
</p></li>

<li><p>
NaN
</p>

<p>
使用 <code>(/ 0.0 0.0)</code> 可是得到 NaN <code>-0.0e+NaN</code> 。
</p></li>
</ul>
</div>
</div>

<div id="outline-container-org04be5e7" class="outline-2">
<h2 id="org04be5e7"><span class="section-number-2">2</span> 数字测试函数</h2>
<div class="outline-text-2" id="text-2">
<p>
ELisp 的测试函数一般都采用 <code>p</code> 结尾， <code>p</code> 代表 <code>predicate</code> 。如果函数名是一个
单词，一般在这个单词后面加一个 <code>p</code> 字母，如果函数名是由多个单词组成的，一般在
这个函数名的后面添加 <code>-p</code> 。
</p>

<p>
常用的数字测试函数：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">函数名</th>
<th scope="col" class="org-left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">(integerp <i>OBJECT</i>)</td>
<td class="org-left">测试是否为 <code>整数类型</code></td>
</tr>

<tr>
<td class="org-left">(floatp <i>OBJECT</i>)</td>
<td class="org-left">测试是否为 <code>浮点数类型</code></td>
</tr>

<tr>
<td class="org-left">(numberp <i>ObJECT</i>)</td>
<td class="org-left">测试是否为 <code>数字类型</code></td>
</tr>

<tr>
<td class="org-left">(zerop <i>OBJECT</i>)</td>
<td class="org-left">测试是否为 <code>零</code></td>
</tr>

<tr>
<td class="org-left">(wholenump <i>OBJECT</i>)</td>
<td class="org-left">测试是否为 <code>非负整数</code></td>
</tr>
</tbody>
</table>

<p>
例:
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1</span>.)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1.0</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1</span>.)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1.0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> <span class="number">1</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">1</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">1.0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">1</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">1.0</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">-1</span>)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-orgfabf474" class="outline-2">
<h2 id="orgfabf474"><span class="section-number-2">3</span> 比较操作符</h2>
<div class="outline-text-2" id="text-3">
<p>
ELisp 中的比较操作符有 <code>>、<、>=、<=、=、eql< code=""> 。
</=、=、eql<></、></code></p>

<p>
由于 ELisp 中的赋值是由 setq 完成的，所以 <code>=</code> 用来测试两个数字的值是否相等。
</p>

<p>
而 <code>eql</code> 不仅能测试数字的值是否相等，也能测试数字类型是否相同。
</p>

<p>
ELisp 中 <code>不存在 +=、-=、*=</code> 。
</p>

<p>
<code>/=</code> 作为不等于测试。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> b <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> c <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> d <span class="number">1.00</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">; a c) ;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">; a c) ;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">;= a c) ;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">;= a c) ;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> a d)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="list">(<span class="keyword">eql</span> a d)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">/=</span> a c)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span></span><br></pre></td></tr></table></figure>
</div>

<p>
对于浮点数的测试往往是不准确的，例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a1 <span class="number">1.0e-3</span>)</span> <span class="comment">;; &#8658; 0.001</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a2 <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">+</span> <span class="number">1.0</span> <span class="number">1.0e-3</span>)</span> <span class="number">1.0</span>)</span>)</span> <span class="comment">;; &#8658; 0.000999999999999889</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> a1 a2)</span> <span class="comment">;; &#8658; nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
如果一定要对两个浮点数进行比较，只能在一定范围内进行比较：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defvar</span> fuzz-factor <span class="number">1.0e-6</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> approx-equal <span class="list">(<span class="keyword">a</span> b)</span></span><br><span class="line">  <span class="string">"&#22312; 1.0e-6 &#33539;&#22260;&#20869;&#36827;&#34892;&#28014;&#28857;&#25968;&#27604;&#36739;"</span></span><br><span class="line">  <span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">=</span> b <span class="number">0</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">&lt</span><span class="comment">; (/ (abs (- a b)) (max (abs a) (abs b)))</span></span><br><span class="line">         fuzz-factor)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">approx-equal</span> a1 a2)</span> <span class="comment">;; &#8658; t</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-org838d039" class="outline-2">
<h2 id="org838d039"><span class="section-number-2">4</span> 数字转换函数</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-orge6d6b5f" class="outline-3">
<h3 id="orge6d6b5f"><span class="section-number-3">4.1</span> 整数转换为浮点数</h3>
<div class="outline-text-3" id="text-4-1">
<p>
使用 <code>float</code> 函数可将整数转换为浮点数。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a4 <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> a4)</span> <span class="comment">;; &#8658; 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; 3.0</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">-3</span>)</span> <span class="comment">;; &#8658; -3.0</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-org3b3db1b" class="outline-3">
<h3 id="org3b3db1b"><span class="section-number-3">4.2</span> 浮点数转换为整数</h3>
<div class="outline-text-3" id="text-4-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="org-left">

<col class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">函数</th>
<th scope="col" class="org-left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">truncate</td>
<td class="org-left">转换为靠近 0 的整数</td>
</tr>

<tr>
<td class="org-left">floor</td>
<td class="org-left">转换为最接近的不比本身大的整数</td>
</tr>

<tr>
<td class="org-left">ceiling</td>
<td class="org-left">转换为最接近的不比本身小的整数</td>
</tr>

<tr>
<td class="org-left">round</td>
<td class="org-left">四舍五入后的整数，即与本身求差绝对值最小的整数</td>
</tr>
</tbody>
</table>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; truncate ;; &#36716;&#25442;&#20026;&#38752;&#36817; 0 &#30340;&#25972;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">2.3</span>)</span>   <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">-2.3</span>)</span>  <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">2.8</span>)</span>   <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">-2.8</span>)</span>  <span class="comment">;; &#8658; -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; floor ;; &#36716;&#25442;&#20026;&#26368;&#25509;&#36817;&#30340;&#19981;&#27604;&#26412;&#36523;&#22823;&#30340;&#25972;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">2.3</span>)</span>   <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">-2.3</span>)</span>  <span class="comment">;; &#8658; -3</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">2.8</span>)</span>   <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">-2.8</span>)</span>  <span class="comment">;; &#8658; -3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; ceiling ;; &#36716;&#25442;&#20026;&#26368;&#25509;&#36817;&#30340;&#19981;&#27604;&#26412;&#36523;&#23567;&#30340;&#25972;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">2.3</span>)</span>  <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">-2.3</span>)</span> <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">2.8</span>)</span>  <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">-2.8</span>)</span> <span class="comment">;; &#8658; -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; round ;; &#22235;&#33293;&#20116;&#20837;&#21518;&#30340;&#25972;&#25968;&#65292;&#21363;&#19982;&#26412;&#36523;&#27714;&#24046;&#32477;&#23545;&#20540;&#26368;&#23567;&#30340;&#25972;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">2.3</span>)</span>  <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">-2.3</span>)</span> <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">2.8</span>)</span>  <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">-2.8</span>)</span> <span class="comment">;; &#8658; -3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
<b>注：</b>
</p>
</blockquote>
<p>
浮点数的范围是无穷大的，而整数的是有范围的，当使用 <code>浮点数转换为整数</code> 函数的
时候，数值超越了整数的表数范围时，代码报错。
</p>

<p>
当使用 <code>整数转换为浮点数</code> 函数时，即使被转换的整数是超过整数表数范围的，转换
为浮点数也不会报错。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 1e30 &#26159;&#19968;&#20010;&#36229;&#36807;&#20102;&#25972;&#25968;&#34920;&#25968;&#33539;&#22260;&#30340;&#25968;&#23383;</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">1e30</span>)</span> <span class="comment">;; &#8658; &#25253;&#38169; ;; &#36716;&#25442;&#20026;&#25972;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">1e30</span>)</span> <span class="comment">;; &#8658; 1e+30 ;; &#36716;&#25442;&#20026;&#28014;&#28857;&#25968;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
<div id="outline-container-org2762c08" class="outline-2">
<h2 id="org2762c08"><span class="section-number-2">5</span> 数字的运算</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><p>
四则运算 <code>+、-、*、/</code> 。
</p>

<p>
<b>注：</b> 整数和整数运算返回整数，整数和浮点数运算返回
浮点数。在整数和整数做除法运算时，例如：(/ 1 2) 返回值为 0 ，相当于 truncate
了一下，改写为 (/ 1 2.0) 返回值为 0.5 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">-</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; -1</span></span><br><span class="line"><span class="list">(<span class="keyword">*</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 0</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="number">2.0</span>)</span> <span class="comment">;; &#8658; 0.5</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1.0</span> <span class="number">2.0</span>)</span> <span class="comment">;; &#8658; 3.0</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
<code>++</code> 和 <code>--</code>
</p>

<p>
ELisp 中没有 <code>++和--</code> 操作，类似的的函数是 <code>1+</code> 和 <code>1-</code> ，使用
<code>setq</code> 赋值代替 <code>++ 和 --</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="number">1</span>)</span> <span class="comment">;; &#8658; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>+ a6)</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>+ a6)</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>- a6)</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
在 Common Lisp 中有两个宏实现了 <code>++ 和 --</code> 操作： <code>incf 和 decf</code> ，Emacs 包含
一个模拟 Common Lisp 的库 <code>cl</code> ，在 ELisp 代码文件中使用这两个实现宏，要在 ELisp 文件头加入：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">eval-when-compile</span></span><br><span class="line">  <span class="list">(<span class="keyword">require</span> <span class="quoted">'cl</span>)</span>)</span></span><br><span class="line">      <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
由于 <code>incf</code> 和 <code>decf</code> 是两个宏，这样写在运行时不会导入 cl 库。
</p></li>

<li><p>
求绝对值
</p>

<p>
ELisp 使用 <code>abs</code> 函数求绝对值。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">abs</span> <span class="number">2</span>)</span>  <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">abs</span> <span class="number">-2</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
<code>%</code> 函数 （我个人认为是求余）
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(% <span class="keyword">&#34987</span><span class="comment">;&#38500;&#25968; &#38500;&#25968;)</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>

<p>
参与运算的必须是整数，可以是正整数或负整数，运算时先把负数取绝对值，再运算。
运算结果和被除数的正负号相同，若被除数等于除数则结果为 0 ，若被除数小于除数
则结果为被除数。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(% <span class="number">3</span> <span class="number">8</span>)</span>   <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(% <span class="number">3</span> <span class="number">-8</span>)</span>  <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="list">(% <span class="number">-3</span> <span class="number">8</span>)</span>  <span class="comment">;; &#8658; -3</span></span><br><span class="line"><span class="list">(% <span class="number">-3</span> <span class="number">-8</span>)</span> <span class="comment">;; &#8658; -3</span></span><br><span class="line"></span><br><span class="line"><span class="list">(% <span class="number">8</span> <span class="number">3</span>)</span>   <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(% <span class="number">8</span> <span class="number">-3</span>)</span>  <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(% <span class="number">-8</span> <span class="number">3</span>)</span>  <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="list">(% <span class="number">-8</span> <span class="number">-3</span>)</span> <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
<code>mod</code> 函数（个人认为是取模）
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="keyword">&#34987</span><span class="comment">;&#21462;&#27169;&#25968; &#27169;&#25968;)</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>

<p>
参与运算的可以是整数或浮点数，可以是正数或负数，运算结果和模数的正负号相同。
若被取模数和模数的正负号相同，则运算方法和求余相同，运算结果的正负号和模数相
同。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">9</span> <span class="number">4</span>)</span>       <span class="comment">;; &#8658; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-9</span> <span class="number">-4</span>)</span>     <span class="comment">;; -1</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">5.5</span> <span class="number">2.5</span>)</span>   <span class="comment">;; &#8658; 0.5</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-5.5</span> <span class="number">-2.5</span>)</span> <span class="comment">;; &#8658; -0.5</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
若被取模数和模数的正负号不相同，运算方法如下：
</p>

<p>
如 a 为被取模数， b 为模数，计算 (mod a b) 。假定两个未知数 x 和 y，则一定会
有一个或多个结果满足如下条件：
</p>

<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; x * b + y = a &#19988; 0 &#8804; |y| &#8804; |x|</span></span><br></pre></td></tr></table></figure>
</div>

<p>
因为会有一组或多组 x y 的值满足上面的公式，如果只有一组 x y 的值满足公式，则
y 的值就是 (mod a b) 的计算结果，如果有多组 x y 的值满足公式，那么 y 的值还
是不能被唯一确定，所以不同的编程语言对此种情况下 y 的取值有不同的规定。
</p>

<p>
把 <code>x</code> 值称为 <code>商</code> ， <code>y</code> 值称为 <code>余</code> 。
</p>

<p>
<code>Java、C++</code> 取 <b>商 (即 x) 值尽可能大的那一组里面 y 的值为计算结果</b>
</p>

<p>
<code>Python、ELisp</code> 取 <b>商 (即 x) 值尽可能小的那一组里面 y 的值为计算结果</b>
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">9</span> <span class="number">-4</span>)</span> <span class="comment">;; &#8658; -3</span></span><br><span class="line"><span class="comment">;; &#28385;&#36275; (x * b + y = a) &#20844;&#24335;</span></span><br><span class="line"><span class="comment">;; (-2) * (-4) + (1) = 9</span></span><br><span class="line"><span class="comment">;; (-3) * (-4) + (-3) = 9 ;; &#8730; ;;&#21830; (&#21363; x) &#20540;&#27604;&#36739;&#23567;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-9</span> <span class="number">4</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="comment">;; &#28385;&#36275; (x * b + y = a) &#20844;&#24335;</span></span><br><span class="line"><span class="comment">;; (-2) * 4 + (-1) = (-9)</span></span><br><span class="line"><span class="comment">;; (-3) * 4 + (3) = (-9) ;; &#8730; ;;&#21830; (&#21363; x) &#20540;&#27604;&#36739;&#23567;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">5.5</span> <span class="number">-2.5</span>)</span> <span class="comment">;; &#8658; -2</span></span><br><span class="line"><span class="comment">;; &#28385;&#36275; (x * b + y = a) &#20844;&#24335;</span></span><br><span class="line"><span class="comment">;; (-2) * (-2.5) + (0.5) = 5.5</span></span><br><span class="line"><span class="comment">;; (-3) * (-2.5) + (-2) = 5.5 ;; &#8730; ;;&#21830; (&#21363; x) &#20540;&#27604;&#36739;&#23567;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-5.5</span> <span class="number">2.5</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="comment">;; &#28385;&#36275; (x * b + y = a) &#20844;&#24335;</span></span><br><span class="line"><span class="comment">;; (-2) * 2.5 + (-0.5) = -5.5</span></span><br><span class="line"><span class="comment">;; (-3) * 2.5 + (2) = -5.5 ;; &#8730; ;;&#21830; (&#21363; x) &#20540;&#27604;&#36739;&#23567;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
三角运算函数
</p>

<p>
ELisp 中的三角运算函数有： <code>sin、cos、tan、asin、acos、atan</code> 。
</p></li>

<li><p>
开方函数
</p>

<p>
ELisp 的开方函数是 <code>sqrt</code> 。
</p>

<p>
正数开方的结果都为 <code>浮点数</code> ，0 的开方结果为 <code>0.0</code> ，所有负数的开方结果为
<code>-0.0e+NaN</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">4</span>)</span> <span class="comment">;; &#8658; 2.0</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">0</span>)</span> <span class="comment">;; &#8658; 0.0</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">-4.4</span>)</span> <span class="comment">;; &#8658; -0.0e+NaN</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">-9</span>)</span> <span class="comment">;; &#8658; -0.0e+NaN</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
指数运算函数
</p>

<p>
指数运算函数包括 <code>exp、expt</code> 。
</p>

<p>
<code>exp</code> 函数是以 e 为底的指数运算 (e 是自然函数，是一个无限不循环小数，他的值
约为 2.718281828) 。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">exp</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 7.38905609893065</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
<code>expt</code> 函数是可以指定底数的指数运算。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">expt</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; 8</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
对数运算函数
</p>

<p>
对数运算函数包括 <code>log、logb</code> 。
</p>

<p>
<code>log</code> 函数默认以 e 底数，也可以自定义底数。返回值为浮点数。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">7.38905609893065</span>)</span> <span class="comment">;; &#8658; 2.0 ;; &#40664;&#35748;&#24213;&#25968;&#20026; e</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 0.6931471805599453 ;; &#40664;&#35748;&#24213;&#25968;&#20026; e</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">4</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 2.0 ;; &#33258;&#23450;&#20041;&#24213;&#25968;&#20026; 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
<code>logb</code> 函数以 2 为底数，但是返回一个整数，此函数用来计算数的位。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">2</span>)</span> <span class="comment">;; &#8658; 1</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">4</span>)</span> <span class="comment">;; &#8658; 2</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">8</span>)</span> <span class="comment">;; &#8658; 3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
<code>random</code> 随机数函数
</p>

<p>
使用 <code>(random)</code> 产生一个随机数 (其实是伪随机数)。启动 Emacs后产生的随机数序
列是相同的，第一次调用 (random) 总是生成 -1457731, 第二次总生成 -7692030. 当
然平常如果调用次数不同, 则随机数也不一样。但是可以使用 <code>(random t)</code> 函数，此
函数可以根据当前时间和 Emacs 的 PID 生成一个新的随机数种子。
</p>

<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a8 <span class="list">(<span class="keyword">random</span> <span class="literal">t</span>)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
<div id="outline-container-org89fa03d" class="outline-2">
<h2 id="org89fa03d"><span class="section-number-2">6</span> 附录</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
函数列表
</p>

<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#27979;&#35797;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> NUMBER)</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> OBJECT)</span></span><br><span class="line"><span class="comment">;; &#27604;&#36739;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">; NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">; NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">;= NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">;= NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">eql</span> OBJ1 OBJ2)</span></span><br><span class="line"><span class="list">(<span class="keyword">/=</span> NUM1 NUM2)</span></span><br><span class="line"><span class="comment">;; &#36716;&#25442;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="comment">;; &#36816;&#31639;</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="keyword">&amp</span><span class="comment">;rest NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">-</span> <span class="keyword">&amp</span><span class="comment">;optional NUMBER-OR-MARKER &amp;rest MORE-NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">*</span> <span class="keyword">&amp</span><span class="comment">;rest NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> DIVIDEND DIVISOR <span class="keyword">&amp</span><span class="comment">;rest DIVISORS)</span></span><br><span class="line"><span class="list">(<span class="number">1</span>+ NUMBER)</span></span><br><span class="line"><span class="list">(<span class="number">1</span>- NUMBER)</span></span><br><span class="line"><span class="list">(<span class="keyword">abs</span> ARG)</span></span><br><span class="line"><span class="list">(% X Y)</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> X Y)</span></span><br><span class="line"><span class="list">(<span class="keyword">sin</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">cos</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">tan</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">asin</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">acos</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">atan</span> Y <span class="keyword">&amp</span><span class="comment">;optional X)</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">exp</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">expt</span> ARG1 ARG2)</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> ARG <span class="keyword">&amp</span><span class="comment">;optional BASE)</span></span><br><span class="line"><span class="list">(<span class="keyword">log10</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> ARG)</span></span><br><span class="line"><span class="comment">;; &#38543;&#26426;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">random</span> <span class="keyword">&amp</span><span class="comment">;optional N)</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
变量列表
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">most-positive-fixnum</span><br><span class="line">most-negative-fixnum</span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(003):基础知识]]></title>
      <url>http://yyangdid.github.io/2017/01/12/%E5%AD%A6%E4%B9%A0ELisp/2017-01-12.%E5%AD%A6%E4%B9%A0ELisp(003):%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org6be0214">1. 函数和变量</a>
<ul>
<li><a href="#org19ca73e">1.1. 函数的声明和调用</a></li>
<li><a href="#org5e604b5">1.2. 变量</a>
<ul>
<li><a href="#org801ce0d">1.2.1. 局部变量</a></li>
</ul>
</li>
<li><a href="#org71fae5d">1.3. lambda 表达式</a></li>
<li><a href="#org3ce74e1">1.4. 控制结构</a>
<ul>
<li><a href="#orgd1404b4">1.4.1. 顺序执行</a></li>
<li><a href="#org7484026">1.4.2. 条件判断</a></li>
<li><a href="#orgd5432d9">1.4.3. 循环   while</a></li>
<li><a href="#org9e81185">1.4.4. 逻辑运算</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orge66d921">2. 本节附录</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录 ELisp 编程中的基本概念，例如如何定义函数，控制结构，变量的使用和作用域&#x2026;&#x2026;
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org6be0214" class="outline-2">
<h2 id="org6be0214"><span class="section-number-2">1</span> 函数和变量</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-org19ca73e" class="outline-3">
<h3 id="org19ca73e"><span class="section-number-3">1.1</span> 函数的声明和调用</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li><p>
声明一个函数的格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#26684;&#24335;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> function-name <span class="list">(<span class="keyword">arguments-list</span>)</span></span><br><span class="line">  <span class="string">"document string"</span></span><br><span class="line">  function-body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
ELisp使用关键字 <code>defun</code> 来定义函数，函数中的参数列表可以为 <code>零个、一个或多个</code>
。函数中的文档字符串可以省略不写但不推荐。
</p>
<blockquote>
<p>
在 Emacs 中，当光标处于一个函数名上的时候，使用 <code>C-h f</code> 可以查看此函数的文档。
</p>
</blockquote>
<ul class="org-ul">
<li><p>
例子一：声明一个没有参数的函数
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#22768;&#26126;&#19968;&#20010;&#20989;&#25968; hello () :</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">()</span></span><br><span class="line">  <span class="string">"Say hello."</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello"</span>)</span>)</span></span><br><span class="line"><span class="comment">;;&#35843;&#29992;&#27492;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
例子二：声明一个带有参数的函数
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#22768;&#26126;&#19968;&#20010;&#24102;&#21442;&#25968;&#30340;&#20989;&#25968; hello (name)&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="string">"Say hello to user whose name is NAME."</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello %s."</span> name)</span>)</span></span><br><span class="line"><span class="comment">;;&#35843;&#29992;&#27492;&#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"Emacs"</span>)</span> <span class="comment">;; &#8658; Hello Emacs.</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
每个函数都有一个返回值，这个返回值一般是函数定义里面的最后一个表达式的值。
</p>
</blockquote></li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org5e604b5" class="outline-3">
<h3 id="org5e604b5"><span class="section-number-3">1.2</span> 变量</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li><p>
直接对变量赋值
</p>

<p>
在 ELisp 中可以直接给一个变量进行赋值，而不需要声明。
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#30452;&#25509;&#23545;&#21464;&#37327; foo &#36171;&#20540;</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> foo <span class="string">"I am foo"</span>)</span> <span class="comment">;; &#8658; "I am foo"</span></span><br><span class="line"><span class="list">(<span class="keyword">message</span> foo)</span> <span class="comment">;; &#8658; "I am foo"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
把光标放在变量名上使用 <code>C-h v</code> 可以查看此变量的文档说明。
</p>
</blockquote></li>

<li><p>
使用 <code>defvar</code> 关键字声明变量
</p>

<p>
上面使用 <code>setq</code> 的方式给一个变量赋值是不能够添加文档字符串的， <code>defvar</code> 可以在
赋值的同时添加文档字符串，如果 <code>defvar</code> 声明赋值的变量已经存在一个值了，
<code>defvar</code> 不会改变这个值。
</p>

<p>
<code>defvar</code> 的使用格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defvar</span> variable-name value</span><br><span class="line">  <span class="string">"Document string"</span>)</span></span><br></pre></td></tr></table></figure>
</div>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> foo <span class="string">"Emacs"</span>)</span> <span class="comment">;; &#20351;&#29992; setq &#32473;&#21464;&#37327; foo &#36171;&#20540;&#20026; "Emacs"</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> foo)</span>       <span class="comment">;; &#8658; Emacs</span></span><br><span class="line"><span class="list">(<span class="keyword">defvar</span> foo <span class="string">"ELisp"</span></span><br><span class="line">  <span class="string">"Test defvar"</span>)</span>   <span class="comment">;; &#20351;&#29992; defvar &#32473;&#21464;&#37327; foo &#36171;&#20540;&#24182;&#28155;&#21152;&#25991;&#26723;&#23383;&#31526;&#20018;</span></span><br><span class="line"><span class="list">(<span class="keyword">isner</span> foo)</span>        <span class="comment">;; &#8658; Emacs ;; defvar &#27809;&#26377;&#25913;&#21464; foo &#30340;&#20540;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
在 ELips 中函数是全局的，变量也很容易成为全局的，在给函数和变量起名字的时候使
用 <code>C-h f</code> 和 <code>C-h v</code> 确定一下要定义的名字是否已经被使用了。
</p>
</blockquote></li>
</ul>
</div>

<div id="outline-container-org801ce0d" class="outline-4">
<h4 id="org801ce0d"><span class="section-number-4">1.2.1</span> 局部变量</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
ELisp 使用 <code>let</code> 和 <code>let*</code> 来绑定局部变量。
</p>

<ul class="org-ul">
<li><p>
<code>let</code>
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">let</span> bindings</span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;; bindings &#21487;&#20197;&#26159; (var value) &#36825;&#31181;&#23545; var &#22768;&#26126;&#24182;&#36171;&#20104;&#21021;&#22987;&#20540;&#30340;&#24418;&#24335;(&#27880;&#24847;&#28155;&#21152;&#23567;&#25324;&#21495;)&#65292;</span></span><br><span class="line"><span class="comment">;; &#20063;&#21487;&#20197;&#26159; var &#36825;&#31181;&#22768;&#26126;&#19968;&#20010;&#21021;&#22987;&#20540;&#20026; nil &#30340;&#21464;&#37327;&#65292;&#21487;&#20197;&#22768;&#26126;&#19968;&#20010;&#25110;&#22810;&#20010;&#12290;</span></span><br><span class="line"><span class="comment">;; &#23616;&#37096;&#21464;&#37327;&#30340;&#20316;&#29992;&#22495;&#21482;&#22312; (let) &#33539;&#22260;&#20869;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例一：声明一个初始值不为 nil 的局部变量
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test01 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test01 - %i"</span></span><br><span class="line">             a)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test01</span>)</span> <span class="comment">;; &#8658; "let_test01 - 1"</span></span><br><span class="line"><span class="comment">;; &#25226;&#20809;&#26631;&#25918;&#22312;&#21464;&#37327;&#21517; a &#19978;&#65292;&#20351;&#29992; C-h v &#26597;&#30475;&#21464;&#37327;&#20250;&#25552;&#31034;&#27492;&#21464;&#37327;&#19981;&#23384;&#22312;&#65292;&#36825;&#23601;&#26159;&#23616;&#37096;&#21464;&#37327;&#12290;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例二：声明一个初始值不为 nil 的局部变量和一个初始值为 nil 的局部变量
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test02 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span></span><br><span class="line">        b)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> b <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test02 - a:%i - b:%i"</span></span><br><span class="line">             a</span><br><span class="line">             b)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test02</span>)</span> <span class="comment">;; &#8658; "let_test02 - a:1 - b:2"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例三：声明多个局部变量
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test03 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span></span><br><span class="line">        b</span><br><span class="line">        c</span><br><span class="line">        d)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> b <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> c <span class="list">(<span class="keyword">+</span> a <span class="number">2</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> d <span class="list">(<span class="keyword">+</span> a <span class="number">3</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test03 - a:%i - b:%i - c:%i - d:%i"</span></span><br><span class="line">             a</span><br><span class="line">             b</span><br><span class="line">             c</span><br><span class="line">             d)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test03</span>)</span> <span class="comment">;; &#8658; let_test03 - a:1 - b:2 - c:3 - d:4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例四：在函数中使用函数传参<a id="orgeec3df7"></a>
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> circle-area <span class="list">(<span class="keyword">radius</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">pai</span> <span class="number">3.1415926</span>)</span></span><br><span class="line">        area)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> area <span class="list">(<span class="keyword">*</span> pai radius radius)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"&#21322;&#24452;&#20026; %.2f &#30340;&#22278;&#38754;&#31215;&#20026; %.2f"</span></span><br><span class="line">             radius</span><br><span class="line">             area)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">circle-area</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; &#21322;&#24452;&#20026; 3.00 &#30340;&#22278;&#38754;&#31215;&#20026; 28.27</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
<ul class="org-ul">
<li><p>
<code>let*</code>
</p>

<p>
<code>let*</code> 和 <code>let</code> 的格式相同，唯一区别是 <code>let*</code> 在定义局部变量的时候可以使用前面已经定义过的变量直接运算。
</p>

<p>
例：改写 <a href="#orgeec3df7"><code>let</code> 例四：在函数中使用函数传参</a>
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> circle-area <span class="list">(<span class="keyword">radius</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let*</span> <span class="list">(<span class="list">(<span class="keyword">pai</span> <span class="number">3.1415926</span>)</span></span><br><span class="line">         <span class="list">(<span class="keyword">area</span> <span class="list">(<span class="keyword">*</span> pai radius radius)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"&#21322;&#24452;&#20026; %.2f &#30340;&#22278;&#38754;&#31215;&#20026; %.2f"</span></span><br><span class="line">             radius</span><br><span class="line">             area)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">circle-area</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; &#21322;&#24452;&#20026; 3.00 &#30340;&#22278;&#38754;&#31215;&#20026; 28.27</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org71fae5d" class="outline-3">
<h3 id="org71fae5d"><span class="section-number-3">1.3</span> lambda 表达式</h3>
<div class="outline-text-3" id="text-1-3">
<p>
lambda 表达式类似其他编程语言的匿名函数，其定义格式和 <code>defun</code> 相同。
</p>

<p>
使用 <code>funcall</code> 来调用。
</p>

<p>
定义格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">arguments-list</span>)</span></span><br><span class="line">  <span class="string">"ducomentation string"</span></span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例一：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">funcall</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">           <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">                    name)</span>)</span></span><br><span class="line">         <span class="string">"ELisp"</span>)</span> <span class="comment">;; &#8658; Hello, ELis</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例二：把 lambda 表达式赋值给一个变量
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> lmd <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">                     name)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">funcall</span> lmd <span class="string">"ELisp"</span>)</span> <span class="comment">;; &#8658; Hello, ELisp</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-org3ce74e1" class="outline-3">
<h3 id="org3ce74e1"><span class="section-number-3">1.4</span> 控制结构</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-orgd1404b4" class="outline-4">
<h4 id="orgd1404b4"><span class="section-number-4">1.4.1</span> 顺序执行</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
在 <code>defun</code> <code>let</code> 等环境中语句是按顺序执行的，但很多情况不会，需要使用 <code>progn</code> 表达式。
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span> A B C D ...)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> a <span class="number">2</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"square of %i is %i"</span></span><br><span class="line">           a</span><br><span class="line">           <span class="list">(<span class="keyword">*</span> a a)</span>)</span>)</span> <span class="comment">;; &#8658; square of 2 is 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-org7484026" class="outline-4">
<h4 id="org7484026"><span class="section-number-4">1.4.2</span> 条件判断</h4>
<div class="outline-text-4" id="text-1-4-2">
<ul class="org-ul">
<li><p>
if
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">if</span> condition</span><br><span class="line">    then</span><br><span class="line">  else)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> my-max <span class="list">(<span class="keyword">a</span> b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">; a b)</span></span><br><span class="line">      <span class="list">(<span class="keyword">message</span> <span class="string">"a:%i"</span> a)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"b:%i"</span> b)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">my-max</span> <span class="number">3</span> <span class="number">4</span>)</span> <span class="comment">;; &#8658; b:4</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
cond
</p>

<p>
类似 <code>java</code> 中的 <code>case</code> 。
</p>

<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="keyword">case1</span> do-when-case1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">case2</span> do-when-case2)</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="list">(<span class="keyword">t</span> do-when-none-meet)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> fib <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">2</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">n</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">4</span>)</span> <span class="comment">;; &#8658; 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

<div id="outline-container-orgd5432d9" class="outline-4">
<h4 id="orgd5432d9"><span class="section-number-4">1.4.3</span> 循环   while</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
格式：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">while</span> condition</span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> facl <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">res</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">while</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">; n 1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">setq</span> res <span class="list">(<span class="keyword">*</span> res n)</span></span><br><span class="line">            n <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line">    res)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">facl</span> <span class="number">3</span>)</span> <span class="comment">;; &#8658; 6</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-org9e81185" class="outline-4">
<h4 id="org9e81185"><span class="section-number-4">1.4.4</span> 逻辑运算</h4>
<div class="outline-text-4" id="text-1-4-4">
<p>
使用 <code>and</code> <code>or</code> <code>not</code> 。其中 and 和 or 具有短路性质。在表达式比较短的时候，
可以使用 and 代替 when，or 代替 unless，这是一般不关心返回值，主要是作用于表
达式内其他语句的副作用。例如 or 经常用来设置函数参数的默认值， and 经常用于
参数检查。
例：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> hello-world <span class="list">(<span class="keyword">&amp</span><span class="comment">;optional name)</span></span><br><span class="line">  <span class="list">(<span class="keyword">or</span> name <span class="list">(<span class="keyword">setq</span> name <span class="string">"Emacs"</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">           name)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">hello-world</span>)</span> <span class="comment">;; &#8658; Hello, Emacs</span></span><br><span class="line"><span class="list">(<span class="keyword">hello-world</span> <span class="string">"ELisp"</span>)</span> <span class="comment">;; &#8658; Hello, ELisp</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> square-number-p <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">;= n 0)</span></span><br><span class="line">       <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">/</span> n <span class="list">(<span class="keyword">sqrt</span> n)</span>)</span> <span class="list">(<span class="keyword">sqrt</span> n)</span>)</span>)</span>)</span> <span class="comment">;; sqrt &#26159;&#20869;&#32622;&#20989;&#25968;&#65292;&#24320;&#24179;&#26041; &#8730;</span></span><br><span class="line"><span class="list">(<span class="keyword">square-number-p</span> <span class="number">-1</span>)</span> <span class="comment">;; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">square-number-p</span> <span class="number">25</span>)</span> <span class="comment">;; t</span></span><br><span class="line"><span class="comment">;;</span></span></span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orge66d921" class="outline-2">
<h2 id="orge66d921"><span class="section-number-2">2</span> 本节附录</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><p>
函数列表
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> NAME ARGLIST [DOCSTRING] BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">defvar</span> SYMBOL <span class="keyword">&amp</span><span class="comment">;optional INITVALUE DOCSTRING)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> SYM VAL SYM VAL ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">let</span> VARLIST BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">let*</span> VARLIST BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">lambda</span> ARGS [DOCSTRING] [INTERACTIVE] BODY)</span></span><br><span class="line"><span class="list">(<span class="keyword">progn</span> BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">if</span> COND THEN ELSE...)</span></span><br><span class="line"><span class="list">(<span class="keyword">cond</span> CLAUSES...)</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">unless</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">or</span> CONDITIONS ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">and</span> CONDITIONS ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">not</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> NUMBER)</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div></li>
</ul>
</div>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(002):记录X分钟速成ELisp]]></title>
      <url>http://yyangdid.github.io/2017/01/01/%E5%AD%A6%E4%B9%A0ELisp/2017-01-01.%E5%AD%A6%E4%B9%A0ELisp(002):%E8%AE%B0%E5%BD%95X%E5%88%86%E9%92%9F%E9%80%9F%E6%88%90ELisp/</url>
      <content type="html"><![CDATA[

<blockquote>
<p>
学习 <a href="https://learnxinyminutes.com/" target="_blank" rel="external">X分钟速成Y</a> 系列之 <a href="https://learnxinyminutes.com/docs/elisp/" target="_blank" rel="external">elisp</a> 版本（官方中文版：<a href="https://learnxinyminutes.com/docs/zh-cn/elisp-cn/" target="_blank" rel="external">elisp</a>）。
</p>
</blockquote>
<a id="more"></a>
<ul class="org-ul">
<li>ELisp是由符号表达式构成的（即 <code>s-表达式</code> 或 <code>s式</code> ）， <code>s-表达式</code> 两侧由括号 <code>()</code> 包围，一个 <code>s-表达式</code> 可以包含 <code>原子符号</code> 和 <code>其他的 s-表达式</code> 。</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; ELisp &#20351;&#29992;&#20998;&#21495;&#34920;&#31034;&#26412;&#34892;&#27880;&#37322;&#24320;&#22987;</span></span><br><span class="line"><span class="comment">;; &#25226;&#20809;&#26631;&#25918;&#22312;&#21491;&#20391;&#23567;&#25324;&#21495;&#21518;&#38754;&#65292;&#25353;&#19979;&#32452;&#21512;&#38190;C-x C-e &#21487;&#22312; minibuffer &#26174;&#31034;&#35745;&#31639;&#32467;&#26524;</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="number">2</span>)</span><span class="comment">;; 3</span></span><br><span class="line"><span class="comment">;; &#22312;&#19978;&#38754;&#36825;&#20010; s-&#34920;&#36798;&#24335; &#20013;&#21253;&#21547;&#20004;&#20010;&#21407;&#23376;&#31526;&#21495; 1 &#21644; 2&#65292;&#24847;&#24605;&#26159;&#23545; 1 &#21644; 2 &#36827;&#34892;&#30456;&#21152;</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="list">(<span class="keyword">+</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span><span class="comment">;; 6</span></span><br><span class="line"><span class="comment">;; &#19978;&#38754;&#30340; s-&#34920;&#36798;&#24335; &#26159;&#30001;&#21407;&#23376;&#31526;&#21495; 1 &#21644;&#21478;&#22806;&#19968;&#20010; s-&#34920;&#36798;&#24335; (+ 2 3) &#32452;&#25104;&#30340;</span></span><br><span class="line"><span class="comment">;; &#22312;&#36827;&#34892;&#27714;&#20540;&#35745;&#31639;&#30340;&#26102;&#20505;&#20808;&#23545; (+ 2 3) &#36827;&#34892;&#27714;&#20540;&#65292;&#24471;&#20986;&#32467;&#26524; x&#65292;&#28982;&#21518;&#22312;&#35745;&#31639; (+ 1 x) &#30340;&#20540;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>setq</code> 可以给一个变量进行赋值</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#32473; my-name &#36827;&#34892;&#36171;&#20540;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> my-name <span class="string">"Emacs"</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312; minibuffer &#26174;&#31034; "Emacs"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>insert</code> 可以在光标处插入字符串</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#22312;&#20809;&#26631;&#22788;&#25554;&#20837;&#23383;&#31526;&#20018;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"Lisp"</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312;&#20809;&#26631;&#22788;&#25554;&#20837; Lisp</span></span><br><span class="line"><span class="comment">;; &#21487;&#20197;&#32473; insert &#20256;&#20837;&#22810;&#20010;&#21442;&#25968;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"Emacs"</span> <span class="string">"-lisp"</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312;&#20809;&#26631;&#22788;&#25554;&#20837; Emacs-Lisp</span></span><br><span class="line"><span class="comment">;; insert&#30340;&#21442;&#25968;&#21487;&#20197;&#26159;&#21464;&#37327;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"I am using "</span> my-name)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312;&#20809;&#26631;&#22788;&#25554;&#20837; I am using Emacs</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>可以把 <code>s-表达式</code> 嵌入到 <code>函数</code> 中</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#23450;&#20041;&#19968;&#20010;&#20989;&#25968; hello()&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello<span class="list">()</span> <span class="list">(<span class="keyword">insert</span> <span class="string">"I am using "</span> my-name)</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312; minibuffer &#36755;&#20986; hello</span></span><br><span class="line"><span class="comment">;; &#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312;&#20809;&#26631;&#22788;&#25554;&#20837; I am using Emacs</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>带参数的函数</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#23450;&#20041;&#24102;&#21442;&#25968; name &#30340;&#20989;&#25968;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span> <span class="list">(<span class="keyword">insert</span> <span class="string">"Hello "</span> name)</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312; minibuffer &#36755;&#20986; hello</span></span><br><span class="line"><span class="comment">;; &#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#65292;&#25226;&#23383;&#31526;&#20018; "Elisp" &#20316;&#20026;&#21442;&#25968;&#20256;&#36827;&#21435;&#65306;</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"Elisp"</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#22312;&#20809;&#26631;&#22788;&#25554;&#20837; Hello Elisp</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>分割切换窗口</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#20250;&#20998;&#21106;&#20986;&#21478;&#22806;&#19968;&#20010;&#31383;&#21475;&#26469;&#26174;</span></span><br><span class="line">                                           <span class="comment">;; &#31034; *scratch* &#36825;&#20010;buffer&#65292;&#19988;&#20809;&#26631;&#20301;</span></span><br><span class="line">                                           <span class="comment">;; &#20110; *scratch* &#20013;&#65292;&#20351;&#29992; C-x o &#22312;&#21508;&#20010;</span></span><br><span class="line">                                           <span class="comment">;; &#31383;&#21475;&#20013;&#36339;&#36716;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>progn</code> 可以将 <code>s-表达式</code> 结合起来，所包含的 <code>s-表达式</code> 会依次执行</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span> <span class="string">"Emacs World"</span>)</span>)</span><span class="comment">;; &#27492;&#22788;&#25191;&#34892;&#65292;&#20250;&#20998;&#21106;&#20986;&#21478;&#22806;&#19968;&#20010;&#31383;&#21475;&#26469;&#26174;&#31034; *scratch* &#65292;&#24182;&#22312;</span></span><br><span class="line">                        <span class="comment">;; *scratch* &#20013;&#26174;&#31034; Hello Emacs World</span></span><br><span class="line">  <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>擦除 buffer 里面的内容</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span><span class="comment">;; &#20998;&#21106;&#24182;&#20999;&#25442;&#21040; *scratch* buffer</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span><span class="comment">;; &#25830;&#38500; *scratch* buffer &#37324;&#38754;&#30340;&#20869;&#23481;</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span>)</span>)</span><span class="comment">;; &#25191;&#34892; hello &#20989;&#25968;</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span><span class="comment">;; &#20999;&#25442;&#21040;&#31383;&#26684; 1</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 let() 把一个值和一个局部变量绑定</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">local-name</span> <span class="string">"you"</span>)</span>)</span><span class="comment">;; &#22312;&#19968;&#23450;&#31243;&#24230;&#19978; let &#21487;&#20197;&#20195;&#26367; progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span> local-name)</span></span><br><span class="line">  <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>格式化字符串</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\n"</span> <span class="string">"elisp"</span>)</span><span class="comment">;; %s &#26159;&#23383;&#31526;&#20018;&#21344;&#20301;&#31526;&#65292;&#27492;&#22788;&#34987; "elisp" &#20195;&#26367;, \n &#26159;&#25442;&#34892;&#31526;</span></span><br><span class="line"><span class="comment">;; &#20351;&#29992;&#26684;&#24335;&#21270;&#37325;&#20889;&#19978;&#38754;&#30340; hello () &#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\n"</span> name)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"KuGou"</span>)</span><span class="comment">;; &#35843;&#29992;&#20989;&#25968;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; &#26032;&#24314;&#19968;&#20010; greeting &#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="string">"Dave"</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">                    name</span><br><span class="line">                    your-name)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>和用户交互的函数</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span></span><br><span class="line"><span class="comment">;; &#37325;&#20889; greeting &#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">from-name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">                    from-name</span><br><span class="line">                    your-name)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;; &#20877;&#37325;&#20889; greeting &#20989;&#25968;&#65292;&#35753;&#32467;&#26524;&#22312;&#21478;&#22806;&#30340;&#31383;&#21475;&#20013;&#26174;&#31034;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">from-name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">                    from-name</span><br><span class="line">                    your-name)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>列表</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#23450;&#20041;&#21015;&#34920;&#65292;&#32473;&#21015;&#34920;&#36171;&#20540;</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> list-of-name <span class="quoted">'(<span class="string">"Firefox"</span> <span class="string">"Chrome"</span> <span class="string">"Opera"</span>)</span>)</span></span><br><span class="line"><span class="comment">;; &#33719;&#21462;&#21015;&#34920;&#30340;&#31532;&#19968;&#20010;&#20540;,&#27809;&#26377;&#21103;&#20316;&#29992;&#65292;&#19981;&#20250;&#25913;&#21464;&#21015;&#34920;</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; &#33719;&#21462;&#21015;&#34920;&#21097;&#20313;&#30340;&#25152;&#26377;&#20540;,&#27809;&#26377;&#21103;&#20316;&#29992;&#65292;&#19981;&#20250;&#25913;&#21464;&#21015;&#34920;</span></span><br><span class="line"><span class="list">(<span class="keyword">cdr</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; &#25226;&#19968;&#20010;&#20540;&#28155;&#21152;&#21040;&#21015;&#34920;&#30340;&#24320;&#22836;&#65292;&#20250;&#30452;&#25509;&#23545;&#21015;&#34920;&#26412;&#36523;&#36827;&#34892;&#25805;&#20316;</span></span><br><span class="line"><span class="list">(<span class="keyword">push</span> <span class="string">"Vivaldi"</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; &#25226;&#21015;&#34920;&#20013;&#30340;&#27599;&#19968;&#20010;&#20803;&#32032;&#20316;&#20026;&#21442;&#25968;&#20381;&#27425;&#20256;&#32473; hello() &#20989;&#25968;</span></span><br><span class="line"><span class="list">(<span class="keyword">mapcar</span> <span class="quoted">'hello</span> list-of-name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; &#25913;&#36827; greeting() &#20989;&#25968;&#65292;&#23545;&#21015;&#34920;&#20013;&#30340;&#25152;&#26377;&#20803;&#32032;&#37117;&#34987; hello() &#20989;&#25968;&#35843;&#29992;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">()</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">mapcar</span> <span class="quoted">'hello</span> list-of-names)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>查找和替换</li>
</ul>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; &#25226; *ttt* buffer &#20013;&#30340;&#25152;&#26377; Hello &#26367;&#25442;&#20026; Hi</span></span><br><span class="line"><span class="comment">;; (goto-char (point-min)) &#25226;&#20809;&#26631;&#31227;&#21040; buffer &#24320;&#22836;</span></span><br><span class="line"><span class="comment">;; (search-forward "Hello") &#26597;&#25214;&#23383;&#31526;&#20018; "Hello"</span></span><br><span class="line"><span class="comment">;; (while x y) &#24403; x &#36820;&#22238;&#26576;&#20010;&#20540;&#26102;&#25191;&#34892; y&#65292;&#24403; x &#36820;&#22238; nil(&#31354;)&#26102;&#25512;&#20986;&#24490;&#29615;</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> replace-hello-by-hi <span class="list">()</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">goto-char</span> <span class="list">(<span class="keyword">point-min</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">while</span> <span class="list">(<span class="keyword">search-forward</span> <span class="string">"Hello"</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">replace-match</span> <span class="string">"Hi"</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">replace-hello-by-hi</span>)</span></span><br><span class="line"><span class="comment">;; &#19978;&#38754;&#20989;&#25968;&#26367;&#25442;&#25104;&#21151;&#65292;&#20294;&#20250;&#25253;&#38169;&#65306;"Search failed: Hello"&#12290;&#22914;&#26524;&#35201;&#36991;&#20813;&#36825;&#20010;&#38169;&#35823;, &#38656;&#35201;</span></span><br><span class="line"><span class="comment">;; &#21578;&#35785; `search-forward' &#36825;&#20010;&#21629;&#20196;&#26159;&#21542;&#22312; buffer &#30340;&#26576;&#20010;&#22320;&#26041;&#20572;&#27490;&#26597;&#25214;, &#24182;&#19988;&#22312;&#20160;&#20040;&#37117;</span></span><br><span class="line"><span class="comment">;; &#27809;&#25214;&#21040;&#26102;&#26159;&#21542;&#24212;&#35813;&#19981;&#32473;&#20986;&#38169;&#35823;&#25552;&#31034;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; &#20351;&#29992; (search-forward "Hello" nil t) &#21363;&#21487;</span></span><br><span class="line"><span class="comment">;; &#21442;&#25968; nil &#34920;&#31034;&#19981;&#38480;&#20110;&#26576;&#20010;&#33539;&#22260;</span></span><br><span class="line"><span class="comment">;; &#21442;&#25968; t &#34920;&#31034;&#24403;&#20160;&#20040;&#37117;&#27809;&#25214;&#21040;&#26102;&#19981;&#32473;&#20986;&#38169;&#35823;&#25552;&#31034;</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(001):HelloWorld]]></title>
      <url>http://yyangdid.github.io/2016/12/27/%E5%AD%A6%E4%B9%A0ELisp/2016-12-27.%E5%AD%A6%E4%B9%A0ELisp(001):HelloWorld/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org40d56bd">1. 学习材料</a></li>
<li><a href="#org757346d">2. Hello World 例子</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
开始抽时间学习下 ELisp，毕竟想用好 Emacs 的话，ELisp必须得会。本篇主要声明了学习材
料的来源、用到的资料，在以后的记录中就不做重复的资料来源介绍了。当然，和学习其他
语言一样，先来个Hello World ^V^
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org40d56bd" class="outline-2">
<h2 id="org40d56bd"><span class="section-number-2">1</span> 学习材料</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://learnxinyminutes.com/docs/elisp/" target="_blank" rel="external">Learn X in Y minutes</a>
中文版：<a href="https://learnxinyminutes.com/docs/zh-cn/elisp-cn/" target="_blank" rel="external">官方中文版</a></li>
<li><a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a></li>
</ul>
</div>
</div>
<div id="outline-container-org757346d" class="outline-2">
<h2 id="org757346d"><span class="section-number-2">2</span> Hello World 例子</h2>
<div class="outline-text-2" id="text-2">
<p>
elisp代码文件不能作为一个单独的可执行文件运行，所有的 ELisp 代码都是在 Emacs 软件下
运行的。
</p>

<p>
切换到 <code>*scratch*</code> 这个buffer内，如果当前模式不是 <code>lisp-interaction-mode</code> ，那么
使用 <code>M-x lisp-interaction-mode</code> 切换到 <code>lisp-interaction-mode</code> 模式。
</p>

<p>
在 <code>*scratch*</code> buffer内输入代码：
</p>
<div class="org-src-container">
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">message</span> <span class="string">"Hello World"</span>)</span></span><br></pre></td></tr></table></figure>
</div>
<p>
把光标放到右括号的后面，按下 <code>C-j</code> 组合键，此时在 <code>*scratch*</code> 的代码后面输出了
<code>"Hello World"</code> ，并且在 minibuffer 也显示了 <code>Hello World</code> ，说明代码运行成功了。
或者使用组合键 <code>C-x C-e</code> ，这样只会在 minibuffer 显示 <code>"Hello World"</code> ，此组合键使
全局的，即使没有开启 <code>lisp-interaction-mode</code> 也能使用。
</p>
</div>
</div>

Last Updated 2017-02-21 Tue 20:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
            <category> ELisp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
            <tag> ELisp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习vimtutor、gvimtutor重点记录]]></title>
      <url>http://yyangdid.github.io/2016/12/24/2016-12-24.%E5%AD%A6%E4%B9%A0vimtutor%E3%80%81gvimtutor%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org40466be">1. 如何打开 vimtutor、gvimtutor</a>
<ul>
<li><a href="#org9714662">1.1. 使用终端打开</a>
<ul>
<li><a href="#org6aea26b">1.1.1. 打开 vimtutor</a></li>
<li><a href="#org1e870d6">1.1.2. 打开 gvimtutor</a></li>
</ul>
</li>
<li><a href="#org0e84d8a">1.2. 在 gvim 中打开</a></li>
</ul>
</li>
<li><a href="#org33f6f5f">2. 常用按键</a>
<ul>
<li><a href="#org9e124dd">2.1. 移动</a></li>
<li><a href="#orgd2ce2df">2.2. 进入插入模式</a></li>
<li><a href="#org3552a05">2.3. 保存、退出</a></li>
<li><a href="#org6479d93">2.4. 删除</a></li>
<li><a href="#org1f02613">2.5. 复制、粘贴</a></li>
<li><a href="#orgffe8f02">2.6. 修改、替换</a></li>
<li><a href="#org4bc27b5">2.7. 撤销</a></li>
<li><a href="#orgf0197b7">2.8. 搜索</a></li>
<li><a href="#orgd695254">2.9. 调整文本位置</a></li>
<li><a href="#org3225dcd">2.10. 保存</a></li>
<li><a href="#org322c062">2.11. 执行外部命令</a></li>
<li><a href="#orgef7a763">2.12. 提取、合并文件</a></li>
<li><a href="#orgd55fdcd">2.13. 信息、帮助命令</a></li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
vimtutor 和 gvimtutor 是 Vim 和 GVim 官方的简单教程，主要介绍了 Vim 和 GVim 在编
辑时一些常用的按键，一些术语的说明。vimtutor 和 gvimtutor 是相同的，vimtutor 是
在终端下，gvimtutor 是在 GUI 下，因为此文件是只读文件，所以在此文件中可以随意测
试、更改。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org40466be" class="outline-2">
<h2 id="org40466be"><span class="section-number-2">1</span> 如何打开 vimtutor、gvimtutor</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-org9714662" class="outline-3">
<h3 id="org9714662"><span class="section-number-3">1.1</span> 使用终端打开</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-org6aea26b" class="outline-4">
<h4 id="org6aea26b"><span class="section-number-4">1.1.1</span> 打开 vimtutor</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
执行 <code>vimtutor</code> 命令即可，此命令不会另外开启窗口，直接在终端里。可能有些按键
会被终端占用，所以此方法不建议使用。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-18-22.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
<div id="outline-container-org1e870d6" class="outline-4">
<h4 id="org1e870d6"><span class="section-number-4">1.1.2</span> 打开 gvimtutor</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
执行 <code>gvimtutor</code> 命令即可，会开启 gvim 窗口，推荐。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-29-24.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org0e84d8a" class="outline-3">
<h3 id="org0e84d8a"><span class="section-number-3">1.2</span> 在 gvim 中打开</h3>
<div class="outline-text-3" id="text-1-2">
<p>
在 gvim 中输入 <code>:e $VIMRUNTIME/tutor/tutor.zh_cn.utf-8</code> 即可,推荐。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-37-05.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org33f6f5f" class="outline-2">
<h2 id="org33f6f5f"><span class="section-number-2">2</span> 常用按键</h2>
<div class="outline-text-2" id="text-2">
<blockquote>
<ul class="org-ul">
<li><code>()</code> 表示模式，例如 <code>(N)</code> 表示 <code>Normal</code> 模式。
<ul class="org-ul">
<li><code>N</code> <b>Normal</b> 正常模式</li>
<li><code>V</code> <b>Visual</b> 可视模式</li>
</ul></li>
<li><code>[]</code> 表示可选， <code><></code> 表示必选。例如 <code>[n]</code> 表示可选到输入数字， <code><n></n></code> 表示必选
输入数字。
<ul class="org-ul">
<li><code>n</code> <b>number</b> 数字</li>
<li><code>e</code> <b>Enter</b> 回车</li>
<li><code>s</code> <b>string</b> 字符串</li>
<li><code>sold</code> <b>string-old</b> 旧字符串，配合 <code>snew</code> 使用</li>
<li><code>snew</code> <b>string-new</b> 新字符串，配合 <code>sold</code> 使用</li>
<li><code>sh</code> <b>shell</b> shell命令</li>
<li><code>f</code> <b>filename</b> 文件名</li>
</ul></li>
</ul>
</blockquote>
</div>
<div id="outline-container-org9e124dd" class="outline-3">
<h3 id="org9e124dd"><span class="section-number-3">2.1</span> 移动</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><code>(N)[n]l</code> 向右移动</li>
<li><code>(N)[n]h</code> 向左移动</li>
<li><code>(N)[n]k</code> 向上移动</li>
<li><code>(N)[n]j</code> 向下移动</li>
<li><code>(N)0</code> 光标移动到行首，包括空格</li>
<li><code>(N)^</code> 光标移动到行首字符</li>
<li><code>(N)$</code> 光标移动到行尾</li>
<li><code>(N)[n]w</code> 跳转到右侧单词首字母</li>
<li><code>(N)[n]e</code> 若光标当前在单词词尾，跳转到右侧单词词尾，否则跳转到当前单词词尾</li>
<li><code>(N)[n]b</code> 跳转到单词首字母</li>
<li><code>(N)<n>G</n></code> 跳转到第 <code><n></n></code> 行</li>
<li><code>(N)G</code> 跳转到文件最后一行行尾</li>
<li><code>(N)gg</code> 跳转到文件第一行行首</li>
</ul>
</div>
</div>
<div id="outline-container-orgd2ce2df" class="outline-3">
<h3 id="orgd2ce2df"><span class="section-number-3">2.2</span> 进入插入模式</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li><code>(N)i</code> 在光标所在字符后进入插入模式</li>
<li><code>(N)I</code> 在当前行首进入插入模式</li>
<li><code>(N)a</code> 在光标所在字符前进入插入模式</li>
<li><code>(N)A</code> 在当前行尾进入插入模式</li>
<li><code>(N)o</code> 在当前行下面插入一行进入插入模式</li>
<li><code>(N)O</code> 在当前行上面插入一行进入插入模式</li>
</ul>
</div>
</div>
<div id="outline-container-org3552a05" class="outline-3">
<h3 id="org3552a05"><span class="section-number-3">2.3</span> 保存、退出</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li><code>(N):w</code> 保存当前文件</li>
<li><code>(N):q</code> 退出 vim、gvim</li>
<li><code>(N):wq</code> 保存当前文件并退出 vim、gvim</li>
<li><code>(N):q!</code> 强制退出，放弃所有改动</li>
</ul>
</div>
</div>
<div id="outline-container-org6479d93" class="outline-3">
<h3 id="org6479d93"><span class="section-number-3">2.4</span> 删除</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li><code>(N)[n]x</code> 删除光标所在的字符</li>
<li><code>(N)d[n]w</code> 从光标处删除至下一个单词词首，包括两个词之间的空格，但不包括后一个
词的首字符</li>
<li><code>(N)d[n]e</code> 从光标处删除至词尾，不包括空格</li>
<li><code>(N)d$</code> 从光标处删除至行尾</li>
<li><code>(N)D</code> 同 <code>(N)d$</code></li>
<li><code>(N)[n]dd</code> 删除当前行</li>
</ul>
</div>
</div>
<div id="outline-container-org1f02613" class="outline-3">
<h3 id="org1f02613"><span class="section-number-3">2.5</span> 复制、粘贴</h3>
<div class="outline-text-3" id="text-2-5">
<ul class="org-ul">
<li><code>(V)y</code> 复制选中的文本</li>
<li><code>(N)y[n]w</code> <code>(N)y[n]e</code> <code>(N)y[n]l</code> <code>(N)y$</code> 等等</li>
<li><code>(N)[n]p</code> 对于字符串是粘贴到当前光标的后面，对于行是粘贴到下一行</li>
<li><code>(N)[n]P</code> 对于字符串是粘贴到当前光标的前面，对于行是粘贴到上一行</li>
</ul>
</div>
</div>
<div id="outline-container-orgffe8f02" class="outline-3">
<h3 id="orgffe8f02"><span class="section-number-3">2.6</span> 修改、替换</h3>
<div class="outline-text-3" id="text-2-6">
<ul class="org-ul">
<li><code>(N)r</code> 修改光标下的单个字符</li>
<li><code>(N)R</code> 修改从光标开始的字符序列</li>
<li><code>(N)cw</code> 从光标处删除至词尾，不包括空格，并进入插入模式</li>
<li><code>(N)ce</code> 同 <code>(N)cw</code></li>
<li><code>(N)c$</code> 从光标处删除至行尾，并进入插入模式</li>
<li><code>(N)C</code> 同 <code>(N)c$</code></li>
<li><code>(N)cc</code> 删除整行文本，并进入插入模式</li>
<li><code>(N)~</code> 反转光标所在字符的大小写</li>
<li><code>(N):s/<sold>/<snew><e></e></snew></sold></code> 将光标所在行的第一个 <code><sold></sold></code> 替换为 <code><snew></snew></code></li>
<li><code>(N):s/<sold>/<snew>/g<e></e></snew></sold></code> 将光标所在行的所有 <code><sold></sold></code> 替换为 <code><snew></snew></code></li>
<li><code>(N):<n1>,<n2>s/<sold>/<snew>/g</snew></sold></n2></n1></code> 将 <code><n1></n1></code> 行至 <code><n2></n2></code> 行之间的所有 <code><sold></sold></code>
替换为 <code><snew></snew></code></li>
<li><code>(N):%s/<sold>/<snew>/g</snew></sold></code> 将整个文件中的 <code><sold></sold></code> 替换为 <code><snew></snew></code></li>
<li><code>(N):%s/<sold>/<snew>/gc</snew></sold></code> 将整个文件中的 <code><sold></sold></code> 进行匹配，并询问是否替换为
<code><snew></snew></code></li>
</ul>
</div>
</div>
<div id="outline-container-org4bc27b5" class="outline-3">
<h3 id="org4bc27b5"><span class="section-number-3">2.7</span> 撤销</h3>
<div class="outline-text-3" id="text-2-7">
<ul class="org-ul">
<li><code>(N)[n]u</code> undo，撤销最后执行的命令</li>
<li><code>(N)U</code> undo，撤销对整行的修改</li>
<li><code>(N)[n]CTRL-R</code> redo,即撤销undo。撤销掉撤销命令，恢复操作前的状态，可多次输入</li>
</ul>
</div>
</div>
<div id="outline-container-orgf0197b7" class="outline-3">
<h3 id="orgf0197b7"><span class="section-number-3">2.8</span> 搜索</h3>
<div class="outline-text-3" id="text-2-8">
<ul class="org-ul">
<li><code>(N)/<s><e></e></s></code> 查找字符串 <code><s></s></code> ， <code>n</code> 查找下一个匹配， <code>N</code> 查找上一个匹配</li>
<li><code>(N)?<s><e></e></s></code> 逆向查找字符串</li>
<li><code>(N)CTRL-o</code> 回退到之前的位置，可多次输入</li>
<li><code>(N)CTRL-i</code> 回退到较新的位置</li>
<li><code>(N)%</code> 光标放在配对的括号处按下此组合键可跳转到匹配的括号处</li>
</ul>
</div>
</div>
<div id="outline-container-orgd695254" class="outline-3">
<h3 id="orgd695254"><span class="section-number-3">2.9</span> 调整文本位置</h3>
<div class="outline-text-3" id="text-2-9">
<ul class="org-ul">
<li><code>(N):ce<e></e></code> 使本行内容居中（center）</li>
<li><code>(N):ri<e></e></code> 使本行内容居右（right）</li>
<li><code>(N):le<e></e></code> 使本行内容居左（left）</li>
</ul>
</div>
</div>
<div id="outline-container-org3225dcd" class="outline-3">
<h3 id="org3225dcd"><span class="section-number-3">2.10</span> 保存</h3>
<div class="outline-text-3" id="text-2-10">
<ul class="org-ul">
<li><code>(N):w [f]<e></e></code> 保存当前buffer到 <code>f</code> 文件</li>
<li><code>(V):w [f]<e></e></code> 保存选中的文本到 <code>f</code> 文件，当按下 <code>:</code> 后，在minibuffer会显示
<code>'<,'></,'></code> 此时再输入 <code>w [f]</code></li>
</ul>
</div>
</div>
<div id="outline-container-org322c062" class="outline-3">
<h3 id="org322c062"><span class="section-number-3">2.11</span> 执行外部命令</h3>
<div class="outline-text-3" id="text-2-11">
<ul class="org-ul">
<li><code>(N):!<sh><e></e></sh></code> 执行外部shell命令，例如： <i>:!dir</i></li>
</ul>
</div>
</div>
<div id="outline-container-orgef7a763" class="outline-3">
<h3 id="orgef7a763"><span class="section-number-3">2.12</span> 提取、合并文件</h3>
<div class="outline-text-3" id="text-2-12">
<ul class="org-ul">
<li><code>(N):r <f><e></e></f></code> 在光标所在行的下一行插入 <code>f</code> 文件的所有内容</li>
<li><code>(N):r !<sh><e></e></sh></code> 在光标所在行的下一行插入 <code>sh</code> 命令的输出内容</li>
</ul>
</div>
</div>
<div id="outline-container-orgd55fdcd" class="outline-3">
<h3 id="orgd55fdcd"><span class="section-number-3">2.13</span> 信息、帮助命令</h3>
<div class="outline-text-3" id="text-2-13">
<ul class="org-ul">
<li><code>(N)CTRL-G</code> 在minibuffer显示光标所在行的位置及文件状态</li>
<li><code>(N):help<e></e></code> 打开帮助</li>
<li><code>(N):help <s><e></e></s></code> 打开关于 <code>s</code> 主题的帮助文件</li>
</ul>
<blockquote>
<p>
打开帮助文件后使用 <code>CTRL-w CTRL-w</code> 在窗口之间跳转
</p>

<p>
使用 <code>(N):q<e></e></code> 关闭帮助窗口
</p>

<p>
在帮助文件中使用 <code>CTRL-]</code> 跳转到光标所在标签的主题帮助，使用 <code>CTRL-t</code> 或
<code>CTRL-o</code> 跳回
</p>
</blockquote>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:35.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习emacs-tutorial重点记录]]></title>
      <url>http://yyangdid.github.io/2016/12/24/2016-12-24.%E5%AD%A6%E4%B9%A0emacs-tutorial%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org14b7a80">1. 如何打开 emacs tutorial</a>
<ul>
<li><a href="#org3e6f1f8">1.1. 用鼠标</a></li>
<li><a href="#org0dee4be">1.2. 使用组合键</a></li>
</ul>
</li>
<li><a href="#orgc53ead9">2. 常用组合键</a></li>
<li><a href="#orgc13c8a7">3. 术语对照</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
emacs tutorial 是 Emacs 官方的快速指南，主要介绍了 Emacs 在编辑时一些常用的组合
按键，一些术语的说明。因为此文件是只读文件，所以在此文件中可以随意测试、更改。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org14b7a80" class="outline-2">
<h2 id="org14b7a80"><span class="section-number-2">1</span> 如何打开 emacs tutorial</h2>
<div class="outline-text-2" id="text-1">
<p>
这里介绍在 emacs 中两种打开 tutorial 的方式（都是指在 <code>图形界面</code> 的 emacs 中）。
</p>
</div>
<div id="outline-container-org3e6f1f8" class="outline-3">
<h3 id="org3e6f1f8"><span class="section-number-3">1.1</span> 用鼠标</h3>
<div class="outline-text-3" id="text-1-1">
<p>
打开 emacs 后会显示一些简单的信息，例如 emacs logo、版本、一些链接等信息。
使用鼠标点击 <code>Emacs Tutorial</code> 链接就会打开 emacs 快速指南了。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习emacs-tutorial重点记录/1_2016-12-24_13-37-05.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
<div id="outline-container-org0dee4be" class="outline-3">
<h3 id="org0dee4be"><span class="section-number-3">1.2</span> 使用组合键</h3>
<div class="outline-text-3" id="text-1-2">
<p>
使用组合键 <code>C-h t</code> （按住 <code>Ctrl</code> 键，按 <code>h</code> 键，然后同时松开，再按 <code>t</code> 键，
<code>t</code> 代表 <code>tutorial</code> ） 打开 tutorial。
</p>
</div>
</div>
</div>
<div id="outline-container-orgc53ead9" class="outline-2">
<h2 id="orgc53ead9"><span class="section-number-2">2</span> 常用组合键</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><code>C-v</code>     向下滚动一页（等效按键： <b>PageUp</b> ）</li>
<li><code>M-v</code>     向上滚动一页（等效按键： <b>PageDn</b> ）</li>
<li><code>C-l</code>     重绘屏幕，将光标所在行置于屏幕中间行</li>
<li><code>C-p</code>     光标向上一行（p 代表 previous，等效按键： <b>Up</b> ）</li>
<li><code>C-n</code>     光标向下一行（n 代表 next，等效按键： <b>Down</b> ）</li>
<li><code>C-f</code>     光标向前一个字符（f 代表 forward，等效按键： <b>Right</b> ）</li>
<li><code>M-f</code>     光标向前一个词</li>
<li><code>C-b</code>     光标向后一个字符（b 代表 backward，等效按键： <b>Left</b> ）</li>
<li><code>M-b</code>     光标向后一个词</li>
<li><code>C-a</code>     光标移动到行首</li>
<li><code>M-a</code>     光标移动到句首</li>
<li><code>C-e</code>     光标移动到行尾</li>
<li><code>M-e</code>     光标移动到句尾</li>
<li><code>M-<</code>     光标移动到文件首</li>
<li><code>M-></code>     光标移动到文件尾</li>
<li><code><delback></delback></code> 删除（delete）光标前的一个字符</li>
<li><code>C-d</code>       删除（delete）光标后的一个字符</li>
<li><code>M-<delback></delback></code> 移除（kill）光标前的一个词</li>
<li><code>M-d</code>         移除（kill）光标后的一个词</li>
<li><code>C-k</code>         移除（kill）从光标到行尾之间的所有字符</li>
<li><code>M-k</code>         移除（kill）从光标到句尾之间的所有字符</li>
<li><code>C-SPC</code>       开始选择</li>
<li><code>C-@</code>         开始选择</li>
<li><code>C-w</code>         剪切（kill）</li>
<li><code>M-w</code>         复制</li>
<li><code>C-y</code>         召回（yank），粘贴</li>
<li><code>M-y</code>         循环选择召回（yank），粘贴</li>
<li><code>C-x u</code>       撤销</li>
<li><code>C-_</code>         撤销</li>
<li><code>C-u 4 C-f</code> 光标向前移动 4 个字符</li>
<li><code>C-u 4 C-v</code> 向下滚动 4 行</li>
<li><code>C-u 4 %</code>   会插入 4 个%，即：%%%%</li>
<li><code>C-g</code>     终止命令</li>
<li><code>C-x 1</code>   关闭其他窗格</li>
<li><code>C-x C-f</code> 打开文件</li>
<li><code>C-x C-s</code> 保存文件</li>
<li><code>C-x C-b</code> 列出缓冲区</li>
<li><code>C-x s</code>   保存所有缓冲区文件</li>
<li><code>C-x C-c</code> 关闭 Emacs</li>
<li><code>M-q</code>     段落排版</li>
<li><code>C-s</code>     搜索</li>
<li><code>C-x 2</code>   在下方划分一个窗格</li>
<li><code>C-x 3</code>   在右方划分一个窗格</li>
<li><code>C-M-v</code>   光标到下一个窗格</li>
<li><code>C-M-S-v</code> 光标到上一个窗格</li>
<li><code>C-x o</code>   光标到其他窗格</li>
<li><code>C-x 4 C-f</code> 在下方划分一个窗格并打开文件</li>

<li><code>C-h c $$$-$</code> 查看组合键 <b>$$$-$</b> 的简要说明信息</li>
<li><code>C-h k $$$-$</code> 查看组合键 <b>$$$-$</b> 的详细说明信息</li>
<li><code>C-h f</code>   查看函数说明</li>
<li><code>C-h v</code>   查看变量说明</li>
<li><code>C-h a</code>   搜索相关命令</li>
<li><code>C-h i</code>   打开联机手册（ <code>m emacs <return></return></code> 可阅读 emacs 使用手册， <code>?</code> 可阅读 Info 使用指南）</li>
</ul>
</div>
</div>
<div id="outline-container-orgc13c8a7" class="outline-2">
<h2 id="orgc13c8a7"><span class="section-number-2">3</span> 术语对照</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><code>command</code> 命令</li>
<li><code>cursor</code>  光标</li>
<li><code>scrolling</code> 滚动</li>
<li><code>numeric argument</code> 数字参数</li>
<li><code>window</code> 窗格</li>
<li><code>frame</code>  窗口</li>
<li><code>insert</code> 插入</li>
<li><code>delete</code> 删除（不可恢复）</li>
<li><code>kill</code> 移除（可召回）</li>
<li><code>yank</code> 召回</li>
<li><code>undo</code> 撤销</li>
<li><code>file</code> 文件</li>
<li><code>buffer</code> 缓冲区</li>
<li><code>minibuffer</code> 小缓冲区</li>
<li><code>echo area</code> 回显区</li>
<li><code>mode line</code> 状态栏</li>
<li><code>search</code> 搜索</li>
<li><code>incremental search</code> 渐进式搜索</li>
</ul>
</div>
</div>

Last Updated 2017-02-21 Tue 20:35.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux下安装Clang+LLVM（openSUSE Leap 42.2）]]></title>
      <url>http://yyangdid.github.io/2016/12/19/2016-12-19.%E5%9C%A8Linux%E4%B8%8B%E5%AE%89%E8%A3%85Clang+LLVM%EF%BC%88openSUSE%20Leap%2042.2%EF%BC%89/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org6b1da57">1. 下载</a></li>
<li><a href="#org89c41d1">2. 安装</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
在 Linux 下安装 Clang+LLVM（预编译版本）。测试系统为 openSUSE Leap 42.2。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org6b1da57" class="outline-2">
<h2 id="org6b1da57"><span class="section-number-2">1</span> 下载</h2>
<div class="outline-text-2" id="text-1">
<p>
进入 <a href="http://releases.llvm.org/download.html" target="_blank" rel="external">http://releases.llvm.org/download.html</a> 下载，此时的最新版本为 <code>3.9.0</code> ，找
到 <code>Pre-Built Binaries:</code> 列表下的对应发行版的预编译版本，此处下载的为 openSUSE 版：
<a href="http://releases.llvm.org/3.9.0/clang+llvm-3.9.0-x86_64-opensuse13.2.tar.xz" target="_blank" rel="external">Clang for OpenSuSE 13.2 x86<sub>64</sub></a> 。
</p>
</div>
</div>
<div id="outline-container-org89c41d1" class="outline-2">
<h2 id="org89c41d1"><span class="section-number-2">2</span> 安装</h2>
<div class="outline-text-2" id="text-2">
<p>
解压 <code>clang+llvm-3.9.0-x86_64-opensuse13.2.tar.xz</code> 文件。
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xz <span class="operator">-d</span> clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span>.tar.xz</span><br><span class="line">tar -xvf clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span>.tar</span><br></pre></td></tr></table></figure>
</div>
<p>
得到 <code>clang+llvm-3.9.0-x86_64-opensuse13.2</code> 文件夹。
</p>

<p>
进入 <code>clang+llvm-3.9.0-x86_64-opensuse13.2</code> 文件夹：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span></span><br></pre></td></tr></table></figure>
</div>
<p>
将所有文件拷贝到 <code>/usr/local</code> 文件夹下：（获取 <code>su</code> 权限或使用 <code>sudo</code> 执行命令）
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -r * /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</div>
<p>
安装完成。
</p>

<p>
查看 clang 的版本：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang -v</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:35.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Clang </tag>
            
            <tag> LLVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种Git乱码解决办法]]></title>
      <url>http://yyangdid.github.io/2016/12/19/2016-12-18.%E5%90%84%E7%A7%8DGit%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgb16af63">1. 系统乱码</a></li>
<li><a href="#org3df30cc">2. 使用 git add 命令添加文件名称包含中文时乱码</a>
<ul>
<li><a href="#orgdc6d35a">2.1. 解决方法</a></li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
各种 Git 乱码解决办法。测试系统为 openSUSE Leap 42.2。
</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>
主要参考资料来自<a href="http://blog.csdn.net/kl222/article/details/32903495" target="_blank" rel="external">康林工作室-git 设置</a>和<a href="http://blog.csdn.net/yunnywu/article/details/50553908" target="_blank" rel="external">码农天注定-git 乱码解决方案汇总</a>
</p>
</blockquote>
<div id="outline-container-orgb16af63" class="outline-2">
<h2 id="orgb16af63"><span class="section-number-2">1</span> 系统乱码</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
修改之前建议备份 <code>~/.profile</code> 文件。
</p>
</blockquote>
<p>
把项目的字符编码统一设置为 <code>UTF-8</code> 。
</p>

<p>
设置系统语言为 <code>zh_CN.UTF-8</code> :
把 <code>export LANG=zh_CN.UTF-8</code> 添加到 <code>~/.profile</code> 文件中。
</p>

<p>
重新读取配置文件:
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>
</div>

<p>
查看当前用户系统编码：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">evn|grep LANG</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-org3df30cc" class="outline-2">
<h2 id="org3df30cc"><span class="section-number-2">2</span> 使用 git add 命令添加文件名称包含中文时乱码</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 git add 添加文件，如果文件名包含中文，显示如下：
</p>
<pre class="example">
273\223\273.txt
</pre>
</div>
<div id="outline-container-orgdc6d35a" class="outline-3">
<h3 id="orgdc6d35a"><span class="section-number-3">2.1</span> 解决方法</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li><p>
方法一：
执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
方法二：
修改 <code>~/.gitconfig</code> 文件如下：（如果没有此文件就新建一个)
</p>
<pre class="example">
[core]
	quotepath = false
</pre></li>
</ol>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:35.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Linux下安装 zlib（openSUSE Leap 42.2）]]></title>
      <url>http://yyangdid.github.io/2016/12/17/2016-12-17.%E5%9C%A8Linux%E4%B8%8B%E5%AE%89%E8%A3%85zlib%EF%BC%88openSUSE%20Leap%2042.2%EF%BC%89/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org1d69ce4">1. zlib 简介</a>
<ul>
<li><a href="#orga4010d7">1.1. 数据头(header)</a></li>
<li><a href="#orgc24e2cd">1.2. 算法</a></li>
<li><a href="#orgdc6b1f2">1.3. 使用资源</a></li>
<li><a href="#orgc554fec">1.4. 策略</a></li>
<li><a href="#orgc1a8dc9">1.5. 错误处理</a></li>
<li><a href="#org32b65f8">1.6. 数据长度</a></li>
<li><a href="#org98d4917">1.7. 业界应用</a></li>
</ul>
</li>
<li><a href="#org4a95f61">2. 安装 zlib</a>
<ul>
<li><a href="#orge62f5cb">2.1. 下载</a></li>
<li><a href="#orgce7c303">2.2. 解压</a></li>
<li><a href="#org374a63f">2.3. 配置安装</a>
<ul>
<li><a href="#org37da7dc">2.3.1. 标准配置安装（未测试，本人使用下面的自定义安装目录安装的）</a></li>
<li><a href="#org1f22392">2.3.2. 自定义安装目录安装</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
在 Linux 下安装 zlib，测试系统为 <code>openSUSE Leap 42.2</code> 。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-org1d69ce4" class="outline-2">
<h2 id="org1d69ce4"><span class="section-number-2">1</span> zlib 简介</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
参考<a href="http://baike.baidu.com/link?url=CVTE1oPyeITvhkxeeJaPIbZhozQgMj4nFZDbZ7PMyK11L-Ft_5efh_6FaL3cGaJ9KPtxleGi8Z1pdDxmhTCVga" target="_blank" rel="external">百度百科</a>
</p>
</blockquote>
<p>
zlib 是提供数据压缩用的函式库，由 Jean-loup Gailly 与 Mark Adler 所开发，初版
0.9 版在 1995 年 5 月 1 日发表，zlib 使用 DEFLATE 算法，最初是为 libpng 函式库所
写的，后来普遍为许多软件所使用。此函式库为自由软件，使用 zlib 授权。截至 2007 年
3 月，zlib 是包含在 Coverity 的美国国土安全部赞助者选择继续审查的开源项目。
</p>
</div>
<div id="outline-container-orga4010d7" class="outline-3">
<h3 id="orga4010d7"><span class="section-number-3">1.1</span> 数据头(header)</h3>
<div class="outline-text-3" id="text-1-1">
<p>
zlib 能使用一个 gzip 数据头，zlib 数据头或者不使用数据头压缩数据。
</p>

<p>
通常情况下，数据压缩使用 zlib 数据头，因为这提供错误数据检测。当数据不使用数据头
写入时，结果是没有任何错误检测的原始 DEFLATE 数据，那么解压缩软件的调用者不知道
压缩数据在什么地方结束。
</p>

<p>
gzip 数据头比 zlib 数据头要大，因为它保存了文件名和其他文件系统信息，事实上这是
广 泛使用的 gzip 文件的数据头格式。注意 zlib 函式库本身不能创建一个 gzip 文件，但
是它相当轻松的通过把压缩数据写入到一个有 gzip 文件头的文件中。
</p>
</div>
</div>
<div id="outline-container-orgc24e2cd" class="outline-3">
<h3 id="orgc24e2cd"><span class="section-number-3">1.2</span> 算法</h3>
<div class="outline-text-3" id="text-1-2">
<p>
目前 zlib 仅支持一个 LZ77 的变种算法，DEFLATE 的算法。
</p>

<p>
这个算法使用很少的系统资源，对各种数据提供很好的压缩效果。这也是在 ZIP 档案中无
一例外的使用这个算法。（尽管 zip 文件格式也支持几种其他的算法）。
</p>

<p>
看起来 zlib 格式将不会被扩展使用任何其他算法，尽管数据头可以有这种可能性。
</p>
</div>
</div>
<div id="outline-container-orgdc6b1f2" class="outline-3">
<h3 id="orgdc6b1f2"><span class="section-number-3">1.3</span> 使用资源</h3>
<div class="outline-text-3" id="text-1-3">
<p>
函数库提供了对处理器和内存使用控制的能力。
</p>

<p>
不同的压缩级别数值可以指示不同的压缩执行速度。
</p>

<p>
还有内存控制管理的功能。这在一些诸如嵌入式系统这样内存有限制的环境中是有用的。
</p>
</div>
</div>
<div id="outline-container-orgc554fec" class="outline-3">
<h3 id="orgc554fec"><span class="section-number-3">1.4</span> 策略</h3>
<div class="outline-text-3" id="text-1-4">
<p>
压缩可以针对特定类型的数据进行优化。
</p>

<p>
如果你总是使用 zlib 库压缩压缩特定类型的数据，那么可以使用有针对性的策略可以提高
压缩效率和性能。例如，如果你的数据包含很长的重复数据，那么可以用 RLE（运行长度编
码）策略，可能会有更好的结果。
</p>

<p>
对于一般的数据，默认的策略是首选。
</p>
</div>
</div>
<div id="outline-container-orgc1a8dc9" class="outline-3">
<h3 id="orgc1a8dc9"><span class="section-number-3">1.5</span> 错误处理</h3>
<div class="outline-text-3" id="text-1-5">
<p>
错误可以被放发现和跳过。
</p>

<p>
数据混乱可以被检测（只要数据和 zlib 或者 gzip 数据头一起被写入－参见上面）
</p>

<p>
此外，如果全刷新点（full-flush points）被写入到压缩后的数据流中，那么错误数据是
可以被跳过的，并且解压缩将重新同步到下个全刷新点。（错误数据的无错恢复被提供）。
全刷新点技术对于在不可靠的通道上的大数据流是很有用的，一些过去的数据丢失是不重要
的（例如多媒体数据），但是建立太多的全刷新点会极大的影响速度和压缩。
</p>
</div>
</div>
<div id="outline-container-org32b65f8" class="outline-3">
<h3 id="org32b65f8"><span class="section-number-3">1.6</span> 数据长度</h3>
<div class="outline-text-3" id="text-1-6">
<p>
对于压缩和解压缩，没有数据长度的限制。
</p>

<p>
重复调用库函数允许处理无限的数据块。一些辅助代码（计数变量）可能会溢出，但是不影
响实际的压缩和解压缩。
</p>


<p>
当压缩一个长（无限）数据流时，最好写入全刷新点。
</p>
</div>
</div>
<div id="outline-container-org98d4917" class="outline-3">
<h3 id="org98d4917"><span class="section-number-3">1.7</span> 业界应用</h3>
<div class="outline-text-3" id="text-1-7">
<p>
今天，zlib 是一种事实上的业界标准，以至于在标准文档中，zlib 和 DEFLATE 常常互换
使用。数以千计的应用程序直接或间接依靠 zlib 压缩函式库，包括：
</p>
<ul class="org-ul">
<li>Linux 核心：使用 zlib 以实作网络协定的压缩、档案系统的压缩以及开机时解压缩自身</li>
</ul>
<p>
的核心。
</p>
<ul class="org-ul">
<li>libpng：用于 PNG 图形格式的一个实现，对 bitmap 数据规定了 DEFLATE 作为流压缩方</li>
</ul>
<p>
法。
</p>
<ul class="org-ul">
<li>Apache：使用 zlib 实作 http 1.1。</li>
<li>OpenSSH、OpenSSL：以 zlib 达到最佳化加密网络传输。</li>
<li>FFmpeg：以 zlib 读写 Matroska 等以 DEFLATE 算法压缩的多媒体串流格式。</li>
<li>rsync：以 zlib 最佳化远端同步时的传输。</li>
<li>Subversion、Git 和 CVS 版本控制 系统，使用 zlib 来压缩和远端仓库的通讯流量。</li>
<li>dpkg 和 RPM 等包管理软件：以 zlib 解压缩 RPM 或者其他封包。</li>
</ul>
<p>
因为其代码的可移植性，宽松的许可以及较小的内存占用，zlib 在许多嵌入式设备中也有应用。
</p>
</div>
</div>
</div>




<div id="outline-container-org4a95f61" class="outline-2">
<h2 id="org4a95f61"><span class="section-number-2">2</span> 安装 zlib</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orge62f5cb" class="outline-3">
<h3 id="orge62f5cb"><span class="section-number-3">2.1</span> 下载</h3>
<div class="outline-text-3" id="text-2-1">
<p>
在 <a href="http://zlib.net/" target="_blank" rel="external">zlib 官网</a> 下载最新版本，此处为 <code>1.2.8</code> 版本，下载链接：<a href="http://zlib.net/zlib-1.2.8.tar.gz" target="_blank" rel="external">zlib-1.2.8.tar.gz</a>
</p>
</div>
</div>
<div id="outline-container-orgce7c303" class="outline-3">
<h3 id="orgce7c303"><span class="section-number-3">2.2</span> 解压</h3>
<div class="outline-text-3" id="text-2-2">
<p>
终端进入 <code>zlib-1.2.8.tar.gz</code> 所在的目录执行解压命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzvf zlib-<span class="number">1.2</span>.<span class="number">8</span>.tar.gz</span><br></pre></td></tr></table></figure>
</div>
<p>
解压完成得到 <code>zlib-1.2.8</code> 文件夹。
</p>
</div>
</div>
<div id="outline-container-org374a63f" class="outline-3">
<h3 id="org374a63f"><span class="section-number-3">2.3</span> 配置安装</h3>
<div class="outline-text-3" id="text-2-3">
<p>
终端进入 <code>zlib-1.2.8</code> 文件夹
</p>
</div>
<div id="outline-container-org37da7dc" class="outline-4">
<h4 id="org37da7dc"><span class="section-number-4">2.3.1</span> 标准配置安装（未测试，本人使用下面的<a href="#org58b4e14">自定义安装目录安装</a>的）</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<ol class="org-ol">
<li><p>
build static
</p>

<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make <span class="built_in">test</span></span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
build shared libraries
</p>

<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">$ ./configure --shared</span><br><span class="line">$ make <span class="built_in">test</span></span><br><span class="line">$ make install</span><br><span class="line">$ cp zutil.h /usr/<span class="built_in">local</span>/include</span><br><span class="line">$ cp zutil.c /usr/<span class="built_in">local</span>/include</span><br></pre></td></tr></table></figure>
</div>
<p>
现在 <code>/usr/local/lib</code> 下应该有这几个文件：
</p>
<ul class="org-ul">
<li>libz.a</li>
<li>libz.so -> libz.so.1.2.1</li>
<li>libz.so.1 -> libz.so.1.2.1</li>
<li>libz.so.1.2.1</li>
</ul>
<p>
<code>/usr/local/include</code> 下应该有这几个文件：
</p>
<ul class="org-ul">
<li>zconf.h</li>
<li>zlib.h</li>
<li>zutil.h</li>
</ul></li>
<li><p>
系统配置
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/zlib/lib &gt; /etc/ld.so.conf.d/zlib.conf</span><br></pre></td></tr></table></figure>
</div></li>

<li><p>
加载配置
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ldconfig</span><br><span class="line">$ updatedb</span><br></pre></td></tr></table></figure>
</div></li>
</ol>
</div>
</div>
<div id="outline-container-org1f22392" class="outline-4">
<h4 id="org1f22392"><span class="section-number-4">2.3.2</span> 自定义安装目录安装<a id="org58b4e14"></a></h4>
<div class="outline-text-4" id="text-2-3-2">
<ol class="org-ol">
<li><p>
安装在 <code>/usr/local/zlib</code> 文件夹下。
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令创建文件夹：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/zlib</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
执行配置：
</p>

<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zlib</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
编译：
</p>

<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
安装：
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
系统配置
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/zlib/lib &gt; /etc/ld.so.conf.d/zlib.conf</span><br></pre></td></tr></table></figure>
</div></li>
<li><p>
加载配置
</p>

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ldconfig</span><br><span class="line">$ updatedb</span><br></pre></td></tr></table></figure>
</div></li>
</ol>
</div>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:35.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> zlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[加快Emacs的运行速度]]></title>
      <url>http://yyangdid.github.io/2016/12/13/2016-12-13.%E5%8A%A0%E5%BF%ABEmacs%E7%9A%84%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orge6dde10">1. 配置</a></li>
<li><a href="#org3add918">2. 使用</a>
<ul>
<li><a href="#orgf541013">2.1. load 到 <code>tmpfs</code></a></li>
<li><a href="#org4fbe06c">2.2. 还原</a>
<ul>
<li><a href="#orgf1c423a">2.2.1. 不保留历史记录、对配置文件的更改。。。</a></li>
<li><a href="#org1507b6a">2.2.2. 保留历史记录、对配置文件的更改。。。</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
此方法可以加快 Emacs 的运行速度，而不是启动速度。其实就是把 Emacs 的配置文件
<code>.emacs.d</code> 文件夹放到内存中，而内存的吞吐速度要比普通的机械硬盘快的多，相应的
emacs 的速度也会有很大提升。
</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>
此方法只在 Linux 系统中测试了，个人系统 <code>openSUSE42.2</code>
</p>
</blockquote>
<div id="outline-container-orge6dde10" class="outline-2">
<h2 id="orge6dde10"><span class="section-number-2">1</span> 配置</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>将下面一行插入到 <code>/etc/fstab</code> 中，然后重启电脑（我电脑是 8G 内存，size 设置为 1G 了）。</li>
</ol>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tmpfs       /tmp        tmpfs       nodev,nosuid,size=<span class="number">1</span>G    <span class="number">0</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure>
</div>
<ol class="org-ol">
<li>新建一个脚本，并且赋予可执行权限，可以命名为 <code>emacs2ram</code> ，内容如下:</li>
</ol>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  emacs2ram start"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  emacs2ram restore"</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"start"</span> ];<span class="keyword">then</span></span><br><span class="line">    backup=.emacs.d-backup</span><br><span class="line">    link=.emacs.d</span><br><span class="line">    volatile=/tmp/.emacs.d-<span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line">    IFS=</span><br><span class="line">    <span class="built_in">set</span> -efu</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> ~/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -r <span class="variable">$volatile</span> ]; <span class="keyword">then</span></span><br><span class="line">        mkdir -m0700 <span class="variable">$volatile</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># link -&gt; volatie does not exist</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$(readlink $link)</span>"</span> != <span class="string">"<span class="variable">$volatile</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># backup project at first</span></span><br><span class="line">        mv <span class="variable">$link</span> <span class="variable">$backup</span></span><br><span class="line">        <span class="comment"># create the link</span></span><br><span class="line">        ln <span class="operator">-s</span> <span class="variable">$volatile</span> <span class="variable">$link</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="operator">-e</span> <span class="variable">$link</span>/.unpacked ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Sync .emacs.d from memory to backup ..."</span></span><br><span class="line">        rsync -avq --delete --exclude .unpacked ./<span class="variable">$link</span>/ ./<span class="variable">$backup</span>/</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Sync .emacs.d from disk to memory ..."</span></span><br><span class="line">        rsync -avq ./<span class="variable">$backup</span>/ ./<span class="variable">$link</span>/</span><br><span class="line">        touch <span class="variable">$link</span>/.unpacked</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Moving .emacs.d back to disk ..."</span></span><br><span class="line">    backup=.emacs.d-backup</span><br><span class="line">    link=.emacs.d</span><br><span class="line">    volatile=/tmp/.emacs.d-<span class="variable">$USER</span></span><br><span class="line">    <span class="built_in">cd</span> ~/</span><br><span class="line">    rm <span class="operator">-f</span> <span class="variable">$link</span> &amp;&amp; mv <span class="variable">$backup</span> <span class="variable">$link</span> &amp;&amp; rm -rf <span class="variable">$volatile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</div>
<p>
<code>emacs2ram</code> 文件：
</p>
<ul class="org-ul">
<li><a href="https://github.com/yyangdid/blog-backup/blob/master/MyFiles/Emacs/emacs2ram" target="_blank" rel="external">github</a></li>
<li><a href="https://coding.net/u/yyangdid/p/blog-backup/git/blob/master/MyFiles/Emacs/emacs2ram" target="_blank" rel="external">condig.net</a></li>
</ul>
</div>
</div>
<div id="outline-container-org3add918" class="outline-2">
<h2 id="org3add918"><span class="section-number-2">2</span> 使用</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-orgf541013" class="outline-3">
<h3 id="orgf541013"><span class="section-number-3">2.1</span> load 到 <code>tmpfs</code></h3>
<div class="outline-text-3" id="text-2-1">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram start</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Sync .emacs.d from disk to memory ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
说明配置文件已经转移到 <code>tmpfs</code> 了，ok！
</p>

<p>
可以用文件管理器看一下，在 <code>/tmp</code> 文件夹下会有一个 <code>.emacs.d-用户名</code> 的文件夹，
而主目录的 <i>.emacs.d</i> 文件夹会变成一个软链接，指向 <code>/tmp/.emacs.d-用户名</code> ，同时
在主目录还会有一个 <code>.emacs.d-backup</code> 文件夹,是对原 <code>.emacs.d</code> 的备份。
</p>
</div>
</div>
<div id="outline-container-org4fbe06c" class="outline-3">
<h3 id="org4fbe06c"><span class="section-number-3">2.2</span> 还原</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-orgf1c423a" class="outline-4">
<h4 id="orgf1c423a"><span class="section-number-4">2.2.1</span> 不保留历史记录、对配置文件的更改。。。</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram restore</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Moving .emacs.d back to disk ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>

<p>
用文件管理器看一下， <code>/tmp/.emacs.d-用户名</code> 和 <code>~/.emacs.d-backup</code> 两文件夹已经
没了，而 <code>~/.emacs.d</code> 回来了，不是软链接了。
</p>
</div>
</div>
<div id="outline-container-org1507b6a" class="outline-4">
<h4 id="org1507b6a"><span class="section-number-4">2.2.2</span> 保留历史记录、对配置文件的更改。。。</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram start</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Sync .emacs.d from memory to backup ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
然后执行：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram restore</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Moving .emacs.d back to disk ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
ok!
</p>


<p>
执行 <code>emacs2ram start</code> 是把 <code>/tmp/.emacs.d-用户名</code> 的内容同步到
<code>~/.emacs.d-backup</code> 。
</p>


<p>
执行 <code>emacs2ram restore</code> 是把 <code>~/.emacs.d-backup</code> 同步到 <code>~/.eamcs.d</code> ，同时删除
<code>/tmp/.emacs.d-用户名</code> 和 <code>~/.emacs.d-backup</code> 。
</p>


<blockquote>
<p>
此方法是在
<a href="https://github.com/lujun9972/emacs-document/blob/master/emacs-common/%E5%8D%81%E5%80%8D%E6%8F%90%E5%8D%87Emacs%E6%80%A7%E8%83%BD.org?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io" target="_blank" rel="external">
开发者头条</a>看到的，对原文的 <code>emacs2ram</code> 脚本修改了一下。如果觉得每次都要执行命令
麻烦，可以把命令加入开机启动和关机前执行，个人没折腾。
</p>
</blockquote>
</div>
</div>
</div>
</div>

Last Updated 2017-02-21 Tue 20:36.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 9.0.5)
]]></content>
      
        <categories>
            
            <category> Emacs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emacs </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
