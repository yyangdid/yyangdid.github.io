<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[学习ELisp(004):基本数据类型--数字]]></title>
      <url>http://yyangdid.github.io/2017/01/22/%E5%AD%A6%E4%B9%A0ELisp/2017-01-22.%E5%AD%A6%E4%B9%A0ELisp(004):%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B--%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 数字分类和表示方法</a></li>
<li><a href="#sec-2">2. 数字测试函数</a></li>
<li><a href="#sec-3">3. 比较操作符</a></li>
<li><a href="#sec-4">4. 数字转换函数</a>
<ul>
<li><a href="#sec-4-1">4.1. 整数转换为浮点数</a></li>
<li><a href="#sec-4-2">4.2. 浮点数转换为整数</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 数字的运算</a></li>
<li><a href="#sec-6">6. 附录</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录 ELisp 对数字的一些操作：类型测试、数字比较、数字运算、数字转换。
</p>
</blockquote>
<a id="more"></a>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 数字分类和表示方法</h2>
<div class="outline-text-2" id="text-1">
<p>
ELisp 中的数字分为整数和浮点数( <code>没有双精度浮点数 double</code> )和 NaN 。
</p>

<ul class="org-ul">
<li>整数

<p>
整数的表数范围根据使用机器的不同而不同，可以使用 <code>most-negative-fixnum</code> 和 <code>most-positive-fixnum</code> 两个变量得到。
</p>

<p>
例：获取本机的整数表数范围
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> num-test01 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"%s -- %s"</span></span><br><span class="line">	   most-negative-fixnum</span><br><span class="line">	   most-positive-fixnum)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test01</span>)</span> <span class="comment">;; ⇒ -2305843009213693952 -- 2305843009213693951</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
可以使用多种进制来输入一个整数。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> num-test02 <span class="list">(<span class="keyword">num</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"%s"</span></span><br><span class="line">	   num)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#b1011000</span>)</span> <span class="comment">;; ⇒ 88 ;; 使用二进制输入数字</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#o130</span>)</span> <span class="comment">;; ⇒ 88 ;;使用八进制输入数字</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">88</span>)</span> <span class="comment">;; ⇒ 88 ;; 使用十进制输入数字</span></span><br><span class="line"><span class="list">(<span class="keyword">num-test02</span> <span class="number">#x58</span>)</span> <span class="comment">;; ⇒ 88 ;; 使用十六进制输入数字</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>浮点数

<p>
1500.0, 15e2, 1.5e3, .15e4都表示1500. 。
</p>
</li>

<li>NaN

<p>
使用 <code>(/ 0.0 0.0)</code> 可是得到 NaN <code>-0.0e+NaN</code> 。
</p>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 数字测试函数</h2>
<div class="outline-text-2" id="text-2">
<p>
ELisp 的测试函数一般都采用 <code>p</code> 结尾， <code>p</code> 代表 <code>predicate</code> 。如果函数名是一个
单词，一般在这个单词后面加一个 <code>p</code> 字母，如果函数名是由多个单词组成的，一般在
这个函数名的后面添加 <code>-p</code> 。
</p>

<p>
常用的数字测试函数：
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left">

<col class="left">
</colgroup>
<thead>
<tr>
<th scope="col" class="left">函数名</th>
<th scope="col" class="left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">(integerp <i>OBJECT</i>)</td>
<td class="left">测试是否为 <code>整数类型</code></td>
</tr>

<tr>
<td class="left">(floatp <i>OBJECT</i>)</td>
<td class="left">测试是否为 <code>浮点数类型</code></td>
</tr>

<tr>
<td class="left">(numberp <i>ObJECT</i>)</td>
<td class="left">测试是否为 <code>数字类型</code></td>
</tr>

<tr>
<td class="left">(zerop <i>OBJECT</i>)</td>
<td class="left">测试是否为 <code>零</code></td>
</tr>

<tr>
<td class="left">(wholenump <i>OBJECT</i>)</td>
<td class="left">测试是否为 <code>非负整数</code></td>
</tr>
</tbody>
</table>

<p>
例:
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1</span>.)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">1.0</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1</span>.)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">1.0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> <span class="number">1</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">1</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">1.0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">1</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">1.0</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">-0.0</span>e+NaN)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> <span class="number">-1</span>)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 比较操作符</h2>
<div class="outline-text-2" id="text-3">
<p>
ELisp 中的比较操作符有 <code>>、<、>=、<=、=、eql< code=""> 。
</=、=、eql<></、></code></p>

<p>
由于 ELisp 中的赋值是由 setq 完成的，所以 <code>=</code> 用来测试两个数字的值是否相等。
</p>

<p>
而 <code>eql</code> 不仅能测试数字的值是否相等，也能测试数字类型是否相同。
</p>

<p>
ELisp 中 <code>不存在 +=、-=、*=</code> 。
</p>

<p>
<code>/=</code> 作为不等于测试。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> b <span class="number">1</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> c <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> d <span class="number">1.00</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">; a c) ;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">; a c) ;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">;= a c) ;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">;= a c) ;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> a d)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="list">(<span class="keyword">eql</span> a d)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="list">(<span class="keyword">/=</span> a c)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span></span><br></pre></td></tr></table></figure>
</div>

<p>
对于浮点数的测试往往是不准确的，例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a1 <span class="number">1.0e-3</span>)</span> <span class="comment">;; ⇒ 0.001</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a2 <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">+</span> <span class="number">1.0</span> <span class="number">1.0e-3</span>)</span> <span class="number">1.0</span>)</span>)</span> <span class="comment">;; ⇒ 0.000999999999999889</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> a1 a2)</span> <span class="comment">;; ⇒ nil</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
如果一定要对两个浮点数进行比较，只能在一定范围内进行比较：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defvar</span> fuzz-factor <span class="number">1.0e-6</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> approx-equal <span class="list">(<span class="keyword">a</span> b)</span></span><br><span class="line">  <span class="string">"在 1.0e-6 范围内进行浮点数比较"</span></span><br><span class="line">  <span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">=</span> b <span class="number">0</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">&lt</span><span class="comment">; (/ (abs (- a b)) (max (abs a) (abs b)))</span></span><br><span class="line">	 fuzz-factor)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">approx-equal</span> a1 a2)</span> <span class="comment">;; ⇒ t</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 数字转换函数</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 整数转换为浮点数</h3>
<div class="outline-text-3" id="text-4-1">
<p>
使用 <code>float</code> 函数可将整数转换为浮点数。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a4 <span class="number">2</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> a4)</span> <span class="comment">;; ⇒ 2.0</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">3</span>)</span> <span class="comment">;; ⇒ 3.0</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">-3</span>)</span> <span class="comment">;; ⇒ -3.0</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> 浮点数转换为整数</h3>
<div class="outline-text-3" id="text-4-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left">

<col class="left">
</colgroup>
<thead>
<tr>
<th scope="col" class="left">函数</th>
<th scope="col" class="left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">truncate</td>
<td class="left">转换为靠近 0 的整数</td>
</tr>

<tr>
<td class="left">floor</td>
<td class="left">转换为最接近的不比本身大的整数</td>
</tr>

<tr>
<td class="left">ceiling</td>
<td class="left">转换为最接近的不比本身小的整数</td>
</tr>

<tr>
<td class="left">round</td>
<td class="left">四舍五入后的整数，即与本身求差绝对值最小的整数</td>
</tr>
</tbody>
</table>
<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; truncate ;; 转换为靠近 0 的整数</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">2.3</span>)</span>   <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">-2.3</span>)</span>  <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">2.8</span>)</span>   <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> <span class="number">-2.8</span>)</span>  <span class="comment">;; ⇒ -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; floor ;; 转换为最接近的不比本身大的整数</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">2.3</span>)</span>   <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">-2.3</span>)</span>  <span class="comment">;; ⇒ -3</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">2.8</span>)</span>   <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">-2.8</span>)</span>  <span class="comment">;; ⇒ -3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; ceiling ;; 转换为最接近的不比本身小的整数</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">2.3</span>)</span>  <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">-2.3</span>)</span> <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">2.8</span>)</span>  <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> <span class="number">-2.8</span>)</span> <span class="comment">;; ⇒ -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; round ;; 四舍五入后的整数，即与本身求差绝对值最小的整数</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">2.3</span>)</span>  <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">-2.3</span>)</span> <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">2.8</span>)</span>  <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> <span class="number">-2.8</span>)</span> <span class="comment">;; ⇒ -3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
<b>注：</b>
</p>
</blockquote>
<p>
浮点数的范围是无穷大的，而整数的是有范围的，当使用 <code>浮点数转换为整数</code> 函数的
时候，数值超越了整数的表数范围时，代码报错。
</p>

<p>
当使用 <code>整数转换为浮点数</code> 函数时，即使被转换的整数是超过整数表数范围的，转换
为浮点数也不会报错。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 1e30 是一个超过了整数表数范围的数字</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> <span class="number">1e30</span>)</span> <span class="comment">;; ⇒ 报错 ;; 转换为整数</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> <span class="number">1e30</span>)</span> <span class="comment">;; ⇒ 1e+30 ;; 转换为浮点数</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 数字的运算</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>四则运算 <code>+、-、*、/</code> 。

<p>
<b>注：</b> 整数和整数运算返回整数，整数和浮点数运算返回
浮点数。在整数和整数做除法运算时，例如：(/ 1 2) 返回值为 0 ，相当于 truncate
了一下，改写为 (/ 1 2.0) 返回值为 0.5 。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(<span class="keyword">-</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ -1</span></span><br><span class="line"><span class="list">(<span class="keyword">*</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 0</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="number">2.0</span>)</span> <span class="comment">;; ⇒ 0.5</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1.0</span> <span class="number">2.0</span>)</span> <span class="comment">;; ⇒ 3.0</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li><code>++</code> 和 <code>--</code>

<p>
ELisp 中没有 <code>++和--</code> 操作，类似的的函数是 <code>1+</code> 和 <code>1-</code> ，使用
<code>setq</code> 赋值代替 <code>++ 和 --</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="number">1</span>)</span> <span class="comment">;; ⇒ 1</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>+ a6)</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>+ a6)</span>)</span> <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> a6 <span class="list">(<span class="number">1</span>- a6)</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
在 Common Lisp 中有两个宏实现了 <code>++ 和 --</code> 操作： <code>incf 和 decf</code> ，Emacs 包含
一个模拟 Common Lisp 的库 <code>cl</code> ，在 ELisp 代码文件中使用这两个实现宏，要在 ELisp 文件头加入：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">eval-when-compile</span></span><br><span class="line">  <span class="list">(<span class="keyword">require</span> <span class="quoted">'cl</span>)</span>)</span></span><br><span class="line">      <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
由于 <code>incf</code> 和 <code>decf</code> 是两个宏，这样写在运行时不会导入 cl 库。
</p>
</li>

<li>求绝对值

<p>
ELisp 使用 <code>abs</code> 函数求绝对值。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">abs</span> <span class="number">2</span>)</span>  <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">abs</span> <span class="number">-2</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li><code>%</code> 函数 （我个人认为是求余）

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(% 被除数 除数)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
参与运算的必须是整数，可以是正整数或负整数，运算时先把负数取绝对值，再运算。
运算结果和被除数的正负号相同，若被除数等于除数则结果为 0 ，若被除数小于除数
则结果为被除数。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(% <span class="number">3</span> <span class="number">8</span>)</span>   <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(% <span class="number">3</span> <span class="number">-8</span>)</span>  <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="list">(% <span class="number">-3</span> <span class="number">8</span>)</span>  <span class="comment">;; ⇒ -3</span></span><br><span class="line"><span class="list">(% <span class="number">-3</span> <span class="number">-8</span>)</span> <span class="comment">;; ⇒ -3</span></span><br><span class="line"></span><br><span class="line"><span class="list">(% <span class="number">8</span> <span class="number">3</span>)</span>   <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(% <span class="number">8</span> <span class="number">-3</span>)</span>  <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(% <span class="number">-8</span> <span class="number">3</span>)</span>  <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="list">(% <span class="number">-8</span> <span class="number">-3</span>)</span> <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li><code>mod</code> 函数（个人认为是取模）

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> 被取模数 模数)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
参与运算的可以是整数或浮点数，可以是正数或负数，运算结果和模数的正负号相同。
若被取模数和模数的正负号相同，则运算方法和求余相同，运算结果的正负号和模数相
同。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">9</span> <span class="number">4</span>)</span>       <span class="comment">;; ⇒ 1</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-9</span> <span class="number">-4</span>)</span>     <span class="comment">;; -1</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">5.5</span> <span class="number">2.5</span>)</span>   <span class="comment">;; ⇒ 0.5</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-5.5</span> <span class="number">-2.5</span>)</span> <span class="comment">;; ⇒ -0.5</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
若被取模数和模数的正负号不相同，运算方法如下：
</p>

<p>
如 a 为被取模数， b 为模数，计算 (mod a b) 。假定两个未知数 x 和 y，则一定会
有一个或多个结果满足如下条件：
</p>

<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; x * b + y = a 且 0 ≤ |y| ≤ |x|</span></span><br></pre></td></tr></table></figure>
</div>

<p>
因为会有一组或多组 x y 的值满足上面的公式，如果只有一组 x y 的值满足公式，则
y 的值就是 (mod a b) 的计算结果，如果有多组 x y 的值满足公式，那么 y 的值还
是不能被唯一确定，所以不同的编程语言对此种情况下 y 的取值有不同的规定。
</p>

<p>
把 <code>x</code> 值称为 <code>商</code> ， <code>y</code> 值称为 <code>余</code> 。
</p>

<p>
<code>Java、C++</code> 取 <b>商 (即 x) 值尽可能大的那一组里面 y 的值为计算结果</b>
</p>

<p>
<code>Python、ELisp</code> 取 <b>商 (即 x) 值尽可能小的那一组里面 y 的值为计算结果</b>
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">9</span> <span class="number">-4</span>)</span> <span class="comment">;; ⇒ -3</span></span><br><span class="line"><span class="comment">;; 满足 (x * b + y = a) 公式</span></span><br><span class="line"><span class="comment">;; (-2) * (-4) + (1) = 9</span></span><br><span class="line"><span class="comment">;; (-3) * (-4) + (-3) = 9 ;; √ ;;商 (即 x) 值比较小</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-9</span> <span class="number">4</span>)</span> <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="comment">;; 满足 (x * b + y = a) 公式</span></span><br><span class="line"><span class="comment">;; (-2) * 4 + (-1) = (-9)</span></span><br><span class="line"><span class="comment">;; (-3) * 4 + (3) = (-9) ;; √ ;;商 (即 x) 值比较小</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">5.5</span> <span class="number">-2.5</span>)</span> <span class="comment">;; ⇒ -2</span></span><br><span class="line"><span class="comment">;; 满足 (x * b + y = a) 公式</span></span><br><span class="line"><span class="comment">;; (-2) * (-2.5) + (0.5) = 5.5</span></span><br><span class="line"><span class="comment">;; (-3) * (-2.5) + (-2) = 5.5 ;; √ ;;商 (即 x) 值比较小</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> <span class="number">-5.5</span> <span class="number">2.5</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="comment">;; 满足 (x * b + y = a) 公式</span></span><br><span class="line"><span class="comment">;; (-2) * 2.5 + (-0.5) = -5.5</span></span><br><span class="line"><span class="comment">;; (-3) * 2.5 + (2) = -5.5 ;; √ ;;商 (即 x) 值比较小</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>三角运算函数

<p>
ELisp 中的三角运算函数有： <code>sin、cos、tan、asin、acos、atan</code> 。
</p>
</li>

<li>开方函数

<p>
ELisp 的开方函数是 <code>sqrt</code> 。
</p>

<p>
正数开方的结果都为 <code>浮点数</code> ，0 的开方结果为 <code>0.0</code> ，所有负数的开方结果为
<code>-0.0e+NaN</code> 。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">4</span>)</span> <span class="comment">;; ⇒ 2.0</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">0</span>)</span> <span class="comment">;; ⇒ 0.0</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">-4.4</span>)</span> <span class="comment">;; ⇒ -0.0e+NaN</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> <span class="number">-9</span>)</span> <span class="comment">;; ⇒ -0.0e+NaN</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>指数运算函数

<p>
指数运算函数包括 <code>exp、expt</code> 。
</p>

<p>
<code>exp</code> 函数是以 e 为底的指数运算 (e 是自然函数，是一个无限不循环小数，他的值
约为 2.718281828) 。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">exp</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 7.38905609893065</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
<code>expt</code> 函数是可以指定底数的指数运算。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">expt</span> <span class="number">2</span> <span class="number">3</span>)</span> <span class="comment">;; ⇒ 8</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>对数运算函数

<p>
对数运算函数包括 <code>log、logb</code> 。
</p>

<p>
<code>log</code> 函数默认以 e 底数，也可以自定义底数。返回值为浮点数。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">7.38905609893065</span>)</span> <span class="comment">;; ⇒ 2.0 ;; 默认底数为 e</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 0.6931471805599453 ;; 默认底数为 e</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> <span class="number">4</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 2.0 ;; 自定义底数为 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

<p>
<code>logb</code> 函数以 2 为底数，但是返回一个整数，此函数用来计算数的位。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">2</span>)</span> <span class="comment">;; ⇒ 1</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">4</span>)</span> <span class="comment">;; ⇒ 2</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> <span class="number">8</span>)</span> <span class="comment">;; ⇒ 3</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li><code>random</code> 随机数函数

<p>
使用 <code>(random)</code> 产生一个随机数 (其实是伪随机数)。启动 Emacs后产生的随机数序
列是相同的，第一次调用 (random) 总是生成 -1457731, 第二次总生成 -7692030. 当
然平常如果调用次数不同, 则随机数也不一样。但是可以使用 <code>(random t)</code> 函数，此
函数可以根据当前时间和 Emacs 的 PID 生成一个新的随机数种子。
</p>

<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> a8 <span class="list">(<span class="keyword">random</span> <span class="literal">t</span>)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 附录</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>函数列表

<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 测试函数</span></span><br><span class="line"><span class="list">(<span class="keyword">integerp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">floatp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">numberp</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">zerop</span> NUMBER)</span></span><br><span class="line"><span class="list">(<span class="keyword">wholenump</span> OBJECT)</span></span><br><span class="line"><span class="comment">;; 比较函数</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">; NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">; NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&gt</span><span class="comment">;= NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">&lt</span><span class="comment">;= NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">=</span> NUM1 NUM2)</span></span><br><span class="line"><span class="list">(<span class="keyword">eql</span> OBJ1 OBJ2)</span></span><br><span class="line"><span class="list">(<span class="keyword">/=</span> NUM1 NUM2)</span></span><br><span class="line"><span class="comment">;; 转换函数</span></span><br><span class="line"><span class="list">(<span class="keyword">float</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">truncate</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">floor</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">ceiling</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="list">(<span class="keyword">round</span> ARG <span class="keyword">&amp</span><span class="comment">;optional DIVISOR)</span></span><br><span class="line"><span class="comment">;; 运算</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="keyword">&amp</span><span class="comment">;rest NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">-</span> <span class="keyword">&amp</span><span class="comment">;optional NUMBER-OR-MARKER &amp;rest MORE-NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">*</span> <span class="keyword">&amp</span><span class="comment">;rest NUMBERS-OR-MARKERS)</span></span><br><span class="line"><span class="list">(<span class="keyword">/</span> DIVIDEND DIVISOR <span class="keyword">&amp</span><span class="comment">;rest DIVISORS)</span></span><br><span class="line"><span class="list">(<span class="number">1</span>+ NUMBER)</span></span><br><span class="line"><span class="list">(<span class="number">1</span>- NUMBER)</span></span><br><span class="line"><span class="list">(<span class="keyword">abs</span> ARG)</span></span><br><span class="line"><span class="list">(% X Y)</span></span><br><span class="line"><span class="list">(<span class="keyword">mod</span> X Y)</span></span><br><span class="line"><span class="list">(<span class="keyword">sin</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">cos</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">tan</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">asin</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">acos</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">atan</span> Y <span class="keyword">&amp</span><span class="comment">;optional X)</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">exp</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">expt</span> ARG1 ARG2)</span></span><br><span class="line"><span class="list">(<span class="keyword">log</span> ARG <span class="keyword">&amp</span><span class="comment">;optional BASE)</span></span><br><span class="line"><span class="list">(<span class="keyword">log10</span> ARG)</span></span><br><span class="line"><span class="list">(<span class="keyword">logb</span> ARG)</span></span><br><span class="line"><span class="comment">;; 随机数</span></span><br><span class="line"><span class="list">(<span class="keyword">random</span> <span class="keyword">&amp</span><span class="comment">;optional N)</span></span><br><span class="line"><span class="comment">;;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>变量列表
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">most-positive-fixnum</span><br><span class="line">most-negative-fixnum</span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>
</ul>
</div>
</div>

Last Updated 2017-01-26 Thu 21:07.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(003):基础知识]]></title>
      <url>http://yyangdid.github.io/2017/01/12/%E5%AD%A6%E4%B9%A0ELisp/2017-01-12.%E5%AD%A6%E4%B9%A0ELisp(003):%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 函数和变量</a>
<ul>
<li><a href="#sec-1-1">1.1. 函数的声明和调用</a></li>
<li><a href="#sec-1-2">1.2. 变量</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. 局部变量</a></li>
</ul>
</li>
<li><a href="#sec-1-3">1.3. lambda 表达式</a></li>
<li><a href="#sec-1-4">1.4. 控制结构</a>
<ul>
<li><a href="#sec-1-4-1">1.4.1. 顺序执行</a></li>
<li><a href="#sec-1-4-2">1.4.2. 条件判断</a></li>
<li><a href="#sec-1-4-3">1.4.3. 循环   while</a></li>
<li><a href="#sec-1-4-4">1.4.4. 逻辑运算</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. 本节附录</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
学习资料：<a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</p>

<p>
本章节主要记录 ELisp 编程中的基本概念，例如如何定义函数，控制结构，变量的使用和作用域&#x2026;&#x2026;
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 函数和变量</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 函数的声明和调用</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>声明一个函数的格式：
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 格式：</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> function-name <span class="list">(<span class="keyword">arguments-list</span>)</span></span><br><span class="line">  <span class="string">"document string"</span></span><br><span class="line">  function-body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
ELisp使用关键字 <code>defun</code> 来定义函数，函数中的参数列表可以为 <code>零个、一个或多个</code>
。函数中的文档字符串可以省略不写但不推荐。
</p>
<blockquote>
<p>
在 Emacs 中，当光标处于一个函数名上的时候，使用 <code>C-h f</code> 可以查看此函数的文档。
</p>
</blockquote>
<ul class="org-ul">
<li>例子一：声明一个没有参数的函数
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 声明一个函数 hello () :</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">()</span></span><br><span class="line">  <span class="string">"Say hello."</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello"</span>)</span>)</span></span><br><span class="line"><span class="comment">;;调用此函数</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>
<li>例子二：声明一个带有参数的函数
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 声明一个带参数的函数 hello (name)：</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="string">"Say hello to user whose name is NAME."</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello %s."</span> name)</span>)</span></span><br><span class="line"><span class="comment">;;调用此函数</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"Emacs"</span>)</span> <span class="comment">;; ⇒ Hello Emacs.</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
每个函数都有一个返回值，这个返回值一般是函数定义里面的最后一个表达式的值。
</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 变量</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>直接对变量赋值

<p>
在 ELisp 中可以直接给一个变量进行赋值，而不需要声明。
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 直接对变量 foo 赋值</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> foo <span class="string">"I am foo"</span>)</span> <span class="comment">;; ⇒ "I am foo"</span></span><br><span class="line"><span class="list">(<span class="keyword">message</span> foo)</span> <span class="comment">;; ⇒ "I am foo"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
把光标放在变量名上使用 <code>C-h v</code> 可以查看此变量的文档说明。
</p>
</blockquote>
</li>

<li>使用 <code>defvar</code> 关键字声明变量

<p>
上面使用 <code>setq</code> 的方式给一个变量赋值是不能够添加文档字符串的， <code>defvar</code> 可以在
赋值的同时添加文档字符串，如果 <code>defvar</code> 声明赋值的变量已经存在一个值了，
<code>defvar</code> 不会改变这个值。
</p>

<p>
<code>defvar</code> 的使用格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defvar</span> variable-name value</span><br><span class="line">  <span class="string">"Document string"</span>)</span></span><br></pre></td></tr></table></figure>
</div>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> foo <span class="string">"Emacs"</span>)</span> <span class="comment">;; 使用 setq 给变量 foo 赋值为 "Emacs"</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> foo)</span>       <span class="comment">;; ⇒ Emacs</span></span><br><span class="line"><span class="list">(<span class="keyword">defvar</span> foo <span class="string">"ELisp"</span></span><br><span class="line">  <span class="string">"Test defvar"</span>)</span>   <span class="comment">;; 使用 defvar 给变量 foo 赋值并添加文档字符串</span></span><br><span class="line"><span class="list">(<span class="keyword">isner</span> foo)</span>        <span class="comment">;; ⇒ Emacs ;; defvar 没有改变 foo 的值</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<blockquote>
<p>
在 ELips 中函数是全局的，变量也很容易成为全局的，在给函数和变量起名字的时候使
用 <code>C-h f</code> 和 <code>C-h v</code> 确定一下要定义的名字是否已经被使用了。
</p>
</blockquote>
</li>
</ul>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> 局部变量</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
ELisp 使用 <code>let</code> 和 <code>let*</code> 来绑定局部变量。
</p>

<ul class="org-ul">
<li><code>let</code>

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">let</span> bindings</span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;; bindings 可以是 (var value) 这种对 var 声明并赋予初始值的形式(注意添加小括号)，</span></span><br><span class="line"><span class="comment">;; 也可以是 var 这种声明一个初始值为 nil 的变量，可以声明一个或多个。</span></span><br><span class="line"><span class="comment">;; 局部变量的作用域只在 (let) 范围内</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例一：声明一个初始值不为 nil 的局部变量
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test01 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test01 - %i"</span></span><br><span class="line">	     a)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test01</span>)</span> <span class="comment">;; ⇒ "let_test01 - 1"</span></span><br><span class="line"><span class="comment">;; 把光标放在变量名 a 上，使用 C-h v 查看变量会提示此变量不存在，这就是局部变量。</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例二：声明一个初始值不为 nil 的局部变量和一个初始值为 nil 的局部变量
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test02 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span></span><br><span class="line">	b)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> b <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test02 - a:%i - b:%i"</span></span><br><span class="line">	     a</span><br><span class="line">	     b)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test02</span>)</span> <span class="comment">;; ⇒ "let_test02 - a:1 - b:2"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例三：声明多个局部变量
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> let_test03 <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="number">1</span>)</span></span><br><span class="line">	b</span><br><span class="line">	c</span><br><span class="line">	d)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> b <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> c <span class="list">(<span class="keyword">+</span> a <span class="number">2</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> d <span class="list">(<span class="keyword">+</span> a <span class="number">3</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"let_test03 - a:%i - b:%i - c:%i - d:%i"</span></span><br><span class="line">	     a</span><br><span class="line">	     b</span><br><span class="line">	     c</span><br><span class="line">	     d)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">let_test03</span>)</span> <span class="comment">;; ⇒ let_test03 - a:1 - b:2 - c:3 - d:4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例四：在函数中使用函数传参<a id="001" name="001"></a>
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> circle-area <span class="list">(<span class="keyword">radius</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">pai</span> <span class="number">3.1415926</span>)</span></span><br><span class="line">	area)</span></span><br><span class="line">    <span class="list">(<span class="keyword">setq</span> area <span class="list">(<span class="keyword">*</span> pai radius radius)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"半径为 %.2f 的圆面积为 %.2f"</span></span><br><span class="line">	     radius</span><br><span class="line">	     area)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">circle-area</span> <span class="number">3</span>)</span> <span class="comment">;; ⇒ 半径为 3.00 的圆面积为 28.27</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li><code>let*</code>

<p>
<code>let*</code> 和 <code>let</code> 的格式相同，唯一区别是 <code>let*</code> 在定义局部变量的时候可以使用前面已经定义过的变量直接运算。
</p>

<p>
例：改写 <a href="#001"><code>let</code> 例四：在函数中使用函数传参</a>
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> circle-area <span class="list">(<span class="keyword">radius</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let*</span> <span class="list">(<span class="list">(<span class="keyword">pai</span> <span class="number">3.1415926</span>)</span></span><br><span class="line">	 <span class="list">(<span class="keyword">area</span> <span class="list">(<span class="keyword">*</span> pai radius radius)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"半径为 %.2f 的圆面积为 %.2f"</span></span><br><span class="line">	     radius</span><br><span class="line">	     area)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">circle-area</span> <span class="number">3</span>)</span> <span class="comment">;; ⇒ 半径为 3.00 的圆面积为 28.27</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> lambda 表达式</h3>
<div class="outline-text-3" id="text-1-3">
<p>
lambda 表达式类似其他编程语言的匿名函数，其定义格式和 <code>defun</code> 相同。
</p>

<p>
使用 <code>funcall</code> 来调用。
</p>

<p>
定义格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">arguments-list</span>)</span></span><br><span class="line">  <span class="string">"ducomentation string"</span></span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例一：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">funcall</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">	   <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">		    name)</span>)</span></span><br><span class="line">	 <span class="string">"ELisp"</span>)</span> <span class="comment">;; ⇒ Hello, ELis</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例二：把 lambda 表达式赋值给一个变量
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> lmd <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">	    <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">		     name)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">funcall</span> lmd <span class="string">"ELisp"</span>)</span> <span class="comment">;; ⇒ Hello, ELisp</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> 控制结构</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1"><span class="section-number-4">1.4.1</span> 顺序执行</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
在 <code>defun</code> <code>let</code> 等环境中语句是按顺序执行的，但很多情况不会，需要使用 <code>progn</code> 表达式。
</p>

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span> A B C D ...)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">setq</span> a <span class="number">2</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"square of %i is %i"</span></span><br><span class="line">	   a</span><br><span class="line">	   <span class="list">(<span class="keyword">*</span> a a)</span>)</span>)</span> <span class="comment">;; ⇒ square of 2 is 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2"><span class="section-number-4">1.4.2</span> 条件判断</h4>
<div class="outline-text-4" id="text-1-4-2">
<ul class="org-ul">
<li>if

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">if</span> condition</span><br><span class="line">    then</span><br><span class="line">  else)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> my-max <span class="list">(<span class="keyword">a</span> b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">; a b)</span></span><br><span class="line">      <span class="list">(<span class="keyword">message</span> <span class="string">"a:%i"</span> a)</span></span><br><span class="line">    <span class="list">(<span class="keyword">message</span> <span class="string">"b:%i"</span> b)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">my-max</span> <span class="number">3</span> <span class="number">4</span>)</span> <span class="comment">;; ⇒ b:4</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>
</li>

<li>cond

<p>
类似 <code>java</code> 中的 <code>case</code> 。
</p>

<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="keyword">case1</span> do-when-case1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">case2</span> do-when-case2)</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="list">(<span class="keyword">t</span> do-when-none-meet)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> fib <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">	<span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">	<span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">2</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">	<span class="list">(<span class="keyword">n</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">fib</span> <span class="number">4</span>)</span> <span class="comment">;; ⇒ 4</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3"><span class="section-number-4">1.4.3</span> 循环   while</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
格式：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">while</span> condition</span><br><span class="line">  body)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<p>
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> facl <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">res</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">while</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">; n 1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">setq</span> res <span class="list">(<span class="keyword">*</span> res n)</span></span><br><span class="line">	    n <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line">    res)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">facl</span> <span class="number">3</span>)</span> <span class="comment">;; ⇒ 6</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-1-4-4" class="outline-4">
<h4 id="sec-1-4-4"><span class="section-number-4">1.4.4</span> 逻辑运算</h4>
<div class="outline-text-4" id="text-1-4-4">
<p>
使用 <code>and</code> <code>or</code> <code>not</code> 。其中 and 和 or 具有短路性质。在表达式比较短的时候，
可以使用 and 代替 when，or 代替 unless，这是一般不关心返回值，主要是作用于表
达式内其他语句的副作用。例如 or 经常用来设置函数参数的默认值， and 经常用于
参数检查。
例：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> hello-world <span class="list">(<span class="keyword">&amp</span><span class="comment">;optional name)</span></span><br><span class="line">  <span class="list">(<span class="keyword">or</span> name <span class="list">(<span class="keyword">setq</span> name <span class="string">"Emacs"</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">message</span> <span class="string">"Hello, %s"</span></span><br><span class="line">	   name)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">hello-world</span>)</span> <span class="comment">;; ⇒ Hello, Emacs</span></span><br><span class="line"><span class="list">(<span class="keyword">hello-world</span> <span class="string">"ELisp"</span>)</span> <span class="comment">;; ⇒ Hello, ELisp</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> square-number-p <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&gt</span><span class="comment">;= n 0)</span></span><br><span class="line">       <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">/</span> n <span class="list">(<span class="keyword">sqrt</span> n)</span>)</span> <span class="list">(<span class="keyword">sqrt</span> n)</span>)</span>)</span>)</span> <span class="comment">;; sqrt 是内置函数，开平方 √</span></span><br><span class="line"><span class="list">(<span class="keyword">square-number-p</span> <span class="number">-1</span>)</span> <span class="comment">;; nil</span></span><br><span class="line"><span class="list">(<span class="keyword">square-number-p</span> <span class="number">25</span>)</span> <span class="comment">;; t</span></span><br><span class="line"><span class="comment">;;</span></span></span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 本节附录</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>函数列表
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">defun</span> NAME ARGLIST [DOCSTRING] BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">defvar</span> SYMBOL <span class="keyword">&amp</span><span class="comment">;optional INITVALUE DOCSTRING)</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> SYM VAL SYM VAL ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">let</span> VARLIST BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">let*</span> VARLIST BODY...)</span></span><br><span class="line"><span class="list">(<span class="keyword">lambda</span> ARGS [DOCSTRING] [INTERACTIVE] BODY)</span></span><br><span class="line"><span class="list">(<span class="keyword">progn</span> BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">if</span> COND THEN ELSE...)</span></span><br><span class="line"><span class="list">(<span class="keyword">cond</span> CLAUSES...)</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">unless</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">when</span> COND BODY ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">or</span> CONDITIONS ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">and</span> CONDITIONS ...)</span></span><br><span class="line"><span class="list">(<span class="keyword">not</span> OBJECT)</span></span><br><span class="line"><span class="list">(<span class="keyword">sqrt</span> NUMBER)</span></span><br><span class="line"><span class="comment">;;</span></span></span><br></pre></td></tr></table></figure>
</div>
</li>
</ul>
</div>
</div>

Last Updated 2017-01-26 Thu 21:08.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(002):记录X分钟速成ELisp]]></title>
      <url>http://yyangdid.github.io/2017/01/01/%E5%AD%A6%E4%B9%A0ELisp/2017-01-01.%E5%AD%A6%E4%B9%A0ELisp(002):%E8%AE%B0%E5%BD%95X%E5%88%86%E9%92%9F%E9%80%9F%E6%88%90ELisp/</url>
      <content type="html"><![CDATA[

<blockquote>
<p>
学习 <a href="https://learnxinyminutes.com/" target="_blank" rel="external">X分钟速成Y</a> 系列之 <a href="https://learnxinyminutes.com/docs/elisp/" target="_blank" rel="external">elisp</a> 版本（官方中文版：<a href="https://learnxinyminutes.com/docs/zh-cn/elisp-cn/" target="_blank" rel="external">elisp</a>）。
</p>
</blockquote>
<a id="more"></a>
<ul class="org-ul">
<li>ELisp是由符号表达式构成的（即 <code>s-表达式</code> 或 <code>s式</code> ）， <code>s-表达式</code> 两侧由括号=()= 包围，一个 <code>s-表达式</code> 可以包含 <code>原子符号</code> 和 <code>其他的 s-表达式</code> 。
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; ELisp 使用分号表示本行注释开始</span></span><br><span class="line"><span class="comment">;; 把光标放在右侧小括号后面，按下组合键C-x C-e 可在 minibuffer 显示计算结果</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="number">2</span>)</span><span class="comment">;; 3</span></span><br><span class="line"><span class="comment">;; 在上面这个 s-表达式 中包含两个原子符号 1 和 2，意思是对 1 和 2 进行相加</span></span><br><span class="line"><span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="list">(<span class="keyword">+</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span><span class="comment">;; 6</span></span><br><span class="line"><span class="comment">;; 上面的 s-表达式 是由原子符号 1 和另外一个 s-表达式 (+ 2 3) 组成的</span></span><br><span class="line"><span class="comment">;; 在进行求值计算的时候先对 (+ 2 3) 进行求值，得出结果 x，然后在计算 (+ 1 x) 的值</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>setq</code> 可以给一个变量进行赋值
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 给 my-name 进行赋值：</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> my-name <span class="string">"Emacs"</span>)</span><span class="comment">;; 此处执行，在 minibuffer 显示 "Emacs"</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>insert</code> 可以在光标处插入字符串
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 在光标处插入字符串：</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"Lisp"</span>)</span><span class="comment">;; 此处执行，在光标处插入 Lisp</span></span><br><span class="line"><span class="comment">;; 可以给 insert 传入多个参数：</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"Emacs"</span> <span class="string">"-lisp"</span>)</span><span class="comment">;; 此处执行，在光标处插入 Emacs-Lisp</span></span><br><span class="line"><span class="comment">;; insert的参数可以是变量：</span></span><br><span class="line"><span class="list">(<span class="keyword">insert</span> <span class="string">"I am using "</span> my-name)</span><span class="comment">;; 此处执行，在光标处插入 I am using Emacs</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>可以把 <code>s-表达式</code> 嵌入到 <code>函数</code> 中
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 定义一个函数 hello()：</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello<span class="list">()</span> <span class="list">(<span class="keyword">insert</span> <span class="string">"I am using "</span> my-name)</span>)</span><span class="comment">;; 此处执行，在 minibuffer 输出 hello</span></span><br><span class="line"><span class="comment">;; 调用这个函数：</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span>)</span><span class="comment">;; 此处执行，在光标处插入 I am using Emacs</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>带参数的函数
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 定义带参数 name 的函数：</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span> <span class="list">(<span class="keyword">insert</span> <span class="string">"Hello "</span> name)</span>)</span><span class="comment">;; 此处执行，在 minibuffer 输出 hello</span></span><br><span class="line"><span class="comment">;; 调用这个函数，把字符串 "Elisp" 作为参数传进去：</span></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"Elisp"</span>)</span><span class="comment">;; 此处执行，在光标处插入 Hello Elisp</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>分割切换窗口
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span><span class="comment">;; 此处执行，会分割出另外一个窗口来显</span></span><br><span class="line">					   <span class="comment">;; 示 *scratch* 这个buffer，且光标位</span></span><br><span class="line">					   <span class="comment">;; 于 *scratch* 中，使用 C-x o 在各个</span></span><br><span class="line">					   <span class="comment">;; 窗口中跳转</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 <code>progn</code> 可以将 <code>s-表达式</code> 结合起来，所包含的 <code>s-表达式</code> 会依次执行
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span> <span class="string">"Emacs World"</span>)</span>)</span><span class="comment">;; 此处执行，会分割出另外一个窗口来显示 *scratch* ，并在</span></span><br><span class="line">			<span class="comment">;; *scratch* 中显示 Hello Emacs World</span></span><br><span class="line">  <span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>擦除 buffer 里面的内容
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span><span class="comment">;; 分割并切换到 *scratch* buffer</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span><span class="comment">;; 擦除 *scratch* buffer 里面的内容</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span>)</span>)</span><span class="comment">;; 执行 hello 函数</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*scratch*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span><span class="comment">;; 切换到窗格 1</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>使用 let() 把一个值和一个局部变量绑定
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">local-name</span> <span class="string">"you"</span>)</span>)</span><span class="comment">;; 在一定程度上 let 可以代替 progn</span></span><br><span class="line">  <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">hello</span> local-name)</span></span><br><span class="line">  <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>格式化字符串
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\n"</span> <span class="string">"elisp"</span>)</span><span class="comment">;; %s 是字符串占位符，此处被 "elisp" 代替, \n 是换行符</span></span><br><span class="line"><span class="comment">;; 使用格式化重写上面的 hello () 函数</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> hello <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\n"</span> name)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">hello</span> <span class="string">"KuGou"</span>)</span><span class="comment">;; 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 新建一个 greeting 函数</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="string">"Dave"</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">		    name</span><br><span class="line">		    your-name)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>和用户交互的函数
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span></span><br><span class="line"><span class="comment">;; 重写 greeting 函数</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">from-name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">		    from-name</span><br><span class="line">		    your-name)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;; 再重写 greeting 函数，让结果在另外的窗口中显示</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">(<span class="keyword">from-name</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">your-name</span> <span class="list">(<span class="keyword">read-from-minibuffer</span> <span class="string">"Enter your name:"</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">insert</span> <span class="list">(<span class="keyword">format</span> <span class="string">"Hello %s!\nI am %s."</span></span><br><span class="line">		    from-name</span><br><span class="line">		    your-name)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span> <span class="string">"Bluce"</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>列表
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 定义列表，给列表赋值</span></span><br><span class="line"><span class="list">(<span class="keyword">setq</span> list-of-name <span class="quoted">'(<span class="string">"Firefox"</span> <span class="string">"Chrome"</span> <span class="string">"Opera"</span>)</span>)</span></span><br><span class="line"><span class="comment">;; 获取列表的第一个值,没有副作用，不会改变列表</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; 获取列表剩余的所有值,没有副作用，不会改变列表</span></span><br><span class="line"><span class="list">(<span class="keyword">cdr</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; 把一个值添加到列表的开头，会直接对列表本身进行操作</span></span><br><span class="line"><span class="list">(<span class="keyword">push</span> <span class="string">"Vivaldi"</span> list-of-name)</span></span><br><span class="line"><span class="comment">;; 把列表中的每一个元素作为参数依次传给 hello() 函数</span></span><br><span class="line"><span class="list">(<span class="keyword">mapcar</span> <span class="quoted">'hello</span> list-of-name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 改进 greeting() 函数，对列表中的所有元素都被 hello() 函数调用</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> greeting <span class="list">()</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">erase-buffer</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">mapcar</span> <span class="quoted">'hello</span> list-of-names)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">greeting</span>)</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>
<ul class="org-ul">
<li>查找和替换
</li>
</ul>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="comment">;; 把 *ttt* buffer 中的所有 Hello 替换为 Hi</span></span><br><span class="line"><span class="comment">;; (goto-char (point-min)) 把光标移到 buffer 开头</span></span><br><span class="line"><span class="comment">;; (search-forward "Hello") 查找字符串 "Hello"</span></span><br><span class="line"><span class="comment">;; (while x y) 当 x 返回某个值时执行 y，当 x 返回 nil(空)时推出循环</span></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> replace-hello-by-hi <span class="list">()</span></span><br><span class="line">    <span class="list">(<span class="keyword">switch-to-buffer-other-window</span> <span class="string">"*ttt*"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">goto-char</span> <span class="list">(<span class="keyword">point-min</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">while</span> <span class="list">(<span class="keyword">search-forward</span> <span class="string">"Hello"</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">replace-match</span> <span class="string">"Hi"</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">other-window</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">replace-hello-by-hi</span>)</span></span><br><span class="line"><span class="comment">;; 上面函数替换成功，但会报错："Search failed: Hello"。如果要避免这个错误, 需要</span></span><br><span class="line"><span class="comment">;; 告诉 `search-forward' 这个命令是否在 buffer 的某个地方停止查找, 并且在什么都</span></span><br><span class="line"><span class="comment">;; 没找到时是否应该不给出错误提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;; 使用 (search-forward "Hello" nil t) 即可</span></span><br><span class="line"><span class="comment">;; 参数 nil 表示不限于某个范围</span></span><br><span class="line"><span class="comment">;; 参数 t 表示当什么都没找到时不给出错误提示</span></span><br><span class="line"><span class="comment">;;</span></span><br></pre></td></tr></table></figure>
</div>

Last Updated 2017-01-12 Thu 21:36.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习ELisp(001):HelloWorld]]></title>
      <url>http://yyangdid.github.io/2016/12/27/%E5%AD%A6%E4%B9%A0ELisp/2016-12-27.%E5%AD%A6%E4%B9%A0ELisp(001):HelloWorld/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 学习材料</a></li>
<li><a href="#sec-2">2. Hello World 例子</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
开始抽时间学习下 ELisp，毕竟想用好 Emacs 的话，ELisp必须得会。本篇主要声明了学习材
料的来源、用到的资料，在以后的记录中就不做重复的资料来源介绍了。当然，和学习其他
语言一样，先来个Hello World ^V^
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 学习材料</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://learnxinyminutes.com/docs/elisp/" target="_blank" rel="external">Learn X in Y minutes</a>
  中文版：<a href="https://learnxinyminutes.com/docs/zh-cn/elisp-cn/" target="_blank" rel="external">官方中文版</a>
</li>
<li><a href="http://smacs.github.io/elisp/" target="_blank" rel="external">Emacs Lisp 简明教程</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Hello World 例子</h2>
<div class="outline-text-2" id="text-2">
<p>
elisp代码文件不能作为一个单独的可执行文件运行，所有的 ELisp 代码都是在 Emacs 软件下
运行的。
</p>

<p>
切换到 <code>*scratch*</code> 这个buffer内，如果当前模式不是 <code>lisp-interaction-mode</code> ，那么
使用 <code>M-x lisp-interaction-mode</code> 切换到 <code>lisp-interaction-mode</code> 模式。
</p>

<p>
在 <code>*scratch*</code> buffer内输入代码：
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">message</span> <span class="string">"Hello World"</span>)</span></span><br></pre></td></tr></table></figure>
</div>
<p>
把光标放到右括号的后面，按下 <code>C-j</code> 组合键，此时在 <code>*scratch*</code> 的代码后面输出了
="Hello World"= ，并且在 minibuffer 也显示了 <code>Hello World</code> ，说明代码运行成功了。
或者使用组合键 <code>C-x C-e</code> ，这样只会在 minibuffer 显示 ="Hello World"= ，此组合键使
全局的，即使没有开启 <code>lisp-interaction-mode</code> 也能使用。
</p>
</div>
</div>

Last Updated 2017-01-12 Thu 21:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习vimtutor、gvimtutor重点记录]]></title>
      <url>http://yyangdid.github.io/2016/12/24/2016-12-24.%E5%AD%A6%E4%B9%A0vimtutor%E3%80%81gvimtutor%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 如何打开 vimtutor、gvimtutor</a>
<ul>
<li><a href="#sec-1-1">1.1. 使用终端打开</a>
<ul>
<li><a href="#sec-1-1-1">1.1.1. 打开 vimtutor</a></li>
<li><a href="#sec-1-1-2">1.1.2. 打开 gvimtutor</a></li>
</ul>
</li>
<li><a href="#sec-1-2">1.2. 在 gvim 中打开</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 常用按键</a>
<ul>
<li><a href="#sec-2-1">2.1. 移动</a></li>
<li><a href="#sec-2-2">2.2. 进入插入模式</a></li>
<li><a href="#sec-2-3">2.3. 保存、退出</a></li>
<li><a href="#sec-2-4">2.4. 删除</a></li>
<li><a href="#sec-2-5">2.5. 复制、粘贴</a></li>
<li><a href="#sec-2-6">2.6. 修改、替换</a></li>
<li><a href="#sec-2-7">2.7. 撤销</a></li>
<li><a href="#sec-2-8">2.8. 搜索</a></li>
<li><a href="#sec-2-9">2.9. 调整文本位置</a></li>
<li><a href="#sec-2-10">2.10. 保存</a></li>
<li><a href="#sec-2-11">2.11. 执行外部命令</a></li>
<li><a href="#sec-2-12">2.12. 提取、合并文件</a></li>
<li><a href="#sec-2-13">2.13. 信息、帮助命令</a></li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
vimtutor 和 gvimtutor 是 Vim 和 GVim 官方的简单教程，主要介绍了 Vim 和 GVim 在编
辑时一些常用的按键，一些术语的说明。vimtutor 和 gvimtutor 是相同的，vimtutor 是
在终端下，gvimtutor 是在 GUI 下，因为此文件是只读文件，所以在此文件中可以随意测
试、更改。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 如何打开 vimtutor、gvimtutor</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 使用终端打开</h3>
<div class="outline-text-3" id="text-1-1">
</div><div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> 打开 vimtutor</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
执行 <code>vimtutor</code> 命令即可，此命令不会另外开启窗口，直接在终端里。可能有些按键
会被终端占用，所以此方法不建议使用。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-18-22.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2"><span class="section-number-4">1.1.2</span> 打开 gvimtutor</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
执行 <code>gvimtutor</code> 命令即可，会开启 gvim 窗口，推荐。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-29-24.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 在 gvim 中打开</h3>
<div class="outline-text-3" id="text-1-2">
<p>
在 gvim 中输入 <code>:e $VIMRUNTIME/tutor/tutor.zh_cn.utf-8</code> 即可,推荐。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习vimtutor、gvimtutor重点记录/1_2016-12-24_17-37-05.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 常用按键</h2>
<div class="outline-text-2" id="text-2">
<blockquote>
<ul class="org-ul">
<li><code>()</code> 表示模式，例如 <code>(N)</code> 表示 <code>Normal</code> 模式。
<ul class="org-ul">
<li><code>N</code> <b>Normal</b> 正常模式
</li>
<li><code>V</code> <b>Visual</b> 可视模式
</li>
</ul>
</li>
<li><code>[]</code> 表示可选， <code><></code> 表示必选。例如 <code>[n]</code> 表示可选到输入数字， <code><n></n></code> 表示必选
输入数字。
<ul class="org-ul">
<li><code>n</code> <b>number</b> 数字
</li>
<li><code>e</code> <b>Enter</b> 回车
</li>
<li><code>s</code> <b>string</b> 字符串
</li>
<li><code>sold</code> <b>string-old</b> 旧字符串，配合 <code>snew</code> 使用
</li>
<li><code>snew</code> <b>string-new</b> 新字符串，配合 <code>sold</code> 使用
</li>
<li><code>sh</code> <b>shell</b> shell命令
</li>
<li><code>f</code> <b>filename</b> 文件名
</li>
</ul>
</li>
</ul>
</blockquote>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 移动</h3>
<div class="outline-text-3" id="text-2-1">
<ul class="org-ul">
<li><code>(N)[n]l</code> 向右移动
</li>
<li><code>(N)[n]h</code> 向左移动
</li>
<li><code>(N)[n]k</code> 向上移动
</li>
<li><code>(N)[n]j</code> 向下移动
</li>
<li><code>(N)0</code> 光标移动到行首，包括空格
</li>
<li><code>(N)^</code> 光标移动到行首字符
</li>
<li><code>(N)$</code> 光标移动到行尾
</li>
<li><code>(N)[n]w</code> 跳转到右侧单词首字母
</li>
<li><code>(N)[n]e</code> 若光标当前在单词词尾，跳转到右侧单词词尾，否则跳转到当前单词词尾
</li>
<li><code>(N)[n]b</code> 跳转到单词首字母
</li>
<li><code>(N)<n>G</n></code> 跳转到第 <code><n></n></code> 行
</li>
<li><code>(N)G</code> 跳转到文件最后一行行尾
</li>
<li><code>(N)gg</code> 跳转到文件第一行行首
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 进入插入模式</h3>
<div class="outline-text-3" id="text-2-2">
<ul class="org-ul">
<li><code>(N)i</code> 在光标所在字符后进入插入模式
</li>
<li><code>(N)I</code> 在当前行首进入插入模式
</li>
<li><code>(N)a</code> 在光标所在字符前进入插入模式
</li>
<li><code>(N)A</code> 在当前行尾进入插入模式
</li>
<li><code>(N)o</code> 在当前行下面插入一行进入插入模式
</li>
<li><code>(N)O</code> 在当前行上面插入一行进入插入模式
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 保存、退出</h3>
<div class="outline-text-3" id="text-2-3">
<ul class="org-ul">
<li><code>(N):w</code> 保存当前文件
</li>
<li><code>(N):q</code> 退出 vim、gvim
</li>
<li><code>(N):wq</code> 保存当前文件并退出 vim、gvim
</li>
<li><code>(N):q!</code> 强制退出，放弃所有改动
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> 删除</h3>
<div class="outline-text-3" id="text-2-4">
<ul class="org-ul">
<li><code>(N)[n]x</code> 删除光标所在的字符
</li>
<li><code>(N)d[n]w</code> 从光标处删除至下一个单词词首，包括两个词之间的空格，但不包括后一个
词的首字符
</li>
<li><code>(N)d[n]e</code> 从光标处删除至词尾，不包括空格
</li>
<li><code>(N)d$</code> 从光标处删除至行尾
</li>
<li><code>(N)D</code> 同 <code>(N)d$</code>
</li>
<li><code>(N)[n]dd</code> 删除当前行
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> 复制、粘贴</h3>
<div class="outline-text-3" id="text-2-5">
<ul class="org-ul">
<li><code>(V)y</code> 复制选中的文本
</li>
<li><code>(N)y[n]w</code> <code>(N)y[n]e</code> <code>(N)y[n]l</code> <code>(N)y$</code> 等等
</li>
<li><code>(N)[n]p</code> 对于字符串是粘贴到当前光标的后面，对于行是粘贴到下一行
</li>
<li><code>(N)[n]P</code> 对于字符串是粘贴到当前光标的前面，对于行是粘贴到上一行
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6"><span class="section-number-3">2.6</span> 修改、替换</h3>
<div class="outline-text-3" id="text-2-6">
<ul class="org-ul">
<li><code>(N)r</code> 修改光标下的单个字符
</li>
<li><code>(N)R</code> 修改从光标开始的字符序列
</li>
<li><code>(N)cw</code> 从光标处删除至词尾，不包括空格，并进入插入模式
</li>
<li><code>(N)ce</code> 同 <code>(N)cw</code>
</li>
<li><code>(N)c$</code> 从光标处删除至行尾，并进入插入模式
</li>
<li><code>(N)C</code> 同 <code>(N)c$</code>
</li>
<li><code>(N)cc</code> 删除整行文本，并进入插入模式
</li>
<li><code>(N)~</code> 反转光标所在字符的大小写
</li>
<li><code>(N):s/<sold>/<snew><e></e></snew></sold></code> 将光标所在行的第一个 <code><sold></sold></code> 替换为 <code><snew></snew></code>
</li>
<li><code>(N):s/<sold>/<snew>/g<e></e></snew></sold></code> 将光标所在行的所有 <code><sold></sold></code> 替换为 <code><snew></snew></code>
</li>
<li><code>(N):<n1>,<n2>s/<sold>/<snew>/g</snew></sold></n2></n1></code> 将 <code><n1></n1></code> 行至 <code><n2></n2></code> 行之间的所有 <code><sold></sold></code>
  替换为 <code><snew></snew></code>
</li>
<li><code>(N):%s/<sold>/<snew>/g</snew></sold></code> 将整个文件中的 <code><sold></sold></code> 替换为 <code><snew></snew></code>
</li>
<li><code>(N):%s/<sold>/<snew>/gc</snew></sold></code> 将整个文件中的 <code><sold></sold></code> 进行匹配，并询问是否替换为
<code><snew></snew></code>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-7" class="outline-3">
<h3 id="sec-2-7"><span class="section-number-3">2.7</span> 撤销</h3>
<div class="outline-text-3" id="text-2-7">
<ul class="org-ul">
<li><code>(N)[n]u</code> undo，撤销最后执行的命令
</li>
<li><code>(N)U</code> undo，撤销对整行的修改
</li>
<li><code>(N)[n]CTRL-R</code> redo,即撤销undo。撤销掉撤销命令，恢复操作前的状态，可多次输入
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-8" class="outline-3">
<h3 id="sec-2-8"><span class="section-number-3">2.8</span> 搜索</h3>
<div class="outline-text-3" id="text-2-8">
<ul class="org-ul">
<li><code>(N)/<s><e></e></s></code> 查找字符串 <code><s></s></code> ， <code>n</code> 查找下一个匹配， <code>N</code> 查找上一个匹配
</li>
<li><code>(N)?<s><e></e></s></code> 逆向查找字符串
</li>
<li><code>(N)CTRL-o</code> 回退到之前的位置，可多次输入
</li>
<li><code>(N)CTRL-i</code> 回退到较新的位置
</li>
<li><code>(N)%</code> 光标放在配对的括号处按下此组合键可跳转到匹配的括号处
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-9" class="outline-3">
<h3 id="sec-2-9"><span class="section-number-3">2.9</span> 调整文本位置</h3>
<div class="outline-text-3" id="text-2-9">
<ul class="org-ul">
<li><code>(N):ce<e></e></code> 使本行内容居中（center）
</li>
<li><code>(N):ri<e></e></code> 使本行内容居右（right）
</li>
<li><code>(N):le<e></e></code> 使本行内容居左（left）
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-10" class="outline-3">
<h3 id="sec-2-10"><span class="section-number-3">2.10</span> 保存</h3>
<div class="outline-text-3" id="text-2-10">
<ul class="org-ul">
<li><code>(N):w [f]<e></e></code> 保存当前buffer到 <code>f</code> 文件
</li>
<li><code>(V):w [f]<e></e></code> 保存选中的文本到 <code>f</code> 文件，当按下 <code>:</code> 后，在minibuffer会显示
='<,'>= 此时再输入 <code>w [f]</code>
</,'></li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-11" class="outline-3">
<h3 id="sec-2-11"><span class="section-number-3">2.11</span> 执行外部命令</h3>
<div class="outline-text-3" id="text-2-11">
<ul class="org-ul">
<li><code>(N):!<sh><e></e></sh></code> 执行外部shell命令，例如： <i>:!dir</i>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-12" class="outline-3">
<h3 id="sec-2-12"><span class="section-number-3">2.12</span> 提取、合并文件</h3>
<div class="outline-text-3" id="text-2-12">
<ul class="org-ul">
<li><code>(N):r <f><e></e></f></code> 在光标所在行的下一行插入 <code>f</code> 文件的所有内容
</li>
<li><code>(N):r !<sh><e></e></sh></code> 在光标所在行的下一行插入 <code>sh</code> 命令的输出内容
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2-13" class="outline-3">
<h3 id="sec-2-13"><span class="section-number-3">2.13</span> 信息、帮助命令</h3>
<div class="outline-text-3" id="text-2-13">
<ul class="org-ul">
<li><code>(N)CTRL-G</code> 在minibuffer显示光标所在行的位置及文件状态
</li>
<li><code>(N):help<e></e></code> 打开帮助
</li>
<li><code>(N):help <s><e></e></s></code> 打开关于 <code>s</code> 主题的帮助文件
</li>
</ul>
<blockquote>
<p>
打开帮助文件后使用 <code>CTRL-w CTRL-w</code> 在窗口之间跳转
</p>

<p>
使用 <code>(N):q<e></e></code> 关闭帮助窗口
</p>

<p>
在帮助文件中使用 <code>CTRL-]</code> 跳转到光标所在标签的主题帮助，使用 <code>CTRL-t</code> 或
<code>CTRL-o</code> 跳回
</p>
</blockquote>
</div>
</div>
</div>

Last Updated 2017-01-12 Thu 21:47.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习emacs-tutorial重点记录]]></title>
      <url>http://yyangdid.github.io/2016/12/24/2016-12-24.%E5%AD%A6%E4%B9%A0emacs-tutorial%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 如何打开 emacs tutorial</a>
<ul>
<li><a href="#sec-1-1">1.1. 用鼠标</a></li>
<li><a href="#sec-1-2">1.2. 使用组合键</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 常用组合键</a></li>
<li><a href="#sec-3">3. 术语对照</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
emacs tutorial 是 Emacs 官方的快速指南，主要介绍了 Emacs 在编辑时一些常用的组合
按键，一些术语的说明。因为此文件是只读文件，所以在此文件中可以随意测试、更改。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 如何打开 emacs tutorial</h2>
<div class="outline-text-2" id="text-1">
<p>
这里介绍在 emacs 中两种打开 tutorial 的方式（都是指在 <code>图形界面</code> 的 emacs 中）。
</p>
</div>
<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 用鼠标</h3>
<div class="outline-text-3" id="text-1-1">
<p>
打开 emacs 后会显示一些简单的信息，例如 emacs logo、版本、一些链接等信息。
使用鼠标点击 <code>Emacs Tutorial</code> 链接就会打开 emacs 快速指南了。
</p>

<div class="figure">
<p><img src="/2016/12/24/2016-12-24.学习emacs-tutorial重点记录/1_2016-12-24_13-37-05.png" alt="(点击图片可放大)" width="300px">
</p>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 使用组合键</h3>
<div class="outline-text-3" id="text-1-2">
<p>
使用组合键 <code>C-h t</code> （按住 <code>Ctrl</code> 键，按 <code>h</code> 键，然后同时松开，再按 <code>t</code> 键，
<code>t</code> 代表 <code>tutorial</code> ） 打开 tutorial。
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 常用组合键</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li><code>C-v</code>     向下滚动一页（等效按键： <b>PageUp</b> ）
</li>
<li><code>M-v</code>     向上滚动一页（等效按键： <b>PageDn</b> ）
</li>
<li><code>C-l</code>     重绘屏幕，将光标所在行置于屏幕中间行
</li>
<li><code>C-p</code>     光标向上一行（p 代表 previous，等效按键： <b>Up</b> ）
</li>
<li><code>C-n</code>     光标向下一行（n 代表 next，等效按键： <b>Down</b> ）
</li>
<li><code>C-f</code>     光标向前一个字符（f 代表 forward，等效按键： <b>Right</b> ）
</li>
<li><code>M-f</code>     光标向前一个词
</li>
<li><code>C-b</code>     光标向后一个字符（b 代表 backward，等效按键： <b>Left</b> ）
</li>
<li><code>M-b</code>     光标向后一个词
</li>
<li><code>C-a</code>     光标移动到行首
</li>
<li><code>M-a</code>     光标移动到句首
</li>
<li><code>C-e</code>     光标移动到行尾
</li>
<li><code>M-e</code>     光标移动到句尾
</li>
<li><code>M-<</code>     光标移动到文件首
</li>
<li><code>M-></code>     光标移动到文件尾
</li>
<li><code><delback></delback></code> 删除（delete）光标前的一个字符
</li>
<li><code>C-d</code>       删除（delete）光标后的一个字符
</li>
<li><code>M-<delback></delback></code> 移除（kill）光标前的一个词
</li>
<li><code>M-d</code>         移除（kill）光标后的一个词
</li>
<li><code>C-k</code>         移除（kill）从光标到行尾之间的所有字符
</li>
<li><code>M-k</code>         移除（kill）从光标到句尾之间的所有字符
</li>
<li><code>C-SPC</code>       开始选择
</li>
<li><code>C-@</code>         开始选择
</li>
<li><code>C-w</code>         剪切（kill）
</li>
<li><code>M-w</code>         复制
</li>
<li><code>C-y</code>         召回（yank），粘贴
</li>
<li><code>M-y</code>         循环选择召回（yank），粘贴
</li>
<li><code>C-x u</code>       撤销
</li>
<li><code>C-_</code>         撤销
</li>
<li><code>C-u 4 C-f</code> 光标向前移动 4 个字符
</li>
<li><code>C-u 4 C-v</code> 向下滚动 4 行
</li>
<li><code>C-u 4 %</code>   会插入 4 个%，即：%%%%
</li>
<li><code>C-g</code>     终止命令
</li>
<li><code>C-x 1</code>   关闭其他窗格
</li>
<li><code>C-x C-f</code> 打开文件
</li>
<li><code>C-x C-s</code> 保存文件
</li>
<li><code>C-x C-b</code> 列出缓冲区
</li>
<li><code>C-x s</code>   保存所有缓冲区文件
</li>
<li><code>C-x C-c</code> 关闭 Emacs
</li>
<li><code>M-q</code>     段落排版
</li>
<li><code>C-s</code>     搜索
</li>
<li><code>C-x 2</code>   在下方划分一个窗格
</li>
<li><code>C-x 3</code>   在右方划分一个窗格
</li>
<li><code>C-M-v</code>   光标到下一个窗格
</li>
<li><code>C-M-S-v</code> 光标到上一个窗格
</li>
<li><code>C-x o</code>   光标到其他窗格
</li>
<li><code>C-x 4 C-f</code> 在下方划分一个窗格并打开文件
</li>

<li><code>C-h c $$$-$</code> 查看组合键 <b>$$$-$</b> 的简要说明信息
</li>
<li><code>C-h k $$$-$</code> 查看组合键 <b>$$$-$</b> 的详细说明信息
</li>
<li><code>C-h f</code>   查看函数说明
</li>
<li><code>C-h v</code>   查看变量说明
</li>
<li><code>C-h a</code>   搜索相关命令
</li>
<li><code>C-h i</code>   打开联机手册（ <code>m emacs <return></return></code> 可阅读 emacs 使用手册， <code>?</code> 可阅读 Info 使用指南）
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 术语对照</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><code>command</code> 命令
</li>
<li><code>cursor</code>  光标
</li>
<li><code>scrolling</code> 滚动
</li>
<li><code>numeric argument</code> 数字参数
</li>
<li><code>window</code> 窗格
</li>
<li><code>frame</code>  窗口
</li>
<li><code>insert</code> 插入
</li>
<li><code>delete</code> 删除（不可恢复）
</li>
<li><code>kill</code> 移除（可召回）
</li>
<li><code>yank</code> 召回
</li>
<li><code>undo</code> 撤销
</li>
<li><code>file</code> 文件
</li>
<li><code>buffer</code> 缓冲区
</li>
<li><code>minibuffer</code> 小缓冲区
</li>
<li><code>echo area</code> 回显区
</li>
<li><code>mode line</code> 状态栏
</li>
<li><code>search</code> 搜索
</li>
<li><code>incremental search</code> 渐进式搜索
</li>
</ul>
</div>
</div>

Last Updated 2017-01-12 Thu 21:43.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Linux下安装Clang+LLVM（openSUSE Leap 42.2）]]></title>
      <url>http://yyangdid.github.io/2016/12/19/2016-12-19.%E5%9C%A8Linux%E4%B8%8B%E5%AE%89%E8%A3%85Clang+LLVM%EF%BC%88openSUSE%20Leap%2042.2%EF%BC%89/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 下载</a></li>
<li><a href="#sec-2">2. 安装</a></li>
</ul>
</div>
</div>
<blockquote>
<p>
在 Linux 下安装 Clang+LLVM（预编译版本）。测试系统为 openSUSE Leap 42.2。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 下载</h2>
<div class="outline-text-2" id="text-1">
<p>
进入 <a href="http://releases.llvm.org/download.html" target="_blank" rel="external">http://releases.llvm.org/download.html</a> 下载，此时的最新版本为 <code>3.9.0</code> ，找
到 <code>Pre-Built Binaries:</code> 列表下的对应发行版的预编译版本，此处下载的为 openSUSE 版：
<a href="http://releases.llvm.org/3.9.0/clang+llvm-3.9.0-x86_64-opensuse13.2.tar.xz" target="_blank" rel="external">Clang for OpenSuSE 13.2 x86<sub>64</sub></a> 。
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 安装</h2>
<div class="outline-text-2" id="text-2">
<p>
解压 <code>clang+llvm-3.9.0-x86_64-opensuse13.2.tar.xz</code> 文件。
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xz <span class="operator">-d</span> clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span>.tar.xz</span><br><span class="line">tar -xvf clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span>.tar</span><br></pre></td></tr></table></figure>
</div>
<p>
得到 <code>clang+llvm-3.9.0-x86_64-opensuse13.2</code> 文件夹。
</p>

<p>
进入 <code>clang+llvm-3.9.0-x86_64-opensuse13.2</code> 文件夹：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> clang+llvm-<span class="number">3.9</span>.<span class="number">0</span>-x86_64-opensuse13.<span class="number">2</span></span><br></pre></td></tr></table></figure>
</div>
<p>
将所有文件拷贝到 <code>/usr/local</code> 文件夹下：（获取 <code>su</code> 权限或使用 <code>sudo</code> 执行命令）
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp -r * /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
</div>
<p>
安装完成。
</p>

<p>
查看 clang 的版本：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang -v</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

Last Updated 2017-01-12 Thu 21:42.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各种Git乱码解决办法]]></title>
      <url>http://yyangdid.github.io/2016/12/19/2016-12-18.%E5%90%84%E7%A7%8DGit%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 系统乱码</a></li>
<li><a href="#sec-2">2. 使用 git add 命令添加文件名称包含中文时乱码</a>
<ul>
<li><a href="#sec-2-1">2.1. 解决方法</a></li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
各种 Git 乱码解决办法。测试系统为 openSUSE Leap 42.2。
</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>
主要参考资料来自<a href="http://blog.csdn.net/kl222/article/details/32903495" target="_blank" rel="external">康林工作室-git 设置</a>和<a href="http://blog.csdn.net/yunnywu/article/details/50553908" target="_blank" rel="external">码农天注定-git 乱码解决方案汇总</a>
</p>
</blockquote>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 系统乱码</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
修改之前建议备份 <code>~/.profile</code> 文件。
</p>
</blockquote>
<p>
把项目的字符编码统一设置为 <code>UTF-8</code> 。
</p>

<p>
设置系统语言为 <code>zh_CN.UTF-8</code> :
把 <code>export LANG=zh_CN.UTF-8</code> 添加到 <code>~/.profile</code> 文件中。
</p>

<p>
重新读取配置文件:
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>
</div>

<p>
查看当前用户系统编码：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">evn|grep LANG</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 使用 git add 命令添加文件名称包含中文时乱码</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 git add 添加文件，如果文件名包含中文，显示如下：
</p>
<pre class="example">
273\223\273.txt
</pre>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 解决方法</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>方法一：
执行命令：
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</div>
</li>
<li>方法二：
修改 <code>~/.gitconfig</code> 文件如下：（如果没有此文件就新建一个)
<pre class="example">
[core]
	quotepath = false
</pre>
</li>
</ol>
</div>
</div>
</div>

Last Updated 2017-01-12 Thu 21:40.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Linux下安装 zlib（openSUSE Leap 42.2）]]></title>
      <url>http://yyangdid.github.io/2016/12/17/2016-12-17.%E5%9C%A8Linux%E4%B8%8B%E5%AE%89%E8%A3%85zlib%EF%BC%88openSUSE%20Leap%2042.2%EF%BC%89/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. zlib 简介</a>
<ul>
<li><a href="#sec-1-1">1.1. 数据头(header)</a></li>
<li><a href="#sec-1-2">1.2. 算法</a></li>
<li><a href="#sec-1-3">1.3. 使用资源</a></li>
<li><a href="#sec-1-4">1.4. 策略</a></li>
<li><a href="#sec-1-5">1.5. 错误处理</a></li>
<li><a href="#sec-1-6">1.6. 数据长度</a></li>
<li><a href="#sec-1-7">1.7. 业界应用</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 安装 zlib</a>
<ul>
<li><a href="#sec-2-1">2.1. 下载</a></li>
<li><a href="#sec-2-2">2.2. 解压</a></li>
<li><a href="#sec-2-3">2.3. 配置安装</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1. 标准配置安装（未测试，本人使用下面的自定义安装目录安装的）</a></li>
<li><a href="#sec-2-3-2">2.3.2. 自定义安装目录安装</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
在 Linux 下安装 zlib，测试系统为 <code>openSUSE Leap 42.2</code> 。
</p>
</blockquote>
<a id="more"></a>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> zlib 简介</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
参考<a href="http://baike.baidu.com/link?url=CVTE1oPyeITvhkxeeJaPIbZhozQgMj4nFZDbZ7PMyK11L-Ft_5efh_6FaL3cGaJ9KPtxleGi8Z1pdDxmhTCVga" target="_blank" rel="external">百度百科</a>
</p>
</blockquote>
<p>
zlib 是提供数据压缩用的函式库，由 Jean-loup Gailly 与 Mark Adler 所开发，初版
0.9 版在 1995 年 5 月 1 日发表，zlib 使用 DEFLATE 算法，最初是为 libpng 函式库所
写的，后来普遍为许多软件所使用。此函式库为自由软件，使用 zlib 授权。截至 2007 年
3 月，zlib 是包含在 Coverity 的美国国土安全部赞助者选择继续审查的开源项目。
</p>
</div>
<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 数据头(header)</h3>
<div class="outline-text-3" id="text-1-1">
<p>
zlib 能使用一个 gzip 数据头，zlib 数据头或者不使用数据头压缩数据。
</p>

<p>
通常情况下，数据压缩使用 zlib 数据头，因为这提供错误数据检测。当数据不使用数据头
写入时，结果是没有任何错误检测的原始 DEFLATE 数据，那么解压缩软件的调用者不知道
压缩数据在什么地方结束。
</p>

<p>
gzip 数据头比 zlib 数据头要大，因为它保存了文件名和其他文件系统信息，事实上这是
广 泛使用的 gzip 文件的数据头格式。注意 zlib 函式库本身不能创建一个 gzip 文件，但
是它相当轻松的通过把压缩数据写入到一个有 gzip 文件头的文件中。
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 算法</h3>
<div class="outline-text-3" id="text-1-2">
<p>
目前 zlib 仅支持一个 LZ77 的变种算法，DEFLATE 的算法。
</p>

<p>
这个算法使用很少的系统资源，对各种数据提供很好的压缩效果。这也是在 ZIP 档案中无
一例外的使用这个算法。（尽管 zip 文件格式也支持几种其他的算法）。
</p>

<p>
看起来 zlib 格式将不会被扩展使用任何其他算法，尽管数据头可以有这种可能性。
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 使用资源</h3>
<div class="outline-text-3" id="text-1-3">
<p>
函数库提供了对处理器和内存使用控制的能力。
</p>

<p>
不同的压缩级别数值可以指示不同的压缩执行速度。
</p>

<p>
还有内存控制管理的功能。这在一些诸如嵌入式系统这样内存有限制的环境中是有用的。
</p>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> 策略</h3>
<div class="outline-text-3" id="text-1-4">
<p>
压缩可以针对特定类型的数据进行优化。
</p>

<p>
如果你总是使用 zlib 库压缩压缩特定类型的数据，那么可以使用有针对性的策略可以提高
压缩效率和性能。例如，如果你的数据包含很长的重复数据，那么可以用 RLE（运行长度编
码）策略，可能会有更好的结果。
</p>

<p>
对于一般的数据，默认的策略是首选。
</p>
</div>
</div>
<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> 错误处理</h3>
<div class="outline-text-3" id="text-1-5">
<p>
错误可以被放发现和跳过。
</p>

<p>
数据混乱可以被检测（只要数据和 zlib 或者 gzip 数据头一起被写入－参见上面）
</p>

<p>
此外，如果全刷新点（full-flush points）被写入到压缩后的数据流中，那么错误数据是
可以被跳过的，并且解压缩将重新同步到下个全刷新点。（错误数据的无错恢复被提供）。
全刷新点技术对于在不可靠的通道上的大数据流是很有用的，一些过去的数据丢失是不重要
的（例如多媒体数据），但是建立太多的全刷新点会极大的影响速度和压缩。
</p>
</div>
</div>
<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="section-number-3">1.6</span> 数据长度</h3>
<div class="outline-text-3" id="text-1-6">
<p>
对于压缩和解压缩，没有数据长度的限制。
</p>

<p>
重复调用库函数允许处理无限的数据块。一些辅助代码（计数变量）可能会溢出，但是不影
响实际的压缩和解压缩。
</p>


<p>
当压缩一个长（无限）数据流时，最好写入全刷新点。
</p>
</div>
</div>
<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7"><span class="section-number-3">1.7</span> 业界应用</h3>
<div class="outline-text-3" id="text-1-7">
<p>
今天，zlib 是一种事实上的业界标准，以至于在标准文档中，zlib 和 DEFLATE 常常互换
使用。数以千计的应用程序直接或间接依靠 zlib 压缩函式库，包括：
</p>
<ul class="org-ul">
<li>Linux 核心：使用 zlib 以实作网络协定的压缩、档案系统的压缩以及开机时解压缩自身
</li>
</ul>
<p>
的核心。
</p>
<ul class="org-ul">
<li>libpng：用于 PNG 图形格式的一个实现，对 bitmap 数据规定了 DEFLATE 作为流压缩方
</li>
</ul>
<p>
法。
</p>
<ul class="org-ul">
<li>Apache：使用 zlib 实作 http 1.1。
</li>
<li>OpenSSH、OpenSSL：以 zlib 达到最佳化加密网络传输。
</li>
<li>FFmpeg：以 zlib 读写 Matroska 等以 DEFLATE 算法压缩的多媒体串流格式。
</li>
<li>rsync：以 zlib 最佳化远端同步时的传输。
</li>
<li>Subversion、Git 和 CVS 版本控制 系统，使用 zlib 来压缩和远端仓库的通讯流量。
</li>
<li>dpkg 和 RPM 等包管理软件：以 zlib 解压缩 RPM 或者其他封包。
</li>
</ul>
<p>
因为其代码的可移植性，宽松的许可以及较小的内存占用，zlib 在许多嵌入式设备中也有应用。
</p>
</div>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 安装 zlib</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 下载</h3>
<div class="outline-text-3" id="text-2-1">
<p>
在 <a href="http://zlib.net/" target="_blank" rel="external">zlib 官网</a> 下载最新版本，此处为 <code>1.2.8</code> 版本，下载链接：<a href="http://zlib.net/zlib-1.2.8.tar.gz" target="_blank" rel="external">zlib-1.2.8.tar.gz</a>
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 解压</h3>
<div class="outline-text-3" id="text-2-2">
<p>
终端进入 <code>zlib-1.2.8.tar.gz</code> 所在的目录执行解压命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzvf zlib-<span class="number">1.2</span>.<span class="number">8</span>.tar.gz</span><br></pre></td></tr></table></figure>
</div>
<p>
解压完成得到 <code>zlib-1.2.8</code> 文件夹。
</p>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 配置安装</h3>
<div class="outline-text-3" id="text-2-3">
<p>
终端进入 <code>zlib-1.2.8</code> 文件夹
</p>
</div>
<div id="outline-container-sec-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> 标准配置安装（未测试，本人使用下面的<a href="#1">自定义安装目录安装</a>的）</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<ol class="org-ol">
<li>build static

<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make <span class="built_in">test</span></span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>build shared libraries

<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">$ ./configure --shared</span><br><span class="line">$ make <span class="built_in">test</span></span><br><span class="line">$ make install</span><br><span class="line">$ cp zutil.h /usr/<span class="built_in">local</span>/include</span><br><span class="line">$ cp zutil.c /usr/<span class="built_in">local</span>/include</span><br></pre></td></tr></table></figure>
</div>
<p>
现在 <code>/usr/local/lib</code> 下应该有这几个文件：
</p>
<ul class="org-ul">
<li>libz.a
</li>
<li>libz.so -> libz.so.1.2.1
</li>
<li>libz.so.1 -> libz.so.1.2.1
</li>
<li>libz.so.1.2.1
</li>
</ul>
<p>
<code>/usr/local/include</code> 下应该有这几个文件：
</p>
<ul class="org-ul">
<li>zconf.h
</li>
<li>zlib.h
</li>
<li>zutil.h
</li>
</ul>
</li>
<li>系统配置

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/zlib/lib &gt; /etc/ld.so.conf.d/zlib.conf</span><br></pre></td></tr></table></figure>
</div>
</li>

<li>加载配置

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ldconfig</span><br><span class="line">$ updatedb</span><br></pre></td></tr></table></figure>
</div>
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> 自定义安装目录安装<a id="1" name="1"></a></h4>
<div class="outline-text-4" id="text-2-3-2">
<ol class="org-ol">
<li>安装在 <code>/usr/local/zlib</code> 文件夹下。

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令创建文件夹：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/zlib</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>执行配置：

<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zlib</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>编译：

<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>安装：

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>系统配置

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/zlib/lib &gt; /etc/ld.so.conf.d/zlib.conf</span><br></pre></td></tr></table></figure>
</div>
</li>
<li>加载配置

<p>
获得 <code>su</code> 权限或者使用 <code>sudo</code> 执行命令：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ldconfig</span><br><span class="line">$ updatedb</span><br></pre></td></tr></table></figure>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>

Last Updated 2017-01-12 Thu 21:39.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[加快Emacs的运行速度]]></title>
      <url>http://yyangdid.github.io/2016/12/13/2016-12-13.%E5%8A%A0%E5%BF%ABEmacs%E7%9A%84%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6/</url>
      <content type="html"><![CDATA[

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 配置</a></li>
<li><a href="#sec-2">2. 使用</a>
<ul>
<li><a href="#sec-2-1">2.1. load 到 <code>tmpfs</code></a></li>
<li><a href="#sec-2-2">2.2. 还原</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1. 不保留历史记录、对配置文件的更改。。。</a></li>
<li><a href="#sec-2-2-2">2.2.2. 保留历史记录、对配置文件的更改。。。</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<blockquote>
<p>
此方法可以加快 Emacs 的运行速度，而不是启动速度。其实就是把 Emacs 的配置文件
<code>.emacs.d</code> 文件夹放到内存中，而内存的吞吐速度要比普通的机械硬盘快的多，相应的
emacs 的速度也会有很大提升。
</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>
此方法只在 Linux 系统中测试了，个人系统 <code>openSUSE42.2</code>
</p>
</blockquote>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 配置</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>将下面一行插入到 <code>/etc/fstab</code> 中，然后重启电脑（我电脑是 8G 内存，size 设置为 1G 了）。
</li>
</ol>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tmpfs       /tmp        tmpfs       nodev,nosuid,size=<span class="number">1</span>G    <span class="number">0</span>   <span class="number">0</span></span><br></pre></td></tr></table></figure>
</div>
<ol class="org-ol">
<li>新建一个脚本，并且赋予可执行权限，可以命名为 <code>emacs2ram</code> ，内容如下:
</li>
</ol>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage:"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  emacs2ram start"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"  emacs2ram restore"</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"start"</span> ];<span class="keyword">then</span></span><br><span class="line">    backup=.emacs.d-backup</span><br><span class="line">    link=.emacs.d</span><br><span class="line">    volatile=/tmp/.emacs.d-<span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line">    IFS=</span><br><span class="line">    <span class="built_in">set</span> -efu</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> ~/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -r <span class="variable">$volatile</span> ]; <span class="keyword">then</span></span><br><span class="line">	mkdir -m0700 <span class="variable">$volatile</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># link -&gt; volatie does not exist</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$(readlink $link)</span>"</span> != <span class="string">"<span class="variable">$volatile</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="comment"># backup project at first</span></span><br><span class="line">	mv <span class="variable">$link</span> <span class="variable">$backup</span></span><br><span class="line">	<span class="comment"># create the link</span></span><br><span class="line">	ln <span class="operator">-s</span> <span class="variable">$volatile</span> <span class="variable">$link</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="operator">-e</span> <span class="variable">$link</span>/.unpacked ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Sync .emacs.d from memory to backup ..."</span></span><br><span class="line">	rsync -avq --delete --exclude .unpacked ./<span class="variable">$link</span>/ ./<span class="variable">$backup</span>/</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"Sync .emacs.d from disk to memory ..."</span></span><br><span class="line">	rsync -avq ./<span class="variable">$backup</span>/ ./<span class="variable">$link</span>/</span><br><span class="line">	touch <span class="variable">$link</span>/.unpacked</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Moving .emacs.d back to disk ..."</span></span><br><span class="line">    backup=.emacs.d-backup</span><br><span class="line">    link=.emacs.d</span><br><span class="line">    volatile=/tmp/.emacs.d-<span class="variable">$USER</span></span><br><span class="line">    <span class="built_in">cd</span> ~/</span><br><span class="line">    rm <span class="operator">-f</span> <span class="variable">$link</span> &amp;&amp; mv <span class="variable">$backup</span> <span class="variable">$link</span> &amp;&amp; rm -rf <span class="variable">$volatile</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"DONE!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</div>
<p>
<code>emacs2ram</code> 文件：
</p>
<ul class="org-ul">
<li><a href="https://github.com/yyangdid/blog-backup/blob/master/MyFiles/Emacs/emacs2ram" target="_blank" rel="external">github</a>
</li>
<li><a href="https://coding.net/u/yyangdid/p/blog-backup/git/blob/master/MyFiles/Emacs/emacs2ram" target="_blank" rel="external">condig.net</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 使用</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> load 到 <code>tmpfs</code></h3>
<div class="outline-text-3" id="text-2-1">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram start</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Sync .emacs.d from disk to memory ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
说明配置文件已经转移到 <code>tmpfs</code> 了，ok！
</p>

<p>
可以用文件管理器看一下，在 <code>/tmp</code> 文件夹下会有一个 <code>.emacs.d-用户名</code> 的文件夹，
而主目录的 <i>.emacs.d</i> 文件夹会变成一个软链接，指向 <code>/tmp/.emacs.d-用户名</code> ，同时
在主目录还会有一个 <code>.emacs.d-backup</code> 文件夹,是对原 <code>.emacs.d</code> 的备份。
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 还原</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 不保留历史记录、对配置文件的更改。。。</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram restore</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Moving .emacs.d back to disk ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>

<p>
用文件管理器看一下， <code>/tmp/.emacs.d-用户名</code> 和 <code>~/.emacs.d-backup</code> 两文件夹已经
没了，而 <code>~/.emacs.d</code> 回来了，不是软链接了。
</p>
</div>
</div>
<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 保留历史记录、对配置文件的更改。。。</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
进入脚本所在的目录执行：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram start</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Sync .emacs.d from memory to backup ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
然后执行：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">emacs2ram restore</span><br></pre></td></tr></table></figure>
</div>
<p>
会提示：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Moving .emacs.d back to disk ...</span><br><span class="line">DONE!</span><br></pre></td></tr></table></figure>
</div>
<p>
ok!
</p>


<p>
执行 <code>emacs2ram start</code> 是把 <code>/tmp/.emacs.d-用户名</code> 的内容同步到
<code>~/.emacs.d-backup</code> 。
</p>


<p>
执行 <code>emacs2ram restore</code> 是把 <code>~/.emacs.d-backup</code> 同步到 <code>~/.eamcs.d</code> ，同时删除
<code>/tmp/.emacs.d-用户名</code> 和 <code>~/.emacs.d-backup</code> 。
</p>


<blockquote>
<p>
此方法是在
<a href="https://github.com/lujun9972/emacs-document/blob/master/emacs-common/%E5%8D%81%E5%80%8D%E6%8F%90%E5%8D%87Emacs%E6%80%A7%E8%83%BD.org?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io" target="_blank" rel="external">
开发者头条</a>看到的，对原文的 <code>emacs2ram</code> 脚本修改了一下。如果觉得每次都要执行命令
麻烦，可以把命令加入开机启动和关机前执行，个人没折腾。
</p>
</blockquote>
</div>
</div>
</div>
</div>

Last Updated 2017-01-15 Sun 17:34.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.1.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    </entry>
    
  
  
</search>
